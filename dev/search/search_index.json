{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to Infix, your immutable, friendly, and secure operating system! On these pages you can find both user and developer documentation.</p> <p>Most topics on configuring the system include CLI examples, but every setting, as well as status read-back from the operational datastore, is also possible to perform using NETCONF or RESTCONF.  In fact, the Infix regression test system solely relies on NETCONF and RESTCONF.</p> <p>Tip</p> <p>The CLI documentation is also available from inside the CLI itself using the <code>help</code> command in admin-exec mode.</p> <p>This document provides an introduction of key concepts, details how the system boots, including failure modes, and provides links to other documents for further study.</p>"},{"location":"#command-line-interface","title":"Command Line Interface","text":"<p>The command line interface (CLI, see-ell-i) is the traditional way of interacting with single network equipment like switches and routers. Today users have come to expect more advanced graphical GUIs, like a web interface, to manage a device or NETCONF-based tools that allow for managing entire fleets of installed equipment.</p> <p>Nevertheless, when it comes to initial deployment and debugging, it is very useful to know how to navigate and use the CLI.</p> <p>Info</p> <p>For more information, see the CLI Introduction and the CLI Configuration Tutorial.</p>"},{"location":"#key-concepts","title":"Key Concepts","text":"<p>The two modes in the CLI are the admin-exec and the configure context.</p> <p>However, when logging in to the system, from the console port or SSH, you land in a standard UNIX shell, Bash.  This is for advanced users and remote scripting purposes (production equipment):</p> <pre><code>    Run the command 'cli' for interactive OAM\n\n    admin@example:~$\n</code></pre> <p>To enter the CLI, follow the instructions, for interactive Operations, Administration, and Management (OAM), type:</p> <pre><code>    admin@example:~$ cli\n    admin@example:/&gt;\n</code></pre> <p>The prompt, constructed from your username and the device's hostname, changes slightly.  You are now in the admin-exec context of the CLI. Here you can inspect system status and do operations to debug networking issues, e.g. ping.  You can also enter configure context by typing: <code>configure</code> followed by commands to <code>set</code>, <code>edit</code>, apply changes using <code>leave</code>, or <code>abort</code> and return to admin-exec.</p> <p>Tip</p> <p>If you haven't already, the CLI Introduction would be useful to skim through at this point.</p>"},{"location":"#datastores","title":"Datastores","text":"<p>The system has several datastores (or files):</p> <ul> <li><code>factory-config</code> consists of a set of default configurations, some    static and others generated per-device, e.g., a unique hostname and    number of ports/interfaces.   This file is generated at boot.</li> <li><code>failure-config</code> is also generated at boot, from the same YANG models    as <code>factory-config</code>, and holds the system Fail Secure Mode</li> <li><code>startup-config</code> is created from <code>factory-config</code> at boot if it does    not exist.  It is loaded as the system configuration on each boot.</li> <li><code>running-config</code> is what is actively running on the system.  If no    changes have been made since the system booted, it is the same as    <code>startup-config</code>.</li> <li><code>candidate-config</code> is created from <code>running-config</code> when entering the    configure context.  Any changes made here can be discarded (<code>abort</code>,    <code>rollback</code>) or committed (<code>commit</code>, <code>leave</code>) to <code>running-config</code>.</li> </ul> <p>Tip</p> <p>Please see the Branding &amp; Releases document for more in-depth information on how <code>factory-config</code> and <code>failure-config</code> can be adapted to different customer requirements.  Including how you can override the generated versions of these files with plain per-product ones -- this may even protect against some of the failure modes below.</p>"},{"location":"boot/","title":"Boot Procedure","text":"<p>Systems running Infix will typically boot in multiple phases, forming a boot chain. Each link in the chain has three main responsibilities:</p> <ol> <li> <p>Ensuring the integrity of the next link before passing control to    it. This avoids silent failures stemming from data corruption.</p> </li> <li> <p>Ensuring the authenticity of the next link before passing control    to it, commonly referred to as Secure Boot. This protects against    malicious attempts to modify a system's firmware.</p> </li> <li> <p>Preparing the system state according to the requirements of the    next link. E.g. the Linux kernel requires the system's RAM to be    operational.</p> </li> </ol> <p>A typical chain consists of four stages:</p> <pre><code>    .---------.\n    |   ROM   &gt;---.   Determine the location of and load the SPL\n    '---------'   |\n.-----------------'\n|   .---------.\n'---&gt;   SPL   &gt;---.   Perform DDR training and load the TPL\n    '---------'   |\n.-----------------'\n|   .---------.\n'---&gt;   TPL   &gt;---.   Load Linux kernel, device tree, and root filesystem\n    '---------'   |\n.-----------------'\n|   .---------.\n'---&gt;  Infix  |       Get down to business\n    '---------'\n</code></pre> <p>After a reset, hardware will pass control to a program (ROM) which is almost always programmed into the SoC by the vendor.  This program will determine the location of the Secondary Program Loader (SPL), typically by reading a set of Sample at Reset (SaR) pins.</p> <p>The SPL is sometimes provided by the SoC vendor in binary form, and is sometimes built as a part of the Tertiary Program Loader (TPL) build.  Its main responsibility is usually to set up the system's memory controller and perform DDR training, if required, before loading the TPL.</p> <p>Commonly referred to as the system's bootloader, the TPL is responsible for preparing the execution environment required by the Linux kernel.</p> <p>This document's focus is to describe the final two phases of the boot chain, as the initial phases are very hardware dependent, better described by existing documentation provided by the SoC vendor.</p>"},{"location":"boot/#bootloader","title":"Bootloader","text":""},{"location":"boot/#configuration","title":"Configuration","text":"<p>To mitigate the risk of a malicious user being able to circumvent the bootloader's validation procedure, user configuration is kept to a minimum.  Two settings are available:</p> <ul> <li> <p>Boot order: Since Infix maintains two copies of its software image,   and as some bootloaders support netbooting, the order in which boot   sources are considered can be configured. To select the active   source, use RAUC:</p> <pre><code>rauc status mark-active &lt;slot&gt;\n</code></pre> <p>Where <code>&lt;slot&gt;</code> is one of:</p> <code>&lt;slot&gt;</code> Source <code>rootfs.0</code> Primary partition <code>rootfs.1</code> Secondary partition <code>net.0</code> Netboot (where supported) </li> <li> <p>Debug: By default, the kernel will only output errors to the   console during boot. Optionally, this can be altered such that all   enabled messages are logged.</p> </li> </ul> <p>On systems using U-Boot, this can be enabled by running <code>fw_setenv   DEBUG 1</code>. To restore the default behavior, run <code>fw_setenv DEBUG</code>.</p> <p>On systems running GRUB, this can be enabled by running   <code>grub-editenv /mnt/aux/grub/grubenv set DEBUG=1</code>. To restore the   default behavior, run <code>grub-editenv /mnt/aux/grub/grubenv unset   DEBUG</code></p>"},{"location":"boot/#u-boot","title":"U-Boot","text":"<p>Used on aarch64 based systems.  It is able to verify both the integrity and authenticity of an Infix image.  As such, it can be used as a part of a Secure Boot chain, given that the preceding links are able to do the same.</p> <p>Supports booting Infix from a block device using the Disk Image layout. Currently, Virtio and MMC disks are supported.</p> <p>An FIT Framed Squash Image can be used to boot Infix over the network.  DHCP is used to configure the network and TFTP to transfer the image to the system's RAM.</p> <p>Access to U-Boot's shell is disabled to prevent side-loading of malicious software.  To configure the active boot partition, refer to the Bootloader Configuration section.</p>"},{"location":"boot/#grub","title":"GRUB","text":"<p>Used on x86_64 based systems.  Neither the integrity nor the authenticity of the Infix image is verified.  It is only intended to provide a way of booting a Disk Image, such that a standard System Upgrade can be performed on virtualized instances.</p> <p>Access to the GRUB shell is not limited in any way, and the boot partition can be selected interactively at boot using the arrow keys. It is also possible to permanently configure the default partition from Infix using the Bootloader Configuration.</p>"},{"location":"boot/#system-boot","title":"System Boot","text":"<p>After the system firmware (BIOS or and boot loader start Linux the following happens.  The various failure modes, e.g., missing password in VPD, are detailed later in this section.</p> <p></p> <ol> <li>Before mounting <code>/cfg</code> and <code>/var</code> partitions, hosting read-writable     data like <code>startup-config</code> and container images, the system first     checks if a factory reset has been requested by the user, if so it     wipes the contents of these partitions</li> <li>Linux boots with a device tree which is used for detecting generic     make and model of the device, e.g., number of interfaces.  It may     also reference an EEPROM with Vital Product Data.  That is     where the base MAC address and per-device password hash is stored.     (Generic builds use the same MAC address and password)</li> <li>On every boot the system's <code>factory-config</code> and <code>failure-config</code> are     generated from the YANG<sup>2</sup> models of the current firmware version.     This ensures that a factory reset device can always boot, and that     there is a working fail safe, or rather fail secure, mode</li> <li>On first power-on, and after a factory reset, the system does not     have a <code>startup-config</code>, in which case <code>factory-config</code> is copied     to <code>startup-config</code> -- if a per-product specific version exists it     is preferred over the generated one</li> <li>Provided the integrity of the <code>startup-config</code> is OK, a system     service loads and activates the configuration</li> </ol>"},{"location":"boot/#failure-modes","title":"Failure Modes","text":"<p>So, what happens if any of the steps above fail?</p> <p>VPD Fail</p> <p>The per-device password cannot be read, or is corrupt, so the system <code>factory-config</code> and <code>failure-config</code> are not generated:</p> <ol> <li>First boot, or after factory reset: <code>startup-config</code> cannot be     created or loaded, and <code>failure-config</code> cannot be loaded.  The     system ends up in an unrecoverable state, i.e., RMA<sup>3</sup> Mode</li> <li>The system has booted (at least) once with correct VPD and password     and already has a <code>startup-config</code>.  Provided the <code>startup-config</code>     is OK (see below), it is loaded and system boots successfully</li> </ol> <p>In both cases, external factory reset modes/button will not help, and in the second case will cause the device to fail on the next boot.</p> <p>The second case does not yet have any warning or event that can be detected from the outside.  This is planned for a later release.</p> <p>Broken startup-config</p> <p>If loading <code>startup-config</code> fails for some reason, e.g., invalid JSON syntax, failed validation against the system's YANG model, or a bug in the system's <code>confd</code> service, the Fail Secure Mode is triggered and <code>failure-config</code> is loaded (unless VPD Failure, see above).</p> <p>Tip</p> <p>Please see the Branding &amp; Releases document for how to provide per-product <code>failure-config</code>, or <code>factory-config</code> to suit your product's preferences.</p> <p>Fail Secure Mode is a fail-safe mode provided for debugging the system.  The default<sup>4</sup> creates a setup of isolated interfaces with communication only to the management CPU, SSH and console login using the device's factory reset password, IP connectivity only using IPv6 link-local, and device discovery protocols: LLDP, mDNS-SD.  The login and shell prompt are set to <code>failure-c0-ff-ee</code>, the last three octets of the device's base MAC address.</p>"},{"location":"boot/#system-upgrade","title":"System Upgrade","text":"<p>Much of the minutiae of software upgrades is delegated to RAUC, which offers lots of benefits out-of-the-box:</p> <ul> <li> <p>Upgrade Bundles are always signed, such that their authenticity can   be verified by the running operating system, before the new one is   installed.</p> </li> <li> <p>The bureaucracy of interfacing with different bootloaders, manage   the boot order, is a simple matter of providing a compatible   configuration.</p> </li> <li> <p>Updates can be sourced from the local filesystem (including external   media like USB sticks or SD-cards) and from remote servers using FTP   or HTTP(S).</p> </li> </ul> <p>To initiate a system upgrade from the shell<sup>1</sup>, run:</p> <pre><code>rauc install &lt;file|url&gt;\n</code></pre> <p>Where the file or URL points to a RAUC Upgrade Bundle.</p> <p>This will upgrade the partition not currently running.  After a successful upgrade is completed, you can reboot your system, which will then boot from the newly installed image.  Since the partition from which you were originally running is now inactive, running the same upgrade command again will bring both partitions into sync.</p>"},{"location":"boot/#image-formats","title":"Image Formats","text":""},{"location":"boot/#squashfs-image","title":"SquashFS Image","text":"<p>Canonical Name: <code>rootfs.squashfs</code></p> <p>The central read-only filesystem image containing Infix's Linux kernel, device trees, and root filesystem. All other images bundle this image, or is dependent on it, in one way or another.</p> <p>On its own, it can be used as an initrd to efficiently boot a virtual instance of Infix.</p>"},{"location":"boot/#fit-framed-squash-image","title":"FIT Framed Squash Image","text":"<p>Canonical Name: <code>rootfs.itb</code></p> <p>As the name suggests, this is essentially the Squash FS Image with a Flattened Image Tree (FIT) header.  Being a native format to U-Boot, using this framing allows us to verify the integrity and authenticity of the SquashFS image using standard U-Boot primitives.</p> <p>In contrast to most FIT images, the kernel and device trees are not stored as separate binaries in the image tree.  Instead, Infix follows the standard Linux layout where the kernel and related files are stored in the <code>/boot</code> directory of the filesystem.</p> <p>On disk, this image is then stored broken up into its two components; the FIT header (<code>rootfs.itbh</code>) and the SquashFS image.  The header is stored on the Auxiliary Data partition of the Disk Image, while the SquashFS image is stored in one of the Root Filesystem partitions.</p> <p>When the system boots, U-Boot will concatenate the two parts to validate the SquashFS's contents. This path was chosen because:</p> <ul> <li> <p>Having a separate raw SquashFS means Linux can directly mount it as   the root filesystem.</p> </li> <li> <p>It decouples Infix from U-Boot.  If a better way of validating our   image is introduced, we can switch to it without major changes to   Infix's boot process, as we can still use a regular SquashFS as the   root filesystem.</p> </li> <li> <p>It lets us use standard interfaces to boot Linux, like SYSLINUX.  It   also plays well with traditional bootloaders, like GRUB.</p> </li> </ul> <p>In its full form, it can be used to netboot Infix, as it contains all the information needed by U-Boot in a single file.</p>"},{"location":"boot/#rauc-upgrade-bundle","title":"RAUC Upgrade Bundle","text":"<p>Canonical Name: <code>infix-${ARCH}.pkg</code></p> <p>Itself a SquashFS image, this bundle (sometimes referred to package) contains the Infix SquashFS Image along with the header of the FIT Framed Squash Image, and some supporting files to let RAUC know how install it on the target system.</p> <p>When performing a System Upgrade, this is the format to use.</p>"},{"location":"boot/#disk-image","title":"Disk Image","text":"<p>Canonical Name: <code>disk.img</code></p> <p>Infix runs from a block device (e.g. eMMC or virtio disk) with the following layout. The disk is expected to use the GPT partitioning scheme. Partitions marked with an asterisk are optional.</p> <pre><code>.-----------.\n| GPT Table |\n:-----------:\n|    boot*  |\n:-----------:\n|    aux    |\n:-----------:\n|           |\n|  primary  |\n|           |\n:-----------:\n|           |\n| secondary |\n|           |\n:-----------:\n|    cfg    |\n:-----------:\n|           |\n|    var*   |\n|           |\n'-----------'\n</code></pre>"},{"location":"boot/#boot-bootloader","title":"<code>boot</code> - Bootloader","text":"Parameter Value Required No Size 4 MiB Format Raw binary, as dictated by the hardware <p>Optional partition containing the system's bootloader. May also reside in a separate storage device, e.g. a serial FLASH.</p> <p>On x86_64, this partition holds the EFI system partition, containing the GRUB bootloader.</p>"},{"location":"boot/#aux-auxiliary-data","title":"<code>aux</code> - Auxiliary Data","text":"Parameter Value Required Yes Size 4 MiB Format EXT4 filesystem <p>Holds information that is shared between Infix and its bootloader, such as image signatures required to validate the chain of trust, bootloader configuration etc.</p> <p>Typical layout when using U-Boot bootloader:</p> <pre><code>    /\n    \u251c primary.itbh\n    \u251c secondary.itbh\n    \u2514 uboot.env\n</code></pre> <p>During boot, an ITB header along with the corresponding root filesystem image are concatenated in memory, by U-Boot, to form a valid FIT image that is used to verify its integrity and origin before any files are extracted from it.</p> <p>Note that the bootloader's primary environment is bundled in the binary - <code>uboot.env</code> is only used to import a few settings that is required to configure the boot order.</p>"},{"location":"boot/#primarysecondary-root-filesystems","title":"<code>primary</code>/<code>secondary</code> - Root Filesystems","text":"Parameter Value Required Yes Size &gt;= 256 MiB Format Squash filesystem <p>Holds the SquashFS Image. Two copies exist so that an incomplete upgrade does not brick the system, and to allow fast rollbacks when upgrading to a new version.</p>"},{"location":"boot/#cfg-configuration-data","title":"<code>cfg</code> - Configuration Data","text":"Parameter Value Required Yes Size &gt;= 16 MiB Format EXT4 filesystem <p>Non-volatile storage of the system configuration and user data. Concretely, user data is everything stored under <code>/root</code> and <code>/home</code>.</p>"},{"location":"boot/#var-variable-data","title":"<code>var</code> - Variable Data","text":"Parameter Value Required No Size &gt;= 16 MiB Format EXT4 filesystem <p>Persistent storage for everything under <code>/var</code>. This is maintained as a separate filesystem from the data in <code>cfg</code>, because while the system can funtion reasonably well without a persistent <code>/var</code>, loosing <code>/cfg</code> or <code>/etc</code> is much more difficult.</p> <p>If <code>var</code> is not available, Infix will still persist <code>/var/lib</code> using <code>cfg</code> as the backing storage.</p> <ol> <li> <p>See Upgrade &amp; Boot Order for more information.\u00a0\u21a9</p> </li> <li> <p>YANG is a modeling language from IETF, replacing that used for SNMP (MIB), used to describe the subsystems and properties of the system.\u00a0\u21a9</p> </li> <li> <p>Return Merchandise Authorization (RMA), i.e., broken beyond repair by end-user and eligible for return to manufacturer.\u00a0\u21a9</p> </li> <li> <p>Customer specific builds can define their own <code>failure-config</code>. It may be the same as <code>factory-config</code>, with the hostname set to <code>failure</code>, or a dedicated configuration that isolates interfaces, or even disables ports, to ensure that the device does not cause any security problems on the network.  E.g., start forwarding traffic between previously isolated VLANs.\u00a0\u21a9</p> </li> </ol>"},{"location":"branding/","title":"Branding &amp; Releases","text":"<p>This document is for projects using Infix as a br2-external, i.e., OEMs.</p>"},{"location":"branding/#branding","title":"Branding","text":"<p>Branding is done in menuconfig, there are several settings affecting it, most are in the Infix external subsection called \"Branding\", but there is also <code>BR2_TARGET_GENERIC_HOSTNAME</code>, which deserves a special mention.</p> <p>The hostname is used for the system default <code>/etc/hostname</code>, which is the base name for the \"unique:ified\" hostname + the last three octets of the base MAC<sup>1</sup> address, e.g., <code>infix-c0-ff-ee</code>.  This in turn is the hostname that is set at first boot and also advertised by device discovery protocols like mDNS-SD and LLDP.</p> <p>See the help texts for the Infix Branding settings to understand which ones are mandatory and which are optional, menuconfig does not check this for you and you may end up with odd results.</p> <p>Verify the result after a build by inspecting:</p> <ul> <li><code>output/images/*</code>: names, missing prefix, etc.</li> <li><code>output/target/etc/os-release</code>: this file is sourced by     other build scripts, e.g., <code>mkgns3a.sh</code>.  For reference, see     https://www.freedesktop.org/software/systemd/man/os-release.html</li> </ul> <p>Note: to get proper GIT revision (hash) from your composed OS, remember in menuconfig to set <code>INFIX_OEM_PATH</code>.  When unset the Infix <code>post-build.sh</code> script defaults to the Infix base path.  The revision is stored in the file <code>/etc/os-release</code> as BUILD_ID and is also in the file <code>/etc/version</code>.  See below for more info.</p>"},{"location":"branding/#factory-failure-config","title":"Factory &amp; Failure Config","text":"<p>To support booting the same image (CPU architecture) on multiple boards, Infix by default generates the device's initial configuration every time at boot.  This also ensures the device can always be restored to a known state after a factory reset, since the <code>factory-config</code> is guaranteed to be compatible with the YANG models for the given software version. (For more information on how the system boots, please see the section Key Concepts in the Introduction document.)</p> <p>However, for custom builds of Infix it is possible to override this with a single static <code>/etc/factory-config.cfg</code> (and failure-config) in your rootfs overlay -- with a VPD you can even support several!</p>"},{"location":"branding/#variables-format-specifiers","title":"Variables &amp; Format Specifiers","text":"<p>Parts of the configuration you likely always want to generated, like the SSH hostkey used by SSH server and NETCONF, a unique hostname, or the <code>admin</code> user's unique (per-device with a VPD) password hash.  This section lists the available keywords, see the next section for examples of how to use them:</p> <ul> <li>Default password hash: <code>$factory$</code> (from VPD, .dtb, or built-in)    XPath: <code>/ietf-system:system/authentication/user/password</code></li> <li>Default SSH and NETCONF hostkey: <code>genkey</code> (regenerated at factory reset)    XPath: <code>/ietf-keystore:keystore/asymmetric-keys/asymmetric-key[name='genkey']</code></li> <li>Hostname format specifiers:    XPath: <code>/ietf-system:system/hostname</code></li> <li><code>%i</code>: OS ID, from <code>/etc/os-release</code>, from Menuconfig branding</li> <li><code>%h</code>: Default hostname, from <code>/etc/os-release</code>, from branding</li> <li><code>%m</code>: NIC specific part of base MAC, e.g., to <code>c0-ff-ee</code></li> <li><code>%%</code>: Literal %</li> </ul>"},{"location":"branding/#static-files","title":"Static Files","text":"<p>Caveat: maintaining static a factory-config and failure-config may seem like an obvious choice, but as YANG models evolve (even the IETF models get upgraded), you may need to upgrade your static files.</p> <p>First, for one-off builds (one image per product), the simplest way is to override the location where the system looks for the files, <code>/etc</code> already at build time.  This can be done using a Buildroot rootfs overlay providing, e.g., <code>/etc/factory-config.cfg</code>.  Example: NanoPi R2S in <code>${INFIX}/board/aarch64/r2s/rootfs/etc/factory-config.cfg</code>.</p> <p>Second, to support multiple products in a single image, we can employ another method to install a <code>/etc/factory-config.cfg</code> override -- at runtime.  This relies on the very early system <code>probe</code> that detects the specific product from VPD data.</p> <p>The <code>probe</code> consists of several sequential steps that currently run from <code>${INFIX}/board/common/rootfs/usr/libexec/infix/init.d/</code>.  One of them check if <code>/usr/share/product/&lt;PRODUCT&gt;</code> exists, and if so attempts to copy the entire contents to <code>/</code>.  Here, <code>&lt;PRODUCT&gt;</code> is determined from the VPD, which is available in <code>/run/system.json</code> as <code>\"product-name\"</code>, after <code>00-probe</code> has run. The lower case version of the string is used.</p> <p>I.e., create a rootfs overlay that provides any combination of:</p> <ul> <li><code>/usr/share/product/&lt;PRODUCT&gt;/etc/factory-config.cfg</code></li> <li><code>/usr/share/product/&lt;PRODUCT&gt;/etc/failure-config.cfg</code></li> </ul>"},{"location":"branding/#dynamically-generated","title":"Dynamically Generated","text":"<p>The generated <code>factory-config</code> and <code>failure-config</code> files consist of both static JSON files and part generated files at runtime for each device.  The resulting files are written to the RAM disk in <code>/run</code>:</p> <ul> <li><code>/run/confd/factory-config.gen</code></li> <li><code>/run/confd/failure-config.gen</code></li> </ul> <p>Provided no custom overrides (see above) have been installed already, these files are then copied to:</p> <ul> <li><code>/etc/factory-config.cfg</code></li> <li><code>/etc/failure-config.cfg</code></li> </ul> <p>... where the bootstrap process expects them to be in the next step.</p> <p>Examples of generated contents are the SSH hostkey and hostname.  The latter is constructed from the file <code>/etc/hostname</code>, appended with the last three octets of the system's base MAC address.  To override the base hostname, set <code>BR2_TARGET_GENERIC_HOSTNAME</code> in your defconfig.</p> <p>The static files are installed by Infix <code>confd</code> in <code>/usr/share/confd/</code> at build time.  It contains two subdirectories:</p> <pre><code>/usr/share/confd/\n |- factory.d/\n |  |- 10-foo.json\n |  |- 10-bar.json\n |  `- 10-qux.json\n `- failure.d/\n    |- 10-xyzzy.json\n    `- 10-garply.json\n</code></pre> <p>To override, or extend, these files in you br2-external, set up a rootfs overlay and add it last in <code>BR2_ROOTFS_OVERLAY</code>.  Your overlay can look something like this:</p> <pre><code>./board/common/rootfs/\n  |- etc/\n  |  |- confdrc             # See below\n  |  `- confdrc.local\n  `- usr/\n     `- share/\n        `- confd/\n           |- 10-foo.json   # Override Infix foo\n           |- 30-bar.json   # Extend, probably 10-bar.json\n           `- 30-fred.json  # Extend, your own defaults\n</code></pre> <p>Using the same filename in your overlay, here <code>10-foo.json</code>, completely replaces the contents of the same file provided by Infix.  If you just want to extend, or replace parts of an Infix default, use <code>30-....json</code>. Here the file <code>30-bar.json</code> is just a helpful hit to maintainers of your br2-external that it probably extends Infix' <code>10-bar.json</code>.</p> <p>The reason for the jump in numbers is that 20 is reserved for files generated by Infix' <code>gen-function</code> scripts.  Your br2-external can provide a few custom ones that the <code>bootstrap</code> knows about, e.g., <code>gen-ifs-custom</code> that overrides <code>20-interfaces.json</code>.  See the bootstrap script for more help, and up-to-date information.</p> <p>Note: you may not need to provide your own <code>/etc/confdrc</code>.  The one installed by <code>confd</code> is usually enough.  However, if you want to adjust the behavior of <code>bootstrap</code> you may want to override it.  There is also <code>confdrc.local</code>, which usually is enough to change arguments to scripts like <code>gen-interfaces</code>, e.g., to create a bridge by default, you may want to look into <code>GEN_IFACE_OPTS</code>.</p>"},{"location":"branding/#example-snippets","title":"Example Snippets","text":"<p>IETF System:</p> <pre><code>  \"ietf-system:system\": {\n    \"hostname\": \"example-%m\",\n    \"ntp\": {\n      \"enabled\": true,\n      \"server\": [\n        {\n          \"name\": \"ntp.org\",\n          \"udp\": {\n            \"address\": \"pool.ntp.org\"\n          }\n        }\n      ]\n    },\n    \"authentication\": {\n      \"user\": [\n        {\n          \"name\": \"admin\",\n          \"password\": \"$factory$\",\n          \"infix-system:shell\": \"bash\"\n        }\n      ]\n    },\n    \"infix-system:motd-banner\": \"Li0tLS0tLS0uCnwgIC4gLiAgfCBJbmZpeCAtLSBhIE5ldHdvcmsgT3BlcmF0aW5nIFN5c3RlbQp8LS4gdiAuLXwgaHR0cHM6Ly9rZXJuZWxraXQuZ2l0aHViLmlvCictJy0tLSctJwo=\"\n  },            # &lt;---- REMEMBER COMMA SEPARATORS IN SNIPPETS!\n                # &lt;---- ... and no comments.\n</code></pre> <p>The <code>motd-banner</code> is a binary type, which is basically a Base64 encoded text file without line breaks (<code>-w0</code>):</p> <pre><code>$ echo \"Li0tLS0tLS0uCnwgIC4gLiAgfCBJbmZpeCAtLSBhIE5ldHdvcmsgT3BlcmF0aW5nIFN5c3RlbQp8LS4gdiAuLXwgaHR0cHM6Ly9rZXJuZWxraXQuZ2l0aHViLmlvCictJy0tLSctJwo=\" |base64 -d\n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.github.io\n'-'---'-'\n</code></pre> <p>IETF Keystore</p> <p>Notice how both the public and private keys are left empty here, this cause them to be always automatically regenerated after each factory reset. Keeping the <code>factory-config</code> snippet like this means we can use the same file on multiple devices, without risking them sharing the same host keys.  Sometimes you may want the same host keys, but that is the easy use-case and not documented here.</p> <pre><code>  \"ietf-keystore:keystore\": {\n    \"asymmetric-keys\": {\n      \"asymmetric-key\": [\n        {\n          \"name\": \"genkey\",\n          \"public-key-format\": \"ietf-crypto-types:ssh-public-key-format\",\n          \"public-key\": \"\",\n          \"private-key-format\": \"ietf-crypto-types:rsa-private-key-format\",\n          \"cleartext-private-key\": \"\",\n          \"certificates\": {}\n        }\n      ]\n    }\n  },\n</code></pre> <p>IETF NETCONF Server</p> <pre><code>  \"ietf-netconf-server:netconf-server\": {\n    \"listen\": {\n      \"endpoints\": {\n        \"endpoint\": [\n          {\n            \"name\": \"default-ssh\",\n            \"ssh\": {\n              \"tcp-server-parameters\": {\n                \"local-address\": \"::\"\n              },\n              \"ssh-server-parameters\": {\n                \"server-identity\": {\n                  \"host-key\": [\n                    {\n                      \"name\": \"default-key\",\n                      \"public-key\": {\n                        \"central-keystore-reference\": \"genkey\"\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n  },\n</code></pre> <p>Infix Services <pre><code>  \"infix-services:ssh\": {\n    \"enabled\": true,\n    \"hostkey\": [\n      \"genkey\"\n    ],\n    \"listen\": [\n      {\n        \"name\": \"ipv4\",\n        \"address\": \"0.0.0.0\",\n        \"port\": 22\n      },\n      {\n        \"name\": \"ipv6\",\n        \"address\": \"::1\",\n        \"port\": 22\n      }\n    ]\n  }\n</code></pre></p>"},{"location":"branding/#integration","title":"Integration","text":"<p>When integrating your software stack with Infix there may be protocols that want to change system settings like hostname and dynamically set IP address and default gateway, e.g. PROFINET.  This section detail a few recommendations for maintaining co-existence in this scenario of the multiple producers problem.</p> <p>First, there's a clear difference between \"singleton\" like hostsname and an interface IP address.  Consider the case of a static IP and a DHCP assigned IP, these can co-exist because of the <code>proto NUM</code> field available in iproute2.  This is used in Infix so that static addresses can be flushed independently of DHCP addresses.  The same can be done by other \"address providers\", e.g., PROFINET.</p> <p>Changing properties like hostname should be done by injecting a change into Infix, by for example calling <code>sysrepocfg -Ediff.xml</code>.  Here is an example of how to get the current hostname and apply an XML diff:</p> <pre><code>root@infix-00-00-00:~# sysrepocfg -X -x \"/system/hostname\" &gt; hostnm.xml\nroot@infix-00-00-00:~# cat hostnm.xml\n&lt;system xmlns=\"urn:ietf:params:xml:ns:yang:ietf-system\"&gt;\n  &lt;hostname&gt;infix-00-00-00&lt;/hostname&gt;\n&lt;/system&gt;\nroot@infix-00-00-00:~# edit hostnm.xml\nroot@infix-00-00-00:~# sysrepocfg -Ehostnm.xml\nroot@example:~# \n</code></pre> <p>Second, perform all changes on <code>running-config</code>, the running datastore. That way you have a clear state to return to if your application needs to do a factory reset.  E.g., in PROFINET a type 1/2 factory reset will reset only the PROFINET specific settings.  That way you can actually have your system <code>startup-config</code> disable all physical ports and the PROFINET application enables only ports that are not deactivated.  (On factory reset it will not know of any ports to deactivate so it will activate all.)</p> <p>You can consider the system composed of two entities:</p> <ul> <li>NETCONF starts up the system using <code>startup-config</code>, then</li> <li>Hands over control to your application at runtime</li> </ul> <p>Infix is prepared for this by already having two \"runlevels\" for these two states.  The <code>startup-config</code> is applied in runlevel S (bootstrap) and the system then enters runlevel 2 for normal operation.</p> <p>This allow you to keep a set of functionality that is provided by the underlying system, and another managed by your application.  You can of course in your br2-external provide a sysrepo plugin that block  operations on certain datastores when your application is enabled. E.g., to prevent changes to startup after initial deployment.  In that case a proper factory reset would be needed to get back to a \"pre-deployment\" state where you can reconfigure your baseline.</p>"},{"location":"branding/#releases","title":"Releases","text":"<p>A release build requires the global variable <code>INFIX_RELEASE</code> to be set. It can be derived from GIT, if the source tree is kept in GIT VCS.  First, let us talk about versioning in general.</p>"},{"location":"branding/#versioning","title":"Versioning","text":"<p>Two popular scheme for versioning a product derived from Infix:</p> <ol> <li>Track Infix major.minor, e.g. Foobar v23.08.z, where <code>z</code> is     your patch level.  I.e., Foobar v23.08.0 could be based on Infix     v23.08.0, or v23.08.12, it is up to you.  Maybe you based it on     v23.08.12 and then back ported changes from v23.10.0, but it was     the first release you made to your customer(s).</li> <li>Start from v1.0.0 and step the major number every time you sync     with a new Infix release, or every time Infix bumps to the next     Buildroot LTS.</li> </ol> <p>The important thing is to be consistent, not only for your own sake, but also for your end customers.  The major.minor.patch style is the most common and often recommended style, which usually maps well to other systems, e.g. PROFINET GSDML files require this (VX.Y.Z). But you can of course use only two numbers, major.minor, as well.</p> <p>What could be confusing, however, is if you use the name Infix with your own versioning scheme.</p>"},{"location":"branding/#specifying-versioning-information","title":"Specifying Versioning Information","text":"<p>Two optional environment variables control the version information recorded in images. Both of these must be a lower-case string (no spaces or other characters outside of 0\u20139, a\u2013z, '.', '_' and '-') identifying the operating system version, excluding any OS name information or release code name, and suitable for processing by scripts or usage in generated filenames.</p>"},{"location":"branding/#infix_build_id","title":"<code>INFIX_BUILD_ID</code>","text":"<p>Used for <code>BUILD_ID</code> in <code>/etc/os-release</code>.</p> <p>Default: <code>$(git describe --always --dirty --tags)</code>, from the top directory. By default, the top directory refers to the root of the Infix source tree, but this can be changed by setting the branding variable <code>INFIX_OEM_PATH</code>, e.g. in a <code>defconfig</code> file or via <code>make menuconfig</code>, to the path of an enclosing br2-external.</p>"},{"location":"branding/#infix_release","title":"<code>INFIX_RELEASE</code>","text":"<p>Used for <code>VERSION</code> and <code>VERSION_ID</code> in <code>/etc/os-release</code> and generated file names like disk images, etc.</p> <p>Default: <code>${INFIX_BUILD_ID}</code></p> <ol> <li> <p>The base MAC address is defined in the device's Vital Product Data (VPD) EEPROM, or similar, which is used by the kernel to create the system interfaces.  This MAC address is usually also printed on a label on the device.\u00a0\u21a9</p> </li> </ol>"},{"location":"container/","title":"Docker Container Support","text":"<p>Infix comes with native support for Docker containers using podman. The YANG model describes the current level of support, complete enough to run both system and application containers.</p> <p>Key design features of Infix, like using Linux switchdev, allow users to assign switch ports directly to containers, not just bridged VETH pairs. This is a rare and in many cases unique feature of Infix.</p> <p>All network specific settings are done using the IETF interfaces YANG model, with augments for containers to ensure smooth integration with container networking in podman.</p> <p>Important</p> <p>Even though the <code>podman</code> command can be used directly from a shell prompt, we strongly recommend using the CLI commands instead.  They employ the services of a wrapper <code>container</code> script which handles the integration of Docker containers in the system.</p>"},{"location":"container/#caution","title":"Caution","text":"<p>A word of warning.  Containers can run on your system in privileged mode, as <code>root</code>, giving them full access to devices on your system. Even though containers are fenced from the host with Linux namespaces, resource limited using cgroups, and normally run with capped privileges, a privileged container is relatively easy to break out of.  A trivial example is given in the Advanced section of this document.</p> <p>We recommend avoiding privileged containers, if possible (they do have valid use-cases) and instead use capabilities.</p> <p>Remember:</p> <ul> <li>If the system is compromised, containers can be used to easily    install malicious software in your system and over the network</li> <li>Your system is as secure as anything you run in the container</li> <li>If you run containers, there is no security guarantee of any kind</li> <li>Running 3rd party container images on your system could open a    security hole/attack vector/surface</li> <li>An expert with knowledge how to build exploits will be able to    jailbreak/elevate to root even if best practices are followed</li> </ul> <p>This being said, a system suspected of being compromised can always be restored to a safe state with a factory reset.  Provided, of course, that it has secure boot enabled.</p>"},{"location":"container/#getting-started","title":"Getting Started","text":"<p>In the CLI, containers can be run in one of two ways:</p> <ol> <li><code>container run IMAGE [COMMAND]</code>, or</li> <li>enter <code>configure</code> context, then <code>edit container NAME</code></li> </ol> <p>The first is useful mostly for testing, or running single commands in an image.  It is a wrapper for <code>podman run -it --rm ...</code>.</p> <p>The second creates a read-only container that by default automatically start at every boot.   It basically wraps <code>podman create ...</code>.</p> <p>When non-volatile storage is needed two complementary options exist:</p> <ul> <li>Volumes: data stored in a volume is persisted until explicitly    removed from the configuration, i.e., across host reboots and    container upgrades</li> <li>Content Mounts: where the content of a file   mounted into the container is kept along with the container   configuration in the device's <code>startup-config</code></li> </ul> <p>Podman ensures (using tmpfs) all containers have writable directories for certain critical file system paths: <code>/dev</code>, <code>/dev/shm</code>, <code>/run</code>, <code>/tmp</code>, and <code>/var/tmp</code>.  Meaning, what you most often need is writable volumes for <code>/var/lib</code> and <code>/etc</code>, or only file mounts for a few files in <code>/etc</code>.  The actual requirements depend on your container image and application to run.</p> <p>Important</p> <p>When running containers from public registries, double-check that they support the CPU architecture of your host system.  Remember, unlike virtualization, containers reuse the host's CPU and kernel.</p> <p></p>"},{"location":"container/#example-hello-world","title":"Example: Hello World","text":"<p>Classic Hello World:</p> <pre><code>admin@example:/&gt; container run docker://hello-world\nStarting docker://hello-world :: use Ctrl-p Ctrl-q to detach\nTrying to pull docker.io/library/hello-world:latest...\nGetting image source signatures\nCopying blob c1ec31eb5944 done\nCopying config d2c94e258d done\nWriting manifest to image destination\nStoring signatures\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre>"},{"location":"container/#example-web-server","title":"Example: Web Server","text":"<p>A web server with nginx, using standard docker bridge.  Podman will automatically create a VETH pair for us, connecting the container to the <code>docker0</code> bridge:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface docker0\nadmin@example:/config/interface/docker0/&gt; set container-network\nadmin@example:/config/interface/docker0/&gt; end\nadmin@example:/config/&gt; edit container web\nadmin@example:/config/container/web/&gt; set image docker://nginx:alpine\nadmin@example:/config/container/web/&gt; set network publish 8080:80\nadmin@example:/config/container/web/&gt; set network interface docker0\nadmin@example:/config/container/web/&gt; set volume cache target /var/cache\nadmin@example:/config/container/web/&gt; leave\nadmin@example:/&gt; show container\n</code></pre> <p>Exit to the shell and verify the service with curl, or try to attach to your device's IP address using your browser:</p> <pre><code>admin@example:~$ curl http://localhost:8080\n</code></pre> <p>or connect to port 8080 of your running Infix system with a browser. See the following sections for how to add more interfaces and manage your container at runtime.</p>"},{"location":"container/#container-images","title":"Container Images","text":"<p>The underlying <code>podman</code> project supports importing and fetching images in a variety of ways, the most common ones are also supported by Infix.  In this section we present how to use them and in the next section we show how to upgrade to a newer base image.</p> <p>The CLI help shows:</p> <pre><code>admin@example:/config/container/system/&gt; help image\nNAME\n    image &lt;string&gt;\n\nDESCRIPTION\n    Docker image for the container: [transport]name[:tag|@digest]\n\n    quay.io/username/myimage     -- Pull myimage:latest\n    docker://busybox             -- Pull busybox:latest from Docker Hub\n    docker://ghcr.io/usr/img     -- Pull img:latest from GitHub packages\n    dir:/media/usb/myimage:1.1   -- Use myimage v1.1 from USB media\n    docker-archive:/tmp/archive  -- Use archive:latest from tarball\n    oci-archive:/lib/oci/archive -- Use archive:latest from OCI archive\n                                    May be in .tar or .tar.gz format\n\n    Additionally, the following URIs are also supported for setups\n    that do not use a HUB or similar.  Recommend using 'checksum'!\n\n    ftp://addr/path/to/archive   -- Downloaded using wget\n    http://addr/path/to/archive  -- Downloaded using curl\n    https://addr/path/to/archive -- Downloaded using curl\n\n    Note: if a remote repository cannot be reached, the creation of the\n          container will be put on a queue that retries pull every time\n          there is a route change in the host's system.\n</code></pre> <p>Tip</p> <p>The built-in help system in the CLI is generated from the YANG model, so the same information is also available for remote NETCONF users.</p> <p>The two most common variants are <code>docker://</code> and <code>oci-archive:/</code>.</p> <p>The former requires a working Docker registry and the latter operates on a plain OCI archive.  Infix does not come with a built-in registry, so the <code>docker://</code> option is best used with external services, which in turn require networking to be up.  In a deployment phase the easiest may be to set up a single interface on your host system with DHCP client.</p> <p>The default method is <code>docker://</code>, so when setting the <code>image</code> for your container, you can omit the <code>docker://</code> prefix.  You can also use the admin-exec command <code>container pull docker://...</code>, and when configuring a container <code>podman</code> will check first if it has the image before trying to download anything.  (See also the upgrade section, below.)</p> <p>The <code>oci-archive:/</code> is interesting since many users may not have, or do not want to, publish their images in a registry.  Use the Docker OCI exporter or any other tool that supports generating OCI Image format.  Infix supports loading both <code>.tar</code> or <code>.tar.gz</code> formats.</p> <p>Here we show a simple example of fetching an OCI image to the system, but many others exist, tools like <code>wget</code>, <code>curl</code>, and <code>scp</code> come to mind.</p> <p>Shell OCI Example:</p> <pre><code>admin@example:~$ cd /var/tmp/\nadmin@example:/var/tmp$ sudo wget https://github.com/kernelkit/curiOS/releases/download/edge/curios-oci-amd64.tar.gz\nConnecting to github.com (140.82.121.3:443)\nwget: note: TLS certificate validation not implemented\nConnecting to objects.githubusercontent.com (185.199.109.133:443)\nsaving to 'curios-oci-amd64.tar.gz'\ncurios-oci-amd64.tar 100% |*********************************| 7091k  0:00:00 ETA\n'curios-oci-amd64.tar.gz' saved\nadmin@example:/var/tmp$ ll\ntotal 7104\ndrwxr-xr-x    3 root     root          4096 Mar 27 14:22 ./\ndrwxr-xr-x   14 root     root          4096 Mar 27 11:57 ../\n-rw-r--r--    1 root     root       7261785 Mar 27 14:22 curios-oci-amd64.tar.gz\ndrwx------    6 frr      frr           4096 Mar 27 11:57 frr/\n</code></pre> <p>Importing the image into Podman can be done either from the CLI admin-exec context ...</p> <pre><code>admin@example:/var/tmp$ cli\nadmin@example:/&gt; container load /var/tmp/curios-oci-amd64.tar.gz name curios:edge\n</code></pre> <p>Tip</p> <p>The <code>name curios:edge</code> is the tag you give the imported (raw) archive which you can then reference in your container image configuration: <code>set image curios:edge</code>.</p> <p>... or by giving the container configuration the full path to the OCI archive, which helps greatly with container upgrades (see below):</p> <pre><code>admin@example:/config/container/system/&gt; set image oci-archive:/var/tmp/curios-oci-amd64.tar.gz\n</code></pre> <p>Checksum Example:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit container sys\nadmin@example:/config/container/sys/&gt; set hostname sys\nadmin@example:/config/container/sys/&gt; set image ftp://192.168.122.1/curios-oci-amd64-v24.05.0.tar.gz\nadmin@example:/config/container/sys/&gt; set checksum\n    md5 sha256 sha512\nadmin@example:/config/container/sys/&gt; set checksum sha256 4f01077036527498ed910f1a3e80645ae3eff629d10043cf80ebc6850c99c629\nadmin@example:/config/container/sys/&gt; leave\nadmin@example:/&gt; copy running-config startup-config\nadmin@example:/&gt; show container\nCONTAINER ID  IMAGE                                             COMMAND               CREATED         STATUS        PORTS       NAMES\nb02e945c43c9  localhost/curios-oci-amd64-v24.05.0:latest                              5 seconds ago   Up 5 seconds              sys\n\nadmin@example:/&gt; show log\n...\nNov 20 07:24:56 infix container[5040]: Fetching ftp://192.168.122.1/curios-oci-amd64-v24.05.0.tar.gz\nNov 20 07:24:56 infix container[5040]: curios-oci-amd64-v24.05.0.tar.gz downloaded successfully.\nNov 20 07:24:56 infix container[5040]: curios-oci-amd64-v24.05.0.tar.gz checksum verified OK.\nNov 20 07:24:57 infix container[5040]: Cleaning up extracted curios-oci-amd64-v24.05.0\nNov 20 07:24:57 infix container[5040]: podman create --name sys --conmon-pidfile=/run/container:sys.pid --read-only --replace --quiet --cgroup-parent=containers  --restart=always --systemd=false --tz=local --hostname sys --log-driver k8s-file --log-opt path=/run/containers/sys.fifo --network=none curios-oci-amd64-v24.05.0\nNov 20 07:24:57 infix container[3556]: b02e945c43c9bce2c4be88e31d6f63cfdb1a3c8bdd02179376eb059a49ae05e4\n</code></pre>"},{"location":"container/#upgrading-a-container-image","title":"Upgrading a Container Image","text":"<p>The applications in your container are an active part of the system as a whole, so make it a routine to keep your container images up-to-date!</p> <p>Containers are created at first setup and at every boot.  If the image exists in the file system it is reused -- i.e., an image pulled from a remote registry is not fetched again.</p> <p>To upgrade a versioned image:  - update your <code>running-config</code> to use the new <code>image:tag</code>  - <code>leave</code> to activate the change, if you are in the CLI  - Podman pulls the new image in the background  - Your container is recreated with the new image  - The container is started</p> <p>For \"unversioned\" images, e.g., images using a <code>:latest</code> or <code>:edge</code> tag, use the following CLI command (<code>NAME</code> is the name of your container):</p> <pre><code>admin@example:/&gt; container upgrade NAME\n</code></pre> <p>This stops the container, does <code>container pull IMAGE</code>, and recreates it with the new image.  Upgraded containers are automatically restarted.</p> <p>Example using registry:</p> <pre><code>admin@example:/&gt; container upgrade system\nsystem\nTrying to pull ghcr.io/kernelkit/curios:edge...\nGetting image source signatures\nCopying blob 07bfba95fe93 done\nCopying config 0cb6059c0f done\nWriting manifest to image destination\nStoring signatures\n0cb6059c0f4111650ddbc7dbc4880c64ab8180d4bdbb7269c08034defc348f17\nsystem: not running.\n59618cc3c84bef341c1f5251a62be1592e459cc990f0b8864bc0f5be70e60719\n</code></pre> <p>An OCI archive image can be upgraded in a similar manner, the first step is of course to get the new archive onto the system (see above), and then, provided the <code>oci-archive:/path/to/archive</code> format is used, call the upgrade command as</p> <pre><code>admin@example:/&gt; container upgrade system\nUpgrading container system with local archive: oci-archive:/var/tmp/curios-oci-amd64.tar.gz ...\n7ab4a07ee0c6039837419b7afda4da1527a70f0c60c0f0ac21cafee05ba24b52\n</code></pre> <p>OCI archives can also be fetched from ftp/http/https URL, in that case the upgrade can be done the same way as a registry image (above).</p> <p>Tip</p> <p>Containers running from OCI images embedded in the operating system, e.g., <code>/lib/oci/mycontainer.tar.gz</code>, always run from the version in the operating system.  To upgrade, install the new container image at build time, after system upgrade the container is also upgraded.  The system unpacks and loads the OCI images into Podman every boot, which ensures the running container always has known starting state.</p> <p>Example: default builds of Infix include a couple of OCI images for reference, one is <code>/lib/oci/curios-nftables-v24.11.0.tar.gz</code>, but there is also a symlink called <code>curios-nftables-latest.tar.gz</code> in the same directory, which is what the Infix regression tests use in the image configuration of the container.  This is what enables easy upgrades of the container along with the system itself.</p>"},{"location":"container/#capabilities","title":"Capabilities","text":"<p>An unprivileged container works for almost all use-cases, but there are occasions where they are too restricted and users start looking for the <code>privileged</code> flag.  Capabilities offers a middle ground.</p> <p>For example, a system container from which <code>ping</code> does not work:</p> <pre><code>admin@example:/config/container/system/&gt; edit capabilities\nadmin@example:/config/container/system/capabilities/&gt; set add net_raw\nadmin@example:/config/container/system/capabilities/&gt; end\nadmin@infix-00-00-00:/config/container/system/&gt; show\n...\ncapabilities {\n  add net_raw;\n}\n...\n</code></pre> <p>Infix supports a subset of all capabilities that are relevant for containers.  Please note, that this is an advanced topic that require time and analysis of your container application to figure out which capabilities you need.</p>"},{"location":"container/#networking-and-containers","title":"Networking and Containers","text":"<p>By default, unlike other systems, persistent<sup>2</sup> containers have no networking enabled.  All network access has to be set up explicitly. Currently two types of of container networks are supported:</p> <ul> <li><code>host</code>: an managed host interface, e.g., one end of a VETH pair,    or even a physical interface</li> <li><code>bridge</code>: an IP masquerading bridge</li> </ul> <p>In the former the interface is delegated to (moved into) the container, while in the latter a VETH pair is automatically created by Podman and one end delegated to the container, while the other end is assigned to the bridge (see the next section).</p> <p>Tip</p> <p>For more information on VETH pairs, see the Networking Guide.</p>"},{"location":"container/#container-bridge","title":"Container Bridge","text":"<p>A container bridge is what most container setups use and users want.</p> <p></p> <p>The difference from a regular bridge is that the container runtime fully manages them -- connecting containers with automatically created VETH pairs (look at the bridge port names) and setting up firewall rules between the host and other containers, as well as managing port forwarding.  This transparent background management is what makes container use seem to be so simple.</p> <p>All interface configuration is done in configure context.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config&gt; edit interface docker0\nadmin@example:/config/interface/docker0/&gt; set container-network\nadmin@example:/config/interface/docker0/&gt; leave\n</code></pre> <p>There is more to this story.  When using the CLI, and sticking to common interface nomenclature, Infix helps you with some of the boring stuff. E.g., creating a new interface with a name like <code>brN</code> or <code>dockerN</code> automatically infers the interface types, which you would otherwise have to set manually:</p> <pre><code>admin@example:/config/interface/docker0/&gt; set type bridge\nadmin@example:/config/interface/docker0/&gt; set container-network type bridge\n</code></pre> <p>Important</p> <p>When configuring the system via an API such as NETCONF or RESTCONF, no settings are inferred.  Instead it is up to the caller to fully define the desired setup.  This makes the CLI very useful for first setup and then extracting the resulting XML from the shell using the <code>cfg -X</code> command.</p> <p>We have to declare the interface as a container network, ensuring the interface cannot be used by the system for any other purpose.  E.g., a container <code>host</code> interface is supposed to be used by a container, by declaring it as such we can guarantee that it would never accidentally be added as a bridge or lag port.  Hence, to move an interface currently set as a <code>bridge-port</code> it must be removed from the bridge before being given to a container.</p> <p>The default subnet for a container <code>bridge</code> is 172.17.0.0/16, the bridge takes the <code>.1</code> address and hand out the rest of the range to containers in a round-robin like fashion.  A container with this <code>network</code> get an automatically created VETH pair connection to the bridge and a lot of other networking parameters (DNS, default route) are set up.</p> <p>Some of the defaults of a container <code>bridge</code> can be changed, e.g., instead of <code>set container-network type bridge</code>, above, do:</p> <pre><code>admin@example:/config/interface/docker0/&gt; edit container-network\nadmin@example:/config/interface/docker0/container-network/&gt; set type bridge\nadmin@example:/config/interface/docker0/container-network/&gt; edit subnet 192.168.0.0/16\nadmin@example:/config/interface/docker0/container-network/subnet/192.168.0.0/16/&gt; set gateway 192.168.255.254\nadmin@example:/config/interface/docker0/container-network/subnet/192.168.0.0/16/&gt; end\nadmin@example:/config/interface/docker0/container-network/&gt; edit route 10.0.10.0/24\nadmin@example:/config/interface/docker0/container-network/route/10.0.10.0/24/&gt; set gateway 192.168.10.254\nadmin@example:/config/interface/docker0/container-network/route/10.0.10.0/24/&gt; end\nadmin@example:/config/interface/docker0/container-network/&gt; end\nadmin@example:/config/interface/docker0/&gt; leave\n</code></pre> <p>Other network settings, like DNS and domain, use built-in defaults, but can be overridden from each container.  Other common settings per container is the IP address and name of the network interface inside the container.  The default, after each stop/start cycle, or reboot of the host, is to name the interfaces <code>eth0</code>, <code>eth1</code>, in the order they are given in the <code>network</code> list, and to give the container the next address in a <code>bridge</code>.  Below an example of a system container calls <code>set network interface docker0</code>, here we show how to set options for that network:</p> <pre><code>admin@example:/config/container/ntpd/&gt; edit network interface docker0\nadmin@example:/config/container/ntpd/network/interface/docker0/&gt;\nadmin@example:/config/container/ntpd/network/interface/docker0/&gt; set option\n&lt;string&gt;  Options for masquerading container bridges.\nadmin@example:/config/container/ntpd/network/interface/docker0/&gt; help option\nNAME\n        option &lt;string&gt;\n\nDESCRIPTION\n        Options for masquerading container bridges.\n\n        Example: ip=1.2.3.4            -- request a specific IP (IPv4 or IPv6)\n                 mac=00:01:02:c0:ff:ee -- set fixed MAC address in container\n                 interface_name=foo0   -- set interface name inside container\n\nadmin@example:/config/container/ntpd/network/interface/docker0/&gt; set option ip=172.17.0.2\nadmin@example:/config/container/ntpd/network/interface/docker0/&gt; set option interface_name=wan\nadmin@example:/config/container/ntpd/network/interface/docker0/&gt; leave\n</code></pre>"},{"location":"container/#container-host-interface","title":"Container Host Interface","text":"<p>Another common use-case is to move network interfaces into the network namespace of a container<sup>1</sup>.  This of course works with plain Ethernet interfaces as well, but here we will use one end of a VETH pair as an example.</p> <p>The network <code>option</code> setting is available also for this case, but only the <code>interface_name=foo0</code> option works.  Which is still very useful.  To set:</p> <ul> <li>IP address, use IPv4/IPv6 settings in the interface settings</li> <li>MAC address, to use the <code>custom-phys-address</code> in the interface settings</li> </ul> <p>For an example of both, see the next section.</p>"},{"location":"container/#routed-setup","title":"Routed Setup","text":"<p>In this routed setup we reserve 192.168.0.0/24 for the network between the host and the <code>ntpd</code> container.</p> <p></p> <p>Configuration is a straight-forward VETH pair setup where we name the container-end of pair <code>ntpd</code>.  This is just a convenience for us when reading the configuration later.  The real action happens on the last line where we declare the <code>ntpd</code> end as a container network interface:</p> <pre><code>admin@example:/config/&gt; edit interface veth0\nadmin@example:/config/interface/veth0/&gt; set veth peer ntpd\nadmin@example:/config/interface/veth0/&gt; set ipv4 address 192.168.0.1 prefix-length 24\nadmin@example:/config/interface/veth0/&gt; end\nadmin@example:/config/&gt; edit interface ntpd\nadmin@example:/config/interface/ntpd/&gt; set ipv4 address 192.168.0.2 prefix-length 24\nadmin@example:/config/interface/ntpd/&gt; set custom-phys-address static 00:c0:ff:ee:00:01\nadmin@example:/config/interface/ntpd/&gt; set container-network\n</code></pre> <p>Tip</p> <p>Notice how you can also set a custom MAC address at the same time.</p> <p>Adding the interface to the container is the same as before, but since everything for host interfaces is set up in the interfaces context, we can take a bit of a shortcut.</p> <pre><code>admin@example:/config/container/ntpd/&gt; set network interface ntpd\nadmin@example:/config/container/ntpd/&gt; leave\n</code></pre> <p>Tip</p> <p>Use the <code>set network interface ntpd option interface_name=foo0</code> to set the name of the interface inside the container to <code>foo0</code>.</p> <p>The point of the routed case is that port forwarding from the container in this case is limited to a single interface, not all interfaces as is the default in the masquerading container bridge setup.</p>"},{"location":"container/#bridged-setup","title":"Bridged Setup","text":"<p>A perhaps more common case is to bridge the other end of the VETH pair with other physical ports.  In this section we show how to add a new pair to give our container two interfaces:</p> <p></p> <p>We start by adding the second VETH pair:</p> <pre><code>admin@example:/config/&gt; edit interface veth1a\nadmin@example:/config/interface/veth1a/&gt; set veth peer veth1\nadmin@example:/config/interface/veth1a/&gt; set ipv4 address 192.168.1.2 prefix-length 24\n</code></pre> <p>Note</p> <p>The LAN bridge (br1) in this example has IP address 192.168.1.1.</p> <p>When a container has multiple host interfaces it can often be useful to have a default route installed.  This can be added from the host with a <code>0.0.0.0/0</code> route on one of the interfaces:</p> <pre><code>admin@example:/config/interface/veth1a/&gt; set container-network route 0.0.0.0/0 gateway 192.168.1.1\nadmin@example:/config/interface/veth1a/&gt; show\ntype veth;\ncontainer-network {\n  type host;\n  route 0.0.0.0/0 {\n    gateway 192.168.1.1;\n  }\n}\nveth {\n  peer veth1;\n}\nadmin@example:/config/interface/veth1a/&gt; end\nadmin@example:/config/&gt; set interface veth1 bridge-port bridge br1\n</code></pre> <p>Please note, container network routes require the base interface also have a static IP address set.  Setting only the route, but no address, means the route is skipped.</p>"},{"location":"container/#host-networking","title":"Host Networking","text":"<p>The third use-case is host networking, this is where a container share the network namespace of the host.  An example here could be a nftables or ntpd container -- single applications which add core functionality to the host operating system.</p> <p>The host networking setup cannot be combined with any other network.</p> <p>For an example, see below.</p>"},{"location":"container/#mounts-and-volumes","title":"Mounts and Volumes","text":"<p>It is possible to mount files, directories, and even files matching a glob, into a container.  This gives precise control over the container's file system:</p> <pre><code>admin@example:/config/container/system/&gt; edit mount leds\nadmin@example:/config/container/system/mount/leds&gt; set source /sys/class/leds\nadmin@example:/config/container/system/mount/leds&gt; set target /sys/class/leds\nadmin@example:/config/container/system/mount/leds&gt; end\nadmin@example:/config/container/system/&gt;\n</code></pre> <p>Any type of file can be bind mounted into the container, just watch out for permissions though.  In the example above, <code>/sys/class/leds</code> is not writable from a container unless it runs in privileged mode.  For plain configuration files you get more freedom, and your container can rely on, e.g., inotify events to trigger reloading its services when you change the file on the host.</p> <p>So it depends on the container, and indeed your overall setup, what to use.  An intriguing option is Content Mounts, which when changed also trigger a container restart.</p> <p>Other times volumes are a better fit.  A volume is an automatically created read-writable entity that follows the life of your container.</p> <pre><code>admin@example:/config/container/ntpd/&gt; set volume varlib target /var/lib\n</code></pre> <p>Volumes are persistent across both reboots and upgrades of the base image.  They are created by Podman when the container first starts up, unlike a regular bind mount it synchronizes with the contents of the underlying container image's path at first use.  I.e., \"bind-mount, if empty: then rsync\".</p> <p>Note</p> <p>Infix support named volumes (only), and it is not possible to share a volume between containers.  All the tricks possible with volumes may be added in a later release.</p>"},{"location":"container/#content-mounts","title":"Content Mounts","text":"<p>Content mounts are a special type of file mount where the file contents is stored with the container configuration.  This can be very useful when deploying similar systems at multiple sites.  When the host loads its <code>startup-config</code> (or even <code>factory-config</code>) a temporary file is created using the decoded base64 data from the <code>content</code> node.</p> <pre><code>admin@example:/config/container/ntpd/&gt; edit mount ntpd.conf\nadmin@example:/config/container/ntpd/mount/ntpd.conf&gt; text-editor content\n... interactive editor starts up ...\nadmin@example:/config/container/ntpd/mount/ntpd.conf&gt; set target /etc/ntpd.conf\nadmin@example:/config/container/ntpd/mount/ntpd.conf&gt; end\nadmin@example:/config/container/ntpd/&gt;\n</code></pre> <p>The editor is a small Emacs clone called Mg, see the built-in help text, or press Ctrl-x Ctrl-c to exit and save.  When the editor exits the contents are base64 encoded and stored in the candidate datastore.</p> <p>Note</p> <p>Since these files are always recreated when the host is restarted, changes made by the container are not preserved, or saved back to the host's startup-config.</p> <p>Infix has three different text editors available.  For more information, see CLI Text Editor.</p>"},{"location":"container/#example-containers","title":"Example Containers","text":""},{"location":"container/#system-container","title":"System Container","text":"<p>Let's try out what we've learned by setting up a system container, a container providing multiple services, using the <code>docker0</code> interface we created previously:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config&gt; edit container system\nadmin@example:/config/container/system/&gt; set image ghcr.io/kernelkit/curios:edge\nadmin@example:/config/container/system/&gt; set network interface docker0\nadmin@example:/config/container/system/&gt; set publish 222:22\nadmin@example:/config/container/system/&gt; leave\n</code></pre> <p>Note</p> <p>Ensure you have a network connection to the registry.  If the image cannot be pulled, creation of the container will be put in a queue and be retried every time there is a change in the routing table, e.g., default route is added, and every 60 seconds.</p> <p>Provided the image is downloaded successfully, a new <code>system</code> container now runs behind the docker0 interface, forwarding container port 22 to port 222 on all of the host's interfaces.  (See <code>help publish</code> in the container configuration context for the full syntax.)</p> <p>Available containers can be accessed from admin-exec:</p> <pre><code>admin@example:/&gt; show container\nCONTAINER ID  IMAGE                          COMMAND     CREATED       STATUS       PORTS                 NAMES\n439af2917b44  ghcr.io/kernelkit/curios:edge              41 hours ago  Up 16 hours  0.0.0.0:222-&gt;222/tcp  system\n</code></pre> <p>This is a system container, so you can \"attach\" to it by starting a shell (or logging in with SSH):</p> <pre><code>admin@example:/&gt; container shell system\nroot@439af2917b44:/#\n</code></pre> <p>Notice how the hostname inside the container changes.  By default the container ID (hash) is used, but this can be easily changed:</p> <pre><code>root@439af2917b44:/# exit\nadmin@example:/&gt; configure\nadmin@example:/config/&gt; edit container system\nadmin@example:/config/container/system/&gt; set hostname sys101\nadmin@example:/config/container/system/&gt; leave\nadmin@example:/&gt; container shell system\nroot@sys101:/#\n</code></pre> <p>In fact, the container <code>hostname</code> setting supports the same format specifiers as the host's <code>hostname</code> setting:</p> <ul> <li><code>%i</code>: OS ID, from <code>/etc/os-release</code>, from Menuconfig branding</li> <li><code>%h</code>: Default hostname, from <code>/etc/os-release</code>, from branding</li> <li><code>%m</code>: NIC specific part of base MAC, e.g., to <code>c0-ff-ee</code></li> <li><code>%%</code>: Literal %</li> </ul> <p>The most useful combination is probably <code>\"container-name-%m\"</code>, which in this example give the container hostname <code>container-name-c0-ff-ee</code>.</p>"},{"location":"container/#application-container-nftables","title":"Application Container: nftables","text":"<p>Infix currently does not have a native firewall configuration, and even when it does it will never expose the full capabilities of <code>nftables</code>. For advanced setups, the following is an interesting alternative.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config&gt; edit container nftables\nadmin@example:/config/container/nftables/&gt; set image ghcr.io/kernelkit/curios-nftables:edge\nadmin@example:/config/container/nftables/&gt; set network host\nadmin@example:/config/container/nftables/&gt; set privileged\nadmin@example:/config/container/nftables/&gt; edit mount nftables.conf\nadmin@example:/config/container/nftables/mount/nftables.conf/&gt; set target /etc/nftables.conf\nadmin@example:/config/container/nftables/mount/nftables.conf/&gt; text-editor content\n... interactive editor starts up where you can paste your rules ...\nadmin@example:/config/container/nftables/mount/nftables.conf/&gt; leave\n</code></pre> <p>Notice how we <code>set network host</code>, so the container can see and act on all the host's interfaces, and that we also have to run the container in privileged mode.</p>"},{"location":"container/#application-container-ntpd","title":"Application Container: ntpd","text":"<p>The default NTP server/client in Infix is Chrony, a fully working and capable workhorse for most use-cases.  However, it does not support a feature like multicasting, for that you need ISC ntpd.</p> <p>As we did with <code>nftables</code>, previously, we can use host networking and set up a read-only config file that is bind-mounted into the container's file system and store in the host's <code>startup-config</code>.  However, <code>ntpd</code> also saves clock drift information in <code>/var/lib/ntpd</code>, so we will also use volumes in this example.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config&gt; edit container ntpd\nadmin@example:/config/container/ntpd/&gt; set image ghcr.io/kernelkit/curios-ntpd:edge\nadmin@example:/config/container/ntpd/&gt; set network interface ntpd    # From veth0 above\nadmin@example:/config/container/ntpd/&gt; edit mount ntp.conf\nadmin@example:/config/container/ntpd/mount/ntp.conf/&gt; set target /etc/ntp.conf\nadmin@example:/config/container/ntpd/mount/ntp.conf/&gt; text-editor content\n... interactive editor starts up where you can paste your rules ...\nadmin@example:/config/container/ntpd/mount/ntp.conf/&gt; end\nadmin@example:/config/container/ntpd/&gt; edit volume varlib\nadmin@example:/config/container/ntpd/volume/varlib/&gt; set target /var/lib\nadmin@example:/config/container/ntpd/volume/varlib/&gt; leave\nadmin@example:/&gt; copy running-config startup-config\n</code></pre> <p>The <code>ntp.conf</code> file is stored in the host's <code>startup-config</code> and any state data in the container's <code>/var/lib</code> is retained between reboots and across image upgrades.</p>"},{"location":"container/#advanced","title":"Advanced","text":"<p>This section covers advanced, and sometimes dangerous, topics.  Please read any warnings and always consider the security aspects.</p>"},{"location":"container/#running-host-commands-from-container","title":"Running Host Commands From Container","text":"<p>SSH login with keys is very handy, both remote scripting friendly and secure, but it does require a few extra configuration steps.  The way to set it up is covered in part in SSH Authorized Key.</p> <p>Another insecure approach is to access the host system directly, bypassing the namespaces that make up the boundary between host and container.</p> <p>Caution</p> <p>Please note, this completely demolishes the isolation barrier between container and host operating system.  It is only suitable in situations where the container serves more as a unit of distribution rather than as a separate component of the system.  Strongly recommended to use this only in trusted setups!  Consider also limiting the time frame in which this is active!</p> <p>First, enable Privileged mode, this unlocks the door and allows the container to manage resources on the host system.  An example is the <code>nftables</code> container mentioned previously.</p> <pre><code>admin@example:/config/container/system/&gt; set privileged\n</code></pre> <p>Second, mount the host's <code>/proc/1</code> directory to somewhere inside your container.  Here we pick <code>/1</code>:</p> <pre><code>admin@example:/config/container/system/&gt; edit mount host\nadmin@example:/config/container/system/mount/host/&gt; set source /proc/1\nadmin@example:/config/container/system/mount/host/&gt; set target /1\nadmin@example:/config/container/system/mount/host/&gt; leave\n</code></pre> <p>Third, from inside the container, use the host's PID 1 namespaces with the <code>nsenter</code><sup>3</sup> command to slide through the container's walls.  Here we show two example calls to <code>hostname</code>, first the container's own name and then asking what the hostname is on the host:</p> <pre><code>root@sys101:/# hostname\nsys101\nroot@sys101:/# nsenter -m/1/ns/mnt -u/1/ns/uts -i/1/ns/ipc -n/1/ns/net hostname\nexample\n</code></pre> <p>One use-case for this method is when extending Infix with a management container that connects to other systems.  For some tips on how to control an Infix system this way, see Scripting Infix.</p>"},{"location":"container/#container-requirements","title":"Container Requirements","text":"<p>In addition to general best practices for container images, there are a few more things to consider when targeting embedded systems:</p> <ul> <li>Ensure the image targets the CPU architecture of the target system,    learn more about Multi-platform Builds</li> <li>Follow best practices for naming and tagging, e.g., <code>:latest</code> vs <code>:1.0</code></li> <li>Follow OCI recommendations and layout,    learn more about OCI and Docker Exporters</li> </ul> <p>If the Docker documentation is not enough, there are plenty of guides online with examples on how to create your own container image.  For the more advanced, please see the next section.</p>"},{"location":"container/#advanced-users","title":"Advanced Users","text":"<p>Most people prefer their system containers small, often based on Alpine Linux, or similar, with only a few small applications, including their own, and an SSH server perhaps.  For some developers, even this is too big, so they roll their own from source.  This section is for you.</p> <p>Depending on your needs, here is a checklist:</p> <ul> <li>you need something that can forward signals, e.g.,</li> <li>tini</li> <li>Bash only, or</li> <li>BusyBox init, a classic most embedded developers know, but read on ...</li> <li>a system container only need the bare necessities of a system bringup</li> <li>E.g., BusyBox's init, but not everything</li> <li>Some of the networking is set up by Podman and CNI for you, but      you may want to run a DHCP client?</li> <li>Do not rename interfaces inside the container, use the dedicated      <code>interface_name</code> option in the configuration instead</li> <li>Remember, Podman provides a <code>tmpfs</code> for all critical system paths:      <code>/dev</code>, <code>/dev/shm</code>, <code>/run</code>, <code>/tmp</code>, and <code>/var/tmp</code>, so you don't      need to clean or set up any of these mount points</li> </ul> <p>Examples using <code>tini</code> and BusyBox init are available from the KernelKit curiOS project.  It is a small Buildroot based container image builder that generates OCI compatible image tarballs without any tools from Docker or Podman -- ready-made images exist for testing on both AMD64 and ARM64 targets, as well as <code>docker pull</code> images and and OCI tarballs with SHA256 checksums for integrity checking.</p> <p>Finally, if you build your own version of Infix, and embed OCI tarballs in the system image, then see the tip at the end of Upgrading a Container Image (above).</p> <ol> <li> <p>Something which the container bridge network type does behind the scenes with one end of an automatically created VETH pair.\u00a0\u21a9</p> </li> <li> <p>this does not apply to the admin-exec command <code>container run</code>. This command is intended to be used for testing and evaluating container images.  Such containers are given a private network behind an IP masquerading bridge.\u00a0\u21a9</p> </li> <li> <p>The <code>nsenter</code> program is available from either the util-linux package in Debian/Ubuntu/Mint, or in BusyBox.  Note, however, it may not be enabled by default in BusyBox.\u00a0\u21a9</p> </li> </ol>"},{"location":"developers-guide/","title":"Developer's Guide","text":"<p>Please note, by default the <code>root</code> account is disabled in Infix NETCONF builds.  Meaning, the only way to access the system is with the <code>admin</code> account, which is created based on credentials found in the VPD area -- for Qemu devices this is emulated using <code>qemu_fw_cfg</code>.</p> <p>For developers this can be quite frustrating to be blocked from logging in to debug the system.  So we recommend enabling the <code>root</code> account in the Buildroot <code>make menuconfig</code> system.</p> <pre><code>make menuconfig\n     -&gt; System configuration\n        -&gt; [*]Enable root login with password\n</code></pre> <p>Important</p> <p>Please see the Contributing section, below, for details on how to fork and clone when contributing to Infix.</p>"},{"location":"developers-guide/#cloning","title":"Cloning","text":"<p>When pre-built releases are not enough, for instance when you want to add or modify some Open Source components, you can clone the Infix tree to your PC:</p> <pre><code>$ mkdir ~/Projects; cd ~/Projects\n$ git clone https://github.com/kernelkit/infix.git\n..\n$ cd infix/\n$ git submodule update --init\n..\n</code></pre>"},{"location":"developers-guide/#customer-builds","title":"Customer Builds","text":"<p>Customer builds add product specific device trees, more OSS packages, e.g., Frr and podman, and sometimes integrates proprietary software. What's important to remember, however, is that they are all made by setting up Infix as a GIT submodule, similar to how Infix set up a GIT submodule for Buildroot.</p> <p>So, in addition to using the customer's specific defconfig(s), one must also make sure to update all submodules, otherwise you will likely end up with a broken build.</p> <pre><code>$ ...\n$ git submodule update --init --recursive\n                              ~~~~~~~~~~~\n</code></pre> <p>Other caveats should be documented in the customer specific trees.</p>"},{"location":"developers-guide/#building","title":"Building","text":"<p>Tip</p> <p>For more details, see the Getting Started and System Requirements sections of the excellent Buildroot manual.</p> <p>Buildroot is almost stand-alone, it needs a few locally installed tools to bootstrap itself.  The most common ones are usually part of the base install of the OS, but specific ones for building need the following. The instructions here are for Debian/Ubuntu based systems (YMMV):</p> <pre><code>$ sudo apt install bc binutils build-essential bzip2 cpio \\\n                   diffutils file findutils git gzip      \\\n                   libncurses-dev libssl-dev perl patch   \\\n                   python3 rsync sed tar unzip wget       \\\n                   autopoint bison flex autoconf automake \\\n                   mtools\n</code></pre> <p>To build an Infix image; select the target and then make:</p> <pre><code>make x86_64_defconfig\nmake\n</code></pre> <p>Online help is available:</p> <pre><code>make help\n</code></pre> <p>To see available defconfigs for supported targets, use:</p> <pre><code>make list-defconfigs\n</code></pre>"},{"location":"developers-guide/#test","title":"Test","text":"<p>Working with the regression test framework, Infamy, a few more tools and services are required on your system:</p> <pre><code>$ sudo apt install jq graphviz qemu-system-x86 qemu-system-arm \\\n                   ethtool gdb-multiarch tcpdump tshark\n..\n</code></pre> <p>To be able to build the test specification you also need:</p> <pre><code>$ sudo apt-get install python3-graphviz ruby-asciidoctor-pdf\n..\n</code></pre>"},{"location":"developers-guide/#documentation","title":"Documentation","text":"<p>The documentation is written in Markdown, with GitHub extensions, and published using MkDocs, material theme.  This means some features require MkDocs hinting which may not render fully when previewing on GitHub -- this is OK.</p> <p>MkDocs is packaged and available to install via <code>apt</code>, but not all of the plugins and extensions we rely on are available, so instead we do recommend using <code>pipx</code> to install the necessary tooling:</p> <pre><code>$ sudo apt install pipx\n$ pipx install mkdocs\n$ pipx inject mkdocs mkdocs-material pymdown-extensions mkdocs-callouts mike mkdocs-to-pdf\n</code></pre> <p>The last two packages, <code>mike</code> and <code>mkdocs-to-pdf</code>, are used for online versioning and PDF generation by GitHub Actions, but since they are in the <code>mkdocs.yml</code> file, everyone who wants to preview the documentation have to install all the tooling.</p> <p>Preview with:</p> <pre><code>$ cd ~/src/infix/\n$ mkdocs serve\n</code></pre>"},{"location":"developers-guide/#development","title":"Development","text":"<p>Developing with Infix is the same as developing with Buildroot. When working with a package, be it locally kept sources, or when using <code>local.mk</code>, you only want to rebuild the parts you have modified:</p> <pre><code>make foo-rebuild\n</code></pre> <p>or</p> <pre><code>make foo-reconfigure\n</code></pre> <p>or, as a last resort when nothing seems to bite:</p> <pre><code>make foo-dirclean foo-rebuild\n</code></pre> <p>As shown here, you can combine multiple build targets and steps in one go, like this:</p> <pre><code>make foo-rebuild bar-rebuild all run\n</code></pre> <p>This rebuilds (and installs) <code>foo</code> and <code>bar</code>, the <code>all</code> target calls on Buildroot to finalize the target filesystem and generate the images. The final <code>run</code> argument is explained below.</p>"},{"location":"developers-guide/#yang-model","title":"YANG Model","text":"<p>When making changes to the <code>confd</code> and <code>statd</code> services, you will often need to update the YANG models.  If you are adding a new YANG module, it's best to follow the structure of an existing one.  However, before making any changes, always discuss them with the Infix core team. This helps avoid issues later in development and makes pull request reviews smoother.</p>"},{"location":"developers-guide/#confd","title":"<code>confd</code>","text":"<p>The Infix <code>src/confd/</code> is the engine of the system.  Currently it is a plugin for <code>systemd-plugind</code> and contains XPath subscriptions to all the supported YANG models.</p> <p>There are essentially two ways of adding support for a new YANG model:</p> <ul> <li>The sysrepo way, or</li> <li>The Infix way, using libsrx (the <code>lydx_*()</code> functions)</li> </ul> <p>The former is well documented in sysrepo, and the latter is best taught by example, e.g., <code>src/confd/src/infix-dhcp.c</code>.  Essentially libsrx is a way of traversing the libyang tree instead of fetching changes by XPath.</p> <p>When working with <code>confd</code> you likely want to enable full debug mode, this is how you do it:</p> <ol> <li>Open the file <code>package/confd/confd.conf</code></li> <li>Uncomment the first line <code>set DEBUG=1</code></li> <li>Change the following line to add <code>-v3</code> at the end<pre><code>[S12345] sysrepo-plugind -f -p /run/confd.pid -n -- Configuration daemon\n</code></pre> </li> </ol> <p>to:</p> <pre><code>[S12345] sysrepo-plugind -f -p /run/confd.pid -n -v3 -- Configuration daemon\n</code></pre> <p>Now you can rebuild <code>confd</code>, just as described above, and restart Infix:</p> <pre><code>make confd-rebuild all run\n</code></pre>"},{"location":"developers-guide/#statd","title":"<code>statd</code>","text":"<p>The Infix status daemon, <code>src/statd</code>, is responsible for populating the sysrepo <code>operational</code> datastore. Like <code>confd</code>, it uses XPath subscriptions, but unlike <code>confd</code>, it relies entirely on <code>yanger</code>, a Python script that gathers data from local linux services and feeds it into sysrepo.</p> <p>To apply changes, rebuild the image:</p> <pre><code>make python-statd-rebuild statd-rebuild all\n</code></pre> <p>Rebuilding the image and testing on target for every change during development process can be tedious. Instead, <code>yanger</code> allows remote execution, running the script directly on the host system (test container):</p> <pre><code>infamy0:test # ../src/statd/python/yanger/yanger -x \"../utils/ixll -A ssh d3a\" ieee802-dot1ab-lldp\n</code></pre> <p><code>ixll</code> is a utility script that lets you run network commands using an interface name instead of a hostname. It makes operations like <code>ssh</code>, <code>scp</code>, and network discovery easier.</p> <p>Normally, <code>yanger</code> runs commands locally to retrieve data (e.g., <code>lldpcli</code> when handling <code>ieee802-dot1ab-lldp</code>). However, when executed with <code>-x \"../utils/ixll -A ssh d3a\"</code> it redirects these commands to a remote system connected to the local <code>d3a</code> interface via SSH. This setup is used for running <code>yanger</code> in an interactive test environment. The yanger script runs on the <code>host</code> system, but key commands are executed on the <code>target</code> system.</p> <p>For debugging or testing, you can capture system command output and replay it later without needing a live system.</p> <p>To capture:</p> <pre><code>infamy0:test # ../src/statd/python/yanger/yanger -c /tmp/capture ieee802-dot1ab-lldp\n</code></pre> <p>To replay:</p> <pre><code>infamy0:test # ../src/statd/python/yanger/yanger -r /tmp/capture ieee802-dot1ab-lldp\n</code></pre> <p>This is especially useful when working in isolated environments or debugging issues without direct access to the DUT.</p>"},{"location":"developers-guide/#upgrading-packages","title":"Upgrading Packages","text":""},{"location":"developers-guide/#buildroot","title":"Buildroot","text":"<p>The Kernelkit team maintains an internal fork of Buildroot, with branches following the naming scheme <code>YYYY.MM.patch-kkit</code> e.g. <code>2025.02.1-kkit</code>, which means a new branch should be created whenever Buildroot is updated. These branches should contain only changes to existing packages (but no new patches), modifications to Buildroot itself or upstream backports.</p> <p>The team tracks the latest Buildroot LTS (Long-Term Support) release and updates.  The impact of minor LTS release upgrades is expected to have a very low impact and should be done as soon there is a patch release of a Buildroot LTS available.</p> <p>Depending on your setup, follow the appropriate steps below.</p>"},{"location":"developers-guide/#repo-locally-cloned-already","title":"Repo locally cloned already","text":"<ol> <li> <p>Navigate to the Buildroot directory</p> <pre><code>cd buildroot/\n</code></pre> </li> <li> <p>Pull the latest changes from KernelKit</p> <pre><code>git pull\n</code></pre> </li> <li> <p>Fetch the latest tags from upstream</p> <pre><code>git fetch upstream --tags\n</code></pre> </li> </ol>"},{"location":"developers-guide/#no-local-repo-yet","title":"No local repo yet","text":"<ol> <li> <p>Clone the Kernelkit Buildroot repository</p> <pre><code>git clone git@github.com:kernelkit/buildroot.git\n</code></pre> </li> <li> <p>Add the upstream remote</p> <pre><code>git remote add upstream https://gitlab.com/buildroot.org/buildroot.git\n</code></pre> </li> <li> <p>Checkout old KernelKit branch</p> <pre><code>git checkout 2025.02.1-kkit\n</code></pre> </li> </ol> <p>Note</p> <p>Below, it is not allowed to rebase the branch when bumped in Infix.</p>"},{"location":"developers-guide/#continue-here","title":"Continue Here","text":"<ol> <li> <p>Create a new branch based on the previous KernelKit Buildroot    release (e.g.  <code>2025.02.1-kkit</code>) and name it according to the naming    scheme (e.g. <code>2025.02.2-kkit</code>)</p> <pre><code>git checkout -b 2025.02.2-kkit\n</code></pre> </li> <li> <p>Rebase the new branch onto the corresponding upstream release</p> <pre><code>git rebase 2025.02.2\n</code></pre> </li> <li> <p>Push the new branch and tags</p> <pre><code>git push origin 2025.02.2-kkit --tags\n</code></pre> </li> <li> <p>In Infix, checkout new branch of Buildroot</p> <pre><code>cd buildroot\ngit fetch\ngit checkout 2025.02.2-kkit\n</code></pre> </li> <li> <p>Commit and push the changes.  Remember to update the ChangeLog!</p> </li> <li> <p>Create a pull request.</p> </li> </ol> <p>Note</p> <p>Remember to set the pull request label to <code>ci:main</code> to ensure full CI coverage.</p>"},{"location":"developers-guide/#linux-kernel","title":"Linux kernel","text":"<p>The KernelKit team maintains an internal fork of Linux kernel, with branches following the naming scheme <code>kkit-linux-[version].y</code>, e.g. <code>kkit-6.12.y</code>, which means a new branch should be created whenever the major kernel version is updated. This branch should contain all kernel patches used by Infix.</p> <p>The team tracks the latest Linux kernel LTS (Long-Term Support) release and updates.  The upgrade of LTS minor releases is expected to have low impact and should be done as soon as a patch release of the LTS Linux kernel is available.</p>"},{"location":"developers-guide/#repo-locally-cloned-already_1","title":"Repo locally cloned already","text":"<ol> <li> <p>Navigate to the Linux kernel directory</p> <pre><code>cd linux\n</code></pre> </li> <li> <p>Get latest changes from KernelKit</p> <pre><code>git pull\n</code></pre> </li> <li> <p>Fetch the latest tags from upstream</p> <pre><code>git fetch upstream --tags\n</code></pre> </li> </ol>"},{"location":"developers-guide/#no-local-repo-yet_1","title":"No local repo yet","text":"<ol> <li> <p>Clone the KernelKit Linux kernel repository</p> <pre><code>git clone git@github.com:kernelkit/linux.git\n</code></pre> </li> <li> <p>Add the upstream remote</p> <pre><code>git remote add upstream git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git\n</code></pre> </li> <li> <p>Checkout correct kernel branch</p> <pre><code>git checkout kkit-linux-6.12.y\n</code></pre> </li> </ol>"},{"location":"developers-guide/#continue-here_1","title":"Continue Here","text":"<ol> <li> <p>Rebase on the upstream release</p> <pre><code>git rebase v6.12.29\n</code></pre> </li> <li> <p>Push changes and the tags</p> <pre><code>git push -f origin kkit-linux-6.12.y --tags\n</code></pre> </li> </ol> <p>Move to your Infix source tree</p> <p>Note</p> <p>See help of <code>kernel-refresh.sh</code> script for more information.</p> <ol> <li> <p>Generate patches</p> <pre><code>make x86_64_defconfig\ncd output\n../utils/kernel-refresh.sh -k /path/to/linux -o 6.12.28 -t v6.12.29\n</code></pre> </li> <li> <p>Commit and push the changes.  Remember to update the ChangeLog</p> </li> <li>Create a pull request</li> </ol> <p>Note</p> <p>Remember to set the pull request label to <code>ci:main</code> to ensure full CI coverage.</p>"},{"location":"developers-guide/#testing","title":"Testing","text":"<p>Manual testing can be done using Qemu by calling make run, see also Infix in Virtual Environments, or on a physical device by upgrading to the latest build or \"netbooting\" and running the image from RAM.  The latter is how most board porting work is done -- much quicker change-load-test cycles.</p> <p>The Infix automated test suite is built around Qemu and Qeneth, see:</p> <ul> <li>Regression Testing with Infamy</li> <li>Docker Image</li> </ul> <p>With any new feature added to Infix, it is essential to include relevant test case(s).  See the Test Development section for guidance on adding test cases.</p>"},{"location":"developers-guide/#reviewing","title":"Reviewing","text":"<p>While reviewing a pull request, you might find yourself wanting to play around with a VM running that exact version.  For such occasions, gh-dl-artifact.sh is your friend in need!  It employs the GitHub CLI (gh) to locate a prebuilt image from our CI workflow, download it, and prepare a local output directory from which you can launch both <code>make run</code> instances, and run regression tests with <code>make test</code> and friends.</p> <p>For example, if you are curious about how PR 666 behaves in some particular situation, you can use <code>gh</code> to switch to that branch, from which <code>gh-dl-artifact.sh</code> can then download and prepare the corresponding image for execution with our normal tooling:</p> <pre><code>gh pr checkout 666\n./utils/gh-dl-artifact.sh\ncd x-artifact-a1b2c3d4-x86_64\nmake run\n</code></pre> <p>Note</p> <p>CI artifacts are built from a merge commit of the source and target branches.  Therefore, the version in the Infix banner will not match the SHA of the commit you have checked out.</p>"},{"location":"developers-guide/#contributing","title":"Contributing","text":"<p>Infix is built from many components, when contributing you need to set up your own fork, create a local branch for your change, push to your fork, and then use GitHub to create a Pull Reqeuest.</p> <p>For this to work as painlessly as possible for everyone involved:</p> <ol> <li>Fork Infix to your own user or organization<sup>1</sup></li> <li>Fork all the Infix submodules, e.g., <code>kernelkit/buildroot</code> to your     own user or organization as well</li> <li>Clone your fork of Infix to your laptop/workstation</li> <li>Deactivate the Actions you don't want in your fork</li> <li>Please read the Contributing Guidelines as well!</li> </ol> <pre><code>$ cd ~/Projects\n$ git clone https://github.com/YOUR_USER_NAME/infix.git\n...\n$ cd infix/\n$ git submodule update --init\n...\n</code></pre> <p>Note</p> <p>When updating/synchronizing with upstream Infix changes you may have to synchronize your forks as well.  GitHub have a <code>Sync fork</code> button in the GUI for your fork for this purpose.  A cronjob on your server of choice can do this for you with the GitHub CLI tool.</p> <ol> <li> <p>Organizations should make sure to lock the <code>main</code> (or <code>master</code>) branch of their clones to ensure members do not accidentally merge changes there.  Keeping these branches in sync with upstream Infix is highly recommended as a baseline and reference.  For integration of local changes another company-specific branch can be used instead.\u00a0\u21a9</p> </li> </ol>"},{"location":"dhcp/","title":"DHCP Server","text":"<p>The DHCPv4 server provides automatic IP address assignment and network configuration for clients.  It supports address pools, static host assignments, and customizable DHCP options.  It also serves as a DNS proxy for local subnets and can even forward queries to upstream DNS servers<sup>1</sup>.</p> <p>Note</p> <p>When using the CLI, the system automatically enables essential options like DNS servers and default gateway based on the system's network configuration.  These options can be disabled, changed or overridden, at any level: global, subnet, or per-host.</p>"},{"location":"dhcp/#basic-configuration","title":"Basic Configuration","text":"<p>The following example configures a DHCP server for subnet 192.168.2.0/24 with an address pool:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit dhcp-server\nadmin@example:/config/dhcp-server/&gt; edit subnet 192.168.2.0/24\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; set pool start-address 192.168.2.100 end-address 192.168.2.200\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; leave\n</code></pre> <p>When setting up the server from the CLI, the system automatically adds a few default DHCP options that will be sent to clients: both DNS server and default gateway will use the system address on the matching interface.</p> <pre><code>admin@example:/&gt; show running-config\n  \"infix-dhcp-server:dhcp-server\": {\n    \"subnet\": [\n      {\n        \"subnet\": \"192.168.2.0/24\",\n        \"option\": [\n          {\n            \"id\": \"dns-server\",\n            \"address\": \"auto\"\n          },\n          {\n            \"id\": \"router\",\n            \"address\": \"auto\"\n          }\n        ],\n        \"pool\": {\n          \"start-address\": \"192.168.2.100\",\n          \"end-address\": \"192.168.2.200\"\n        }\n      }\n    ]\n  }\n</code></pre> <p>Important</p> <p>Remember to set up an interface in this subnet, avoid using addresses in the DHCP pool, or reserved for static hosts.  In Class C networks the router usually has address <code>.1</code>.  Depending on the use-case, you may also want to set up routing.</p>"},{"location":"dhcp/#static-host-assignment","title":"Static Host Assignment","text":"<p>To reserve specific IP addresses for clients based on their MAC address, hostname, or client ID:</p> <pre><code>admin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; edit host 192.168.2.10\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/host/192.168.2.10/&gt; set match mac-address 00:11:22:33:44:55\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/host/192.168.2.10/&gt; set hostname printer\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/host/192.168.2.10/&gt; leave\n</code></pre> <p>Match hosts using a client identifier instead of MAC address:</p> <pre><code>admin@example:/config/dhcp-server/subnet/192.168.1.0/24/&gt; edit host 192.168.1.50\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/host/192.168.1.50/&gt; edit match\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/host/192.168.1.50/match/&gt; set client-id hex c0:ff:ee\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/host/192.168.1.50/match/&gt; leave\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/host/192.168.1.50/&gt; set lease-time infinite\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/host/192.168.1.50/&gt; leave\n</code></pre> <p>The <code>hex</code> prefix here ensures matching of client ID is done using the hexadecimal octets <code>c0:ff:ee</code>, three bytes.  Without the prefix the ASCII string \"c0:ff:ee\", eight bytes, is used.</p> <p>Note</p> <p>The DHCP server is fully RFC conformant, in the case of option 61 this means that using the <code>hex</code> prefix will require the client to set the <code>htype</code> field of the option to <code>00</code>.  See RFC 2132 for details.</p>"},{"location":"dhcp/#custom-dhcp-options","title":"Custom DHCP Options","text":"<p>Configure additional DHCP options globally, per subnet, or per host:</p> <pre><code>admin@example:/config/dhcp-server/&gt; edit subnet 192.168.2.0/24\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; edit option dns-server\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/option/dns-server/&gt; set address 8.8.8.8\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/option/dns-server/&gt; leave\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; edit option ntp-server\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/option/ntp-server/&gt; set address 192.168.2.1\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/option/ntp-server/&gt; leave\n</code></pre> <p>When configuring, e.g., <code>dns-server</code>, or <code>router</code> options with the value <code>auto</code>, the system uses the IP address from the interface matching the subnet.  For example:</p> <pre><code>admin@example:/&gt; show interfaces brief\nInterface    Status  Address\neth0         UP      192.168.1.1/24\neth1         UP      192.168.2.1/24\n\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/&gt; edit option dns-server\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/option/dns-server/&gt; set address auto\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/option/dns-server/&gt; leave\n</code></pre> <p>In this case, clients in subnet 192.168.1.0/24 will receive 192.168.1.1 as their DNS server address.</p>"},{"location":"dhcp/#multiple-subnets","title":"Multiple Subnets","text":"<p>Configure DHCP for multiple networks:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit dhcp-server\nadmin@example:/config/dhcp-server/&gt; edit subnet 192.168.1.0/24\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/&gt; set pool start-address 192.168.1.100 end-address 192.168.1.200\nadmin@example:/config/dhcp-server/subnet/192.168.1.0/24/&gt; leave\nadmin@example:/config/dhcp-server/&gt; edit subnet 192.168.2.0/24\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; set pool start-address 192.168.2.100 end-address 192.168.2.200\nadmin@example:/config/dhcp-server/subnet/192.168.2.0/24/&gt; leave\n</code></pre>"},{"location":"dhcp/#monitoring","title":"Monitoring","text":"<p>View active leases and server statistics:</p> <pre><code>admin@example:/&gt; show dhcp-server\nIP ADDRESS       MAC                HOSTNAME            CLIENT ID             EXPIRES\n192.168.2.22     00:a0:85:00:02:05                      00:c0:ff:ee           3591s\n192.168.1.11     00:a0:85:00:04:06  foo                 01:00:a0:85:00:04:06  3591s\n\nadmin@example:/&gt; show dhcp-server statistics\nDHCP offers sent                : 6\nDHCP ACK messages sent          : 5\nDHCP NAK messages sent          : 0\nDHCP decline messages received  : 0\nDHCP discover messages received : 6\nDHCP request messages received  : 5\nDHCP release messages received  : 6\nDHCP inform messages received   : 6\n</code></pre> <ol> <li> <p>This requires the system DNS resolver to be configured.\u00a0\u21a9</p> </li> </ol>"},{"location":"discovery/","title":"Device Discovery","text":"<p>Infix advertises itself via the mDNS-SD and LLDP discovery protocols.  mDNS-SD has good client support in Windows, macOS and on Linux systems.  More on these protocols later.</p> <p>An even simpler method is available when directly attached to an Infix device:</p> <pre><code>.----.       Ethernet      .--------.\n| PC +---------------------+ Device |\n'----' if1              e1 '--------'\n</code></pre> <p>With IPv6 you can ping the all-hosts address (ff02::1), the device's link-local IPv6 address is then seen in the response.  In the following example, the PC here uses tap0 as if1, Infix responds with address fe80::ff:fec0:ffed.</p> <pre><code>linux-pc:# ping -6 -L -c 3 ff02::1%tap0\nPING ff02::1%tap0(ff02::1%tap0) 56 data bytes\n64 bytes from fe80::ff:fec0:ffed%tap0: icmp_seq=1 ttl=64 time=0.558 ms\n64 bytes from fe80::ff:fec0:ffed%tap0: icmp_seq=2 ttl=64 time=0.419 ms\n64 bytes from fe80::ff:fec0:ffed%tap0: icmp_seq=3 ttl=64 time=0.389 ms\n\n--- ff02::1%tap0 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2043ms\nrtt min/avg/max/mdev = 0.389/0.455/0.558/0.073 ms\nlinux-pc:# \n</code></pre> <p>Tip</p> <p>The <code>-L</code> option ignores local responses from the PC.</p> <p>This address can then be used to connect to the device, e.g., using SSH. Notice the syntax <code>username@address%interface</code>:</p> <pre><code>linux-pc:# ssh admin@fe80::ff:fec0:ffed%tap0\nadmin@fe80::ff:fec0:ffed%tap0's password: admin\nadmin@infix-c0-ff-ee:~$ \n</code></pre>"},{"location":"discovery/#lldp","title":"LLDP","text":"<p>Infix supports LLDP (IEEE 802.1AB). For a device with factory default settings, the link-local IPv6 address can be read from the Management Address TLV using tcpdump or other sniffing tools<sup>1</sup>:</p> <pre><code>linux-pc:# tcpdump -i tap0 -Qin -v ether proto 0x88cc\ntcpdump: listening on tap0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n15:51:52.061071 LLDP, length 193\n    Chassis ID TLV (1), length 7\n      Subtype MAC address (4): 02:00:00:c0:ff:ee (oui Unknown)\n    Port ID TLV (2), length 7\n      Subtype MAC address (3): 02:00:00:c0:ff:ee (oui Unknown)\n    Time to Live TLV (3), length 2: TTL 120s\n    System Name TLV (5), length 14: infix-c0-ff-ee\n    System Description TLV (6), length 91\n      Infix by KernelKit Linux 5.19.17 #1 SMP PREEMPT_DYNAMIC Wed Jun 7 08:47:23 CEST 2023 x86_64\n    System Capabilities TLV (7), length 4\n      System  Capabilities [Bridge, WLAN AP, Router, Station Only] (0x009c)\n      Enabled Capabilities [Station Only] (0x0080)\n    Management Address TLV (8), length 24\n      Management Address length 17, AFI IPv6 (2): fe80::ff:fec0:ffed\n      Interface Index Interface Numbering (2): 2\n    Port Description TLV (4), length 4: eth0\n    Organization specific TLV (127), length 9: OUI IEEE 802.3 Private (0x00120f)\n      Link aggregation Subtype (3)\n        aggregation status [supported], aggregation port ID 0\n    Organization specific TLV (127), length 9: OUI IEEE 802.3 Private (0x00120f)\n      MAC/PHY configuration/status Subtype (1)\n        autonegotiation [none] (0x00)\n        PMD autoneg capability [unknown] (0x8000)\n        MAU type Unknown (0x0000)\n    End TLV (0), length 0\n^C\n1 packet captured\nlinux-pc:# \n</code></pre> <p>If the device has an IPv4 address assigned, it is shown in an additional Management Address TLV.</p> <p>Note</p> <p>The Management Addresses shown by LLDP are not necessarily associated with the port transmitting the LLDP message.</p> <p>In the example below, the IPv4 address (10.0.1.1) happens to be assigned to eth0, while the IPv6 address (2001:db8::1) is not.</p> <pre><code>linux-pc:# sudo tcpdump -i tap0 -Qin -v ether proto 0x88cc\ntcpdump: listening on tap0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n15:46:07.908665 LLDP, length 207\n    Chassis ID TLV (1), length 7\n      Subtype MAC address (4): 02:00:00:c0:ff:ee (oui Unknown)\n    Port ID TLV (2), length 7\n      Subtype MAC address (3): 02:00:00:c0:ff:ee (oui Unknown)\n    Time to Live TLV (3), length 2: TTL 120s\n    System Name TLV (5), length 14: infix-c0-ff-ee\n    System Description TLV (6), length 91\n      Infix by KernelKit Linux 5.19.17 #1 SMP PREEMPT_DYNAMIC Wed Jun 7 08:47:23 CEST 2023 x86_64\n    System Capabilities TLV (7), length 4\n      System  Capabilities [Bridge, WLAN AP, Router, Station Only] (0x009c)\n      Enabled Capabilities [Station Only] (0x0080)\n    Management Address TLV (8), length 12\n      Management Address length 5, AFI IPv4 (1): 10.0.1.1\n      Interface Index Interface Numbering (2): 2\n    Management Address TLV (8), length 24\n      Management Address length 17, AFI IPv6 (2): 2001:db8::1\n      Interface Index Interface Numbering (2): 3\n    Port Description TLV (4), length 4: eth0\n    Organization specific TLV (127), length 9: OUI IEEE 802.3 Private (0x00120f)\n      Link aggregation Subtype (3)\n        aggregation status [supported], aggregation port ID 0\n    Organization specific TLV (127), length 9: OUI IEEE 802.3 Private (0x00120f)\n      MAC/PHY configuration/status Subtype (1)\n        autonegotiation [none] (0x00)\n        PMD autoneg capability [unknown] (0x8000)\n        MAU type Unknown (0x0000)\n    End TLV (0), length 0\n^C\n1 packet captured\n2 packets received by filter\n0 packets dropped by kernel\nlinux-pc:#\n</code></pre> <p>The following capabilities are available via NETCONF/RESTCONF or the Infix CLI.</p>"},{"location":"discovery/#lldp-enabledisable","title":"LLDP Enable/Disable","text":"<p>The LLDP service can be disabled using the following commands.</p> <pre><code>admin@infix-c0-ff-ee:/&gt; configure\nadmin@infix-c0-ff-ee:/config/&gt; no lldp \nadmin@infix-c0-ff-ee:/config/&gt; leave\nadmin@infix-c0-ff-ee:/&gt; \n</code></pre> <p>To reenable it from the CLI config mode:</p> <pre><code>admin@test-00-01-00:/config/&gt; set lldp enabled \nadmin@test-00-01-00:/config/&gt; leave\n</code></pre>"},{"location":"discovery/#lldp-message-transmission-interval","title":"LLDP Message Transmission Interval","text":"<p>By default, LLDP uses a <code>message-tx-interval</code> of 30 seconds, as defined by the IEEE standard. Infix allows this value to be customized. To change it using the CLI:</p> <pre><code>admin@test-00-01-00:/config/&gt; set lldp message-tx-interval 1\nadmin@test-00-01-00:/config/&gt; leave\n</code></pre>"},{"location":"discovery/#lldp-administrative-status-per-interface","title":"LLDP Administrative Status per Interface","text":"<p>Infix supports configuring the LLDP administrative status on a per-port basis. The default mode is <code>tx-and-rx</code>, but the following options are  also supported:</p> <ul> <li><code>rx-only</code> \u2013 Receive LLDP packets only</li> <li><code>tx-only</code> \u2013 Transmit LLDP packets only</li> <li><code>disabled</code> \u2013 Disable LLDP on the interface</li> </ul> <p>Example configuration:</p> <pre><code>admin@test-00-01-00:/config/&gt; set lldp port e8 dest-mac-address 01:80:C2:00:00:0E admin-status disabled\nadmin@test-00-01-00:/config/&gt; set lldp port e5 dest-mac-address 01:80:C2:00:00:0E admin-status rx-only \nadmin@test-00-01-00:/config/&gt; set lldp port e6 dest-mac-address 01:80:C2:00:00:0E admin-status tx-only\nadmin@test-00-01-00:/config/&gt; leave\n</code></pre> <p>Note</p> <p>The destination MAC address must be the standard LLDP multicast  address: <code>01:80:C2:00:00:0E</code>.</p>"},{"location":"discovery/#displaying-lldp-neighbor-information","title":"Displaying LLDP Neighbor Information","text":"<p>In CLI mode, Infix also provides a convenient <code>show lldp</code> command to list LLDP neighbors detected on each interface:</p> <pre><code>admin@test-00-01-00:/&gt; show lldp \nINTERFACE       REM-IDX   TIME        CHASSIS-ID          PORT-ID             \ne5              1         902         00:a0:85:00:04:01   00:a0:85:00:04:07   \ne6              3         897         00:a0:85:00:03:01   00:a0:85:00:03:07   \ne8              2         901         00:a0:85:00:02:01   00:a0:85:00:02:05\n</code></pre>"},{"location":"discovery/#mdns-sd","title":"mDNS-SD","text":"<p>DNS-SD/mDNS-SD can be used to discover Infix devices and services.  By default, Infix use the <code>.local</code> domain for advertising services.  Some networks use <code>.lan</code> instead, so this configurable:</p> <pre><code>admin@infix-c0-ff-ee:/&gt; configure\nadmin@infix-c0-ff-ee:/config/&gt; edit mdns\nadmin@infix-c0-ff-ee:/config/mdns/&gt; set domain lan\n</code></pre> <p>Other available settings include limiting the interfaces mDNS responder acts on:</p> <pre><code>admin@infix-c0-ff-ee:/config/&gt; set interfaces allow e1\n</code></pre> <p>or</p> <pre><code>admin@infix-c0-ff-ee:/config/&gt; set interfaces deny wan\n</code></pre> <p>The <code>allow</code> and <code>deny</code> settings are complementary, <code>deny</code> always wins.</p> <p>In Linux, tools such as avahi-browse or mdns-scan<sup>2</sup> can be used to search for devices advertising their services via mDNS.</p> <pre><code>linux-pc:# avahi-browse -ar\n+   tap0 IPv6 infix-c0-ff-ee                                SFTP File Transfer   local\n+   tap0 IPv4 infix-c0-ff-ee                                SFTP File Transfer   local\n+   tap0 IPv6 infix-c0-ff-ee                                SSH Remote Terminal  local\n+   tap0 IPv4 infix-c0-ff-ee                                SSH Remote Terminal  local\n=   tap0 IPv4 infix-c0-ff-ee                                SFTP File Transfer   local\n   hostname = [infix-c0-ff-ee.local]\n   address = [10.0.1.1]\n   port = [22]\n   txt = []\n=   tap0 IPv4 infix-c0-ff-ee                                SSH Remote Terminal  local\n   hostname = [infix-c0-ff-ee.local]\n   address = [10.0.1.1]\n   port = [22]\n   txt = []\n=   tap0 IPv6 infix-c0-ff-ee                                SFTP File Transfer   local\n   hostname = [infix-c0-ff-ee.local]\n   address = [fe80::ff:fec0:ffed]\n   port = [22]\n   txt = []\n=   tap0 IPv6 infix-c0-ff-ee                                SSH Remote Terminal  local\n   hostname = [infix-c0-ff-ee.local]\n   address = [fe80::ff:fec0:ffed]\n   port = [22]\n   txt = []\n^C\nlinux-pc:#\n</code></pre> <p>Tip</p> <p>The <code>-t</code> option is also very useful, it stops browsing automatically when a \"more or less complete list\" has been printed.  However, some devices on the LAN may be in deep sleep so run the command again if you cannot find the device you are looking for.</p> <p>Additionally, avahi-resolve-host-name can be used to verify domain name mappings for IP addresses.  By default, it translates from IPv4 addresses.  This function allows users to confirm that addresses are mapped correctly.</p> <pre><code>linux-pc:# avahi-resolve-host-name infix-c0-ff-ee.local\ninfix-c0-ff-ee.local    10.0.1.1\nlinux-pc:#\n</code></pre> <p>Thanks to mDNS we can use the advertised name instead of the IP address for operations like <code>ping</code> and <code>ssh</code> as shown below:</p> <pre><code>linux-pc:# ping infix-c0-ff-ee.local -c 3\nPING infix-c0-ff-ee.local (10.0.1.1) 56(84) bytes of data.\n64 bytes from 10.0.1.1: icmp_seq=1 ttl=64 time=0.852 ms\n64 bytes from 10.0.1.1: icmp_seq=2 ttl=64 time=1.12 ms\n64 bytes from 10.0.1.1: icmp_seq=3 ttl=64 time=1.35 ms\n\n--- infix-c0-ff-ee.local ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\nrtt min/avg/max/mdev = 0.852/1.105/1.348/0.202 ms\n\nlinux-pc:# ssh admin@infix-c0-ff-ee.local\n(admin@infix-c0-ff-ee.local) Password: \n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-\n\nRun the command 'cli' for interactive OAM\n\nlinux-pc:#\n</code></pre> <p>To disable mDNS/mDNS-SD, type the commands:</p> <pre><code>admin@infix-c0-ff-ee:/&gt; configure \nadmin@infix-c0-ff-ee:/config/&gt; no mdns\nadmin@infix-c0-ff-ee:/config/&gt; leave\n</code></pre>"},{"location":"discovery/#human-friendly-hostname-alias","title":"Human-Friendly Hostname Alias","text":"<p>Each Infix deviuce advertise itself as infix.local, in addition to its full hostname (e.g., infix-c0-ff-ee.local or foo.local).  This alias works seamlessly on a network with a single Infix device, and makes it easy to connect when the exact hostname is not known in advance.  The examples below show how the alias can be used for actions such as pinging or establishing an SSH connection:</p> <pre><code>linux-pc:# ping infix.local -c 3\nPING infix.local (10.0.1.1) 56(84) bytes of data.\n64 bytes from 10.0.1.1: icmp_seq=1 ttl=64 time=0.751 ms\n64 bytes from 10.0.1.1: icmp_seq=2 ttl=64 time=2.28 ms\n64 bytes from 10.0.1.1: icmp_seq=3 ttl=64 time=1.42 ms\n\n--- infix.local ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\nrtt min/avg/max/mdev = 0.751/1.482/2.281/0.626 ms\n\nlinux-pc:# ssh admin@infix.local\n(admin@infix.local) Password: \n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-\n\nRun the command 'cli' for interactive OAM\n\nadmin@infix-c0-ff-ee:~$\n</code></pre> <p>When multiple Infix devices are present on the LAN the alias will not uniquely identify a device; infix.local will refer to any of the Infix devices, likely the one that first appeared.</p> <p>Note</p> <p>When multiple Infix devices are present on the LAN, use the full name, e.g., infix-c0-ff-ee.local or foo.local rather than the alias infix.local to deterministically connect to the device.</p>"},{"location":"discovery/#browse-network-using-networklocal","title":"Browse Network Using network.local","text":"<p>Another mDNS alias that all Infix devices advertise is network.local. This is a web service which basically runs <code>avahi-browse</code> and displays a table of other Infix devices and their services.</p> <p></p> <p>With multiple Infix devices on the LAN, one will take the role of your portal to access all others, if it goes down another takes its place.</p> <p>To disable the netbrowse service, and the network.local alias, the following commands can be used:</p> <pre><code>admin@infix-c0-ff-ee:/&gt; configure \nadmin@infix-c0-ff-ee:/config/&gt; edit web\nadmin@infix-c0-ff-ee:/config/web/&gt; no netbrowse\nadmin@infix-c0-ff-ee:/config/web/&gt; leave\n</code></pre> <ol> <li> <p>E.g., lldpd which includes the lldpcli too, handy to sniff and display LLDP packets.\u00a0\u21a9</p> </li> <li> <p>mdns-scan: a tool for scanning for mDNS/DNS-SD services on the local network.\u00a0\u21a9</p> </li> </ol>"},{"location":"eth-counters/","title":"RMON Counters","text":"<p>This document show the mapping between YANG and Linux / Ethtool counters.</p> YANG Linux / Ethtool <code>in-total-octets</code> <code>FramesReceivedOK</code>, <code>FrameCheckSequenceErrors</code>, <code>FramesLostDueToIntMACRcvError</code>, <code>AlignmentErrors</code>, <code>etherStatsOversizePkts</code>, <code>etherStatsJabbers</code> <code>in-frames</code> <code>FramesReceivedOK</code> <code>in-multicast-frames</code> <code>MulticastFramesReceivedOK</code> <code>in-broadcast-frames</code> <code>BroadcastFramesReceivedOK</code> <code>in-error-fcs-frames</code> <code>FrameCheckSequenceErrors</code> <code>in-error-undersize-frames</code> <code>undersize_pkts</code> <code>in-error-oversize-frames</code> <code>etherStatsJabbers</code>, <code>etherStatsOversizePkts</code> <code>in-error-mac-internal-frames</code> <code>FramesLostDueToIntMACRcvError</code> <code>out-frames</code> <code>FramesTransmittedOK</code> <code>out-multicast-frames</code> <code>MulticastFramesXmittedOK</code> <code>out-broadcast-frames</code> <code>BroadcastFramesXmittedOK</code> <code>infix-eth:out-good-octets</code> <code>OctetsTransmittedOK</code> <code>infix-eth:in-good-octets</code> <code>OctetsReceivedOK</code>"},{"location":"hardware/","title":"Hardware Information and Status","text":"<p>The hardware infomation and status is handled by the YANG model IETF hardware, with deviations and augmentations in infix-hardware.</p>"},{"location":"hardware/#usb-ports","title":"USB Ports","text":"<p>For Infix to be able to control USB port(s), a device tree modification is needed (see alder.dtsi for full example).</p> <pre><code> chosen {\n   infix {\n     usb-ports = &lt;&amp;cp0_usb3_1&gt;;\n     usb-port-names = \"USB\";\n   };\n };\n</code></pre> <p>Two USB ports are also exposed in QEMU for test purpose.</p> <p>All USB ports in the system will be disabled during boot due to the file <code>board/common/rootfs/etc/modprobe.d/usbcore.conf</code>.  If you do not want Infix to control USB port(s), remove the file or manually enable the USB bus, here is an example:</p> <pre><code># Enable the bus\necho 1 &gt; /sys/bus/usb/devices/usb1/authorized\n</code></pre> <p>And then enable sub-devices (e.g. USB memory)</p> <pre><code># Enable a device plugged into usb1\necho 1 &gt;  /sys/bus/usb/devices/usb1/1-1/authorized\n</code></pre>"},{"location":"hardware/#current-status","title":"Current status","text":"<pre><code>admin@example:/&gt; show hardware\n USB PORTS\n NAME                STATE\n USB                 unlocked\n</code></pre> <p>An USB port can be in two states unlocked and locked. When a port is locked, all connected devices will get power, but never authorized by Linux to use.</p>"},{"location":"hardware/#configure-usb-port","title":"Configure USB port","text":"<p>Note: You can only configure USB ports known to the system.  See <code>show hardware</code> in admin-exec context.  (Use <code>do</code> prefix in configure context.)</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; set hardware component USB state admin-state unlocked\nadmin@example:/config/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"hardware/#using-a-usb-stick","title":"Using a USB Stick","text":"<p>With the USB port unlocked, a memory stick can be used to expand the storage of the device.  Plug it in, either directly, or via a USB hub. All partitions of VFAT or exFAT type are automatically mounted to the <code>/media/&lt;LABLEL&gt;</code> directory, e.g., <code>/media/memorystick</code>, or if a partition does not have a label, using the kernel device name, e.g., <code>/media/sda</code>.</p> <p>Depending on the partition type the the media is either mounted in <code>flush</code> or <code>sync</code> mode to ensure files are properly flushed to the backing store of the memory stick.  This to protect against users yanking out a device before file(s) have been written to it.</p> <p>The only way currently to safely \"eject\" a USB memory stick is to use <code>umount</code> command from a UNIX shell, which explicitly synchronizes any cached data to disk before returning the prompt:</p> <pre><code>admin@example:~$ sudo umount /media/log\n</code></pre>"},{"location":"license/","title":"Origin &amp; Licensing","text":"<p>Infix is entirely built on Open Source components (packages).  Most of them, as well as the build system with its helper scripts and tools, is from Buildroot, which is distributed under the terms of the GNU General Public License (GPL).  See the file COPYING for details.</p> <p>Some files in Buildroot may contain a different open source license statement.  Those files are licensed under the license contained in the file itself.</p> <p>Buildroot and Infix also bundle patch files, which are applied to the sources of the various packages.  Those patches are not covered by the license of Buildroot or Infix.  Instead, they are covered by the license of the software to which the patches are applied.  When said software is available under multiple licenses, the patches are only provided under the publicly accessible licenses.</p> <p>Infix releases include the license information covering all Open Source packages.  This is extracted automatically at build time using the tool <code>make legal-info</code>.  Any proprietary software built on top of Infix, or Buildroot, would need separate auditing to ensure it does not link with any GPL<sup>1</sup> licensed library.</p> <ol> <li> <p>Infix image builds use GNU libc (GLIBC) which is covered by the LGPL.  The LGPL does allow proprietary software, as long as said software is linking dynamically, not statically, to GLIBC.\u00a0\u21a9</p> </li> </ol>"},{"location":"management/","title":"System Management","text":"<p>The system utilizes YANG models for keeping configuration and operational data. These databases can be managed through different interfaces such as NETCONF, RESTCONF, and CLI via SSH or Console.</p>"},{"location":"management/#ssh-management","title":"SSH Management","text":"<p>An SSH server (SSHv2) is provided for remote management. It can be enabled/disabled as shown below.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit ssh\nadmin@example:/config/ssh/&gt; set enabled\nadmin@example:/config/ssh/&gt;\n</code></pre> <p>By default the SSH server accepts connections to port 22 on all its IP addresses, but this can be adjusted using the <code>listen</code> command. To make the server (only) listen for incoming connections to IP address 192.168.1.1 and port 12345 the following commands can be used.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit ssh\nadmin@example:/config/ssh/&gt; show\nenabled true;\nhostkey genkey;\nlisten ipv4 {\n  address 0.0.0.0;\n  port 22;\n}\nlisten ipv6 {\n  address ::;\n  port 22;\n}\nadmin@example:/config/ssh/&gt; no listen ipv6\nadmin@example:/config/ssh/&gt; edit listen ipv4\nadmin@example:/config/ssh/listen/ipv4/&gt; set address 192.168.1.1\nadmin@example:/config/ssh/listen/ipv4/&gt; set port 12345\nadmin@example:/config/ssh/listen/ipv4/&gt;\n</code></pre> <p>The default SSH hostkey is generated on first boot and is used in both SSH and NETCONF (SSH transport). Custom keys can be added to the configuration in <code>ietf-keystore</code>. The only supported hostkey type is RSA for now, thus the private key must be <code>ietf-crypto-types:rsa-private-key-format</code> and the public key <code>ietf-crypto-types:ssh-public-key-format</code></p>"},{"location":"management/#use-your-own-ssh-hostkeys","title":"Use your own SSH hostkeys","text":"<p>Hostkeys can be generated with OpenSSL: <pre><code>openssl genpkey -quiet -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -outform PEM &gt; mykey\nopenssl rsa -RSAPublicKey_out &lt; mykey &gt; mykey.pub\n</code></pre> Store the keys in <code>ietf-keystore</code> without the header and footer information created by OpenSSL.</p> <p>After the key has been stored in the keystore and given the name mykey it can be added to SSH configuration:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit ssh\nadmin@example:/config/ssh/&gt; set hostkey mykey\n</code></pre>"},{"location":"management/#console-port","title":"Console Port","text":"<p>For units with a console port, it is possible for users to login to shell/CLI with functionality similar to what is provided via SSH.</p> <p>The type and setup for your console port is product specific. For instance, it can be a USB-C port connected to the CPU serial port using a USB-to-serial converter. To connect you would need a USB-C cable connected to the console port of the device. The serial port is typically setup to run at 115200 baud, 8N1.</p> <pre><code>Infix OS \u2014 Immutable.Friendly.Secure v24.11.1 (ttyS0)\nexample login: admin\nPassword:\n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-'\n\nRun the command 'cli' for interactive OAM\n\nadmin@example:~$\n</code></pre> <p>The <code>resize</code> command can be used to update terminal settings to the size of your terminal window.</p> <pre><code>admin@example:~$ resize\nCOLUMNS=115;LINES=59;export COLUMNS LINES;\nadmin@example:~$\n</code></pre> <p>CLI can be entered from shell in the same way as for SSH.</p> <pre><code>admin@example:~$ cli\n\nSee the 'help' command for an introduction to the system\n\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\ne1              ethernet   LOWER-DOWN  00:53:00:06:03:01\ne2              ethernet   LOWER-DOWN  00:53:00:06:03:02\n...\nadmin@example:/&gt;\n</code></pre>"},{"location":"management/#web-web-console-and-restconf","title":"Web, Web-console and RESTCONF","text":"<p>The system provides a set of Web services:</p> <ul> <li>a rudimentary Web server, currently limited to an information page</li> <li>a RESTCONF server with equivalent management capabilities as NETCONF</li> <li>a Web console service, where the shell/CLI can be accessed via   HTTPS, similar to connecting via a console port or SSH</li> </ul> <p>There is also a Netbrowse Web service presenting information about the unit's neighbors, collected via mDNS (see Discovery for more details).</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit web\nadmin@example:/config/web/&gt; help\n  enabled                           Enable or disable on all web services.\n  console                           Web console interface.\n  netbrowse                         mDNS Network Browser.\n  restconf                          IETF RESTCONF Server.\nadmin@example:/config/web/&gt;\n</code></pre>"},{"location":"management/#enabledisable-web-service-and-server","title":"Enable/disable Web Service and Server","text":"<p>The Web service can be enabled as shown below.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit web\nadmin@example:/config/web/&gt; set enabled\nadmin@example:/config/web/&gt; \n</code></pre> <p>Enabling the Web service implies that a Web server is enabled. Currently this Web server provides generic Infix information, as well as a link to a Web console. The Web server uses HTTPS; any HTTP request is redirected to HTTPS.</p> <p>The enabled setting for the Web service acts as a global enable/disable setting for the other Web services (Web console, RESTCONF and Netbrowse).</p>"},{"location":"management/#enabledisable-web-console","title":"Enable/disable Web Console","text":"<p>The Web console service provides a terminal service similar to Console or SSH. The Web console is secured via HTTPS on port 7861.</p> <p>The Web console has its own enable/disable setting, but will only be activated if the Web service is enabled. The example below shows how to disable the Web console.</p> <pre><code>admin@example:/config/web/&gt; edit console\nadmin@example:/config/web/console/&gt; no enabled\nadmin@example:/config/web/console/&gt;\n</code></pre>"},{"location":"management/#enabledisable-restconf-service","title":"Enable/disable RESTCONF Service","text":"<p>Alternatively, the system can be managed remotely using RESTCONF. Meaning you can <code>curl</code> it instead of using a dedicated NETCONF client.</p> <p>The RESTCONF service has its own enable/disable setting, but will only be activated if the Web service is enabled. The example below shows how to disable the RESTCONF service.</p> <pre><code>admin@example:/config/web/&gt; edit restconf\nadmin@example:/config/web/restconf/&gt; no enabled\nadmin@example:/config/web/restconf/&gt;\n</code></pre>"},{"location":"management/#system-upgrade","title":"System Upgrade","text":"<p>See Upgrade &amp; Boot Order for information on upgrading.</p>"},{"location":"netboot/","title":"Netboot HowTo","text":"<p>This document describes how to set up network booting U-Boot devices on a LAN, e.g., when working with an evaluation board or other embedded system.  The most secure way to do this is with a local LAN between a PC and the device.</p> <p>Instead of setting up everything in U-Boot to download the Linux Image, device tree, and initramfs, we will let U-Boot download a script with instructions to run.  When you have multiple systems (boards) this quickly becomes a lot easier to manage.</p> <p>Note</p> <p>Instructions in this HowTo assume a Debian based development system, e.g., Ubuntu or Linux Mint.</p>"},{"location":"netboot/#network-interface-setup","title":"Network Interface Setup","text":"<p>For two dedicated network interfaces, here <code>eth2</code> and <code>eth3</code> (ymmv), we create an old-style interfaces config<sup>1</sup> with the following content:</p> <pre><code># /etc/network/interfaces.d/gimli\nauto eth2\niface eth2 inet static\n        address 192.168.0.1\n        netmask 255.255.255.0\n\nauto eth3\niface eth3 inet manual\n</code></pre> <p>Tip</p> <p>Use configuration file names in <code>.d/</code> directories that make sense and can easily be remembered.  Here we use the hostname of the PC.</p>"},{"location":"netboot/#dhcptftp-server-setup","title":"DHCP/TFTP Server Setup","text":"<p>The examples given here use <code>dnsmasq</code>, which provides both DHCP and TFTP server support.  The same can be achieved with other implementations.</p> <p>Similar to <code>interfaces.d</code>, dnsmasq has an <code>/etc/dnsmasq.d</code> directory so we can use \"snippets\" instead of modifying <code>/etc/dnsmasq.conf</code> directly. Add a file called <code>/etc/dnsmasq.d/gimli</code>.</p> <p>Initial content:</p> <pre><code># Remember IP address handed out to BOOTP clients\nbootp-dynamic\n# Disable check-if-ip-address-is-already-used\nno-ping\n\n# Enable TFTP server, use /srv/ftp, same as any FTP server, useful\n# when using the same images for system upgrade as for netbooting.\nenable-tftp\ntftp-root=/srv/ftp\n</code></pre> <p>Caution</p> <p>First of all, make sure you DO NOT accidentally set up dnsmasq so that it starts acting as a DHCP server also on your office LAN!  Follow the instructions below for more details.</p> <p>If you have many interfaces used for lab equipment and only one office LAN interface, then use something like this:</p> <pre><code># Disable DHCP server on loopback and office LAN (eth0)\nexcept-interface=lo\nexcept-interface=eth0\n</code></pre> <p>To further lock this down, we only run the DHCP server on each of the interfaces used for lab equipment, with a dedicated IP range as well:</p> <pre><code># Currently I have an imx8mp-evk on eth2, so on my system I have a\n# symlink bootfile-eth2 -&gt; netboot.scr\ninterface=eth2\ndhcp-range=192.168.0.100,192.168.0.199,1h\ndhcp-boot=tag:eth2,bootfile-eth2\n</code></pre>"},{"location":"netboot/#bootfile-netbootscr","title":"Bootfile netboot.scr","text":"<p>The bootfile U-Boot retrieves from the TFTP server is a script that looks like this, <code>netboot.sh</code>:</p> <pre><code>setenv ramdisk_addr_r 0x58000000\nsetenv fdt_addr_r     0x50400000\n\nsetenv autoboot off\ntftp ${fdt_addr_r}     imx8mp-evk/imx8mp-evk.dtb\ntftp ${kernel_addr_r}  imx8mp-evk/Image\ntftp ${ramdisk_addr_r} imx8mp-evk/rootfs.squashfs\n\nsetenv bootargs console=ttymxc1,115200 root=/dev/ram0 brd.rd_size=500000 rauc.slot=net\nbooti ${kernel_addr_r} ${ramdisk_addr_r}:${filesize} ${fdt_addr_r}\n</code></pre> <p>U-Boot cannot read script files directly, so we need to wrap it with a FIT format header, this is done by first converting it on the PC:</p> <pre><code>$ mkimage -T script -d netboot.sh netboot.scr\n</code></pre> <p>The output is <code>netboot.scr</code> which we symlink to above in the dnsmasq setup step.</p>"},{"location":"netboot/#u-boot-commands","title":"U-Boot Commands","text":"<p>U-Boot is a maze of environment variables, some with values, some wrap commands, and most are undocumented.  We will use a prefix for our variables to ensure we do not overwrite anything you may want to use later.</p> <pre><code>==&gt; setenv ixboot 'dhcp &amp;&amp; source \\${fileaddr}'\n==&gt; saveenv\n</code></pre> <ol> <li> <p>To prevent NetworkManager from automatically managing the interfaces.\u00a0\u21a9</p> </li> </ol>"},{"location":"networking/","title":"Network Configuration","text":"<p>Infix aims to support all Linux Networking constructs.  The YANG models used to describe the system are chosen to fit well and leverage the underlying Linux kernel's capabilities.  The ietf-interfaces.yang model forms the base, extended with ietf-ip.yang and other layer-3 IETF models.  The layer-2 bridge and aggregate models are defined by Infix to exploit the unique features not available in IEEE models.</p> <p>Important</p> <p>When issuing <code>leave</code> to activate your changes, remember to also save your settings, <code>copy running-config startup-config</code>.  See the CLI Introduction for a background.</p>"},{"location":"networking/#interface-lego","title":"Interface LEGO\u00ae","text":"<p>The network building blocks available in Linux are akin to the popular LEGO\u00ae bricks.</p> <p></p> <p>There are two types of relationships that can link two blocks together:</p> <ol> <li>Lower-to-upper: Visually represented by an extruding square      connected upwards to a square socket.  An interface can only have      a single lower-to-upper relationship, i.e., it can be attached to      a single upper interface like a bridge or a LAG.  In <code>iproute2</code>      parlance, this corresponds to the interface's <code>master</code> setting</li> <li>Upper-to-lower: Visually represented by an extruding semicircle      connected downwards to a semicircle socket.  The lower interface in      these relationships accepts multiple upper-to-lower relationships      from different upper blocks.  E.g., multiple VLANs and IP address      blocks can be connected to the same lower interface</li> </ol> <p></p> <p>An interface may simultaneously have a lower-to-upper relation to some other interface, and be the target of one or more upper-to-lower relationships.  It is valid, for example, for a physical port to be attached to a bridge, but also have a VLAN interface stacked on top of it.  In this example, traffic assigned to the VLAN in question would be diverted to the VLAN interface before entering the bridge, while all other traffic would be bridged as usual.</p> Type Yang Model Description bridge infix-if-bridge SW implementation of an IEEE 802.1Q bridge ip ietf-ip, infix-ip IP address to the subordinate interface vlan infix-if-vlan Capture all traffic belonging to a specific 802.1Q VID lag infix-if-lag Link aggregation, static and IEEE 802.3ad (LACP) lo ietf-interfaces Software loopback interface eth ieee802-ethernet-interface Physical Ethernet device/port. infix-ethernet-interface veth infix-if-veth Virtual Ethernet pair, typically one end is in a container common ietf-interfaces, Properties common to all interface types infix-interfaces"},{"location":"networking/#data-plane","title":"Data Plane","text":"<p>The blocks you choose, and how you connect them, defines your data plane. Here we see an example of how to bridge a virtual port with a physical LAN.</p> <p></p> <p>Depending on the (optional) VLAN filtering of the bridge, the container may have full or limited connectivity with outside ports, as well as the internal CPU.</p> <p>In fact the virtual port connected to the bridge can be member of several VLANs, with each VLAN being an interface with an IP address inside the container.</p> <p>Thanks to Linux, and technologies like switchdev, that allow you to split a switching fabric into unique (isolated) ports, the full separation and virtualization of all Ethernet layer properties are possible to share with a container.  Meaning, all the building blocks used on the left hand side can also be used freely on the right hand side as well.</p>"},{"location":"networking/#general","title":"General","text":"<p>General interface settings include <code>type</code>, <code>enable</code>, custom MAC address, and text <code>description</code>.  Other settings have their own sections, below.</p> <p>The <code>type</code> is important to set when configuring devices remotely because unlike the CLI, a NETCONF or RESTCONF session cannot guess the interface type for you.  The operating system provides an override of the available interface types.</p> <p>An <code>enabled</code> interface can be inspected using the operational datastore, nodes <code>admin-state</code> and <code>oper-state</code> show the status, .  Possible values are listed in the YANG model.</p> <p>The <code>custom-phys-address</code> can be used to set an interface's MAC address. This is an extension to the ietf-interfaces YANG model, which defines <code>phys-address</code> as read-only<sup>4</sup>.  The following shows the different configuration options.</p> <p>The <code>description</code> is saved as Linux <code>ifalias</code> on an interface.  It is a free-form string, useful for describing purpose or just adding comments for remote debugging, e.g., using the operational datastore.</p> <p>Caution</p> <p>There is no validation or safety checks performed by the system when using <code>custom-phys-address</code>.  In particular the <code>offset</code> variant can be dangerous to use -- pay attention to the meaning of bits in the upper-most octet: local bit, multicast/group, etc.</p>"},{"location":"networking/#fixed-custom-mac","title":"Fixed custom MAC","text":"<pre><code>admin@example:/config/&gt; edit interface veth0a\nadmin@example:/config/interface/veth0a/&gt; set custom-phys-address static 00:ab:00:11:22:33\n\n=&gt; 00:ab:00:11:22:33\n</code></pre>"},{"location":"networking/#chassis-mac","title":"Chassis MAC","text":"<p>Chassis MAC, sometimes also referred to as base MAC.  In these two examples it is <code>00:53:00:c0:ff:ee</code>.</p> <pre><code>admin@example:/config/&gt; edit interface veth0a\nadmin@example:/config/interface/veth0a/&gt; set custom-phys-address chassis\n\n=&gt; 00:53:00:c0:ff:ee\n</code></pre>"},{"location":"networking/#chassis-mac-with-offset","title":"Chassis MAC, with offset","text":"<p>When constructing a derived address it is recommended to set the locally administered bit.  Same chassis MAC as before.</p> <pre><code>admin@example:/config/&gt; edit interface veth0a\nadmin@example:/config/interface/veth0a/&gt; set custom-phys-address chassis offset 02:00:00:00:00:02\n\n=&gt; 02:53:00:c0:ff:f0\n</code></pre>"},{"location":"networking/#bridging","title":"Bridging","text":"<p>This is the most central part of the system.  A bridge is a switch, and a switch is a bridge.  In Linux, setting up a bridge with ports connected to physical switch fabric, means you manage the actual switch fabric!</p>"},{"location":"networking/#mac-bridge","title":"MAC Bridge","text":"<p>In Infix ports are by default not switch ports, unless the customer specific factory config sets it up this way.  To enable switching, with offloading if you have a switch chipset, between ports you create a bridge and then add ports to that bridge.  Like this:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface br0\nadmin@example:/config/interface/br0/&gt; up\nadmin@example:/config/&gt; set interface eth0 bridge-port bridge br0\nadmin@example:/config/&gt; set interface eth1 bridge-port bridge br0\nadmin@example:/config/&gt; leave\n</code></pre> <p>Here we add two ports to bridge <code>br0</code>: <code>eth0</code> and <code>eth1</code>.</p> <p>Tip</p> <p>The CLI has several built-in helpers governed by convention.  E.g., naming bridges <code>brN</code>, where <code>N</code> is a number, the type is inferred automatically and unlocks all bridge features.  Other conventions are <code>vethNA</code>, where <code>N</code> is a number and <code>A</code> is a letter ('a' for access port and 'b' for bridge side is common), and <code>ethN.M</code> for VLAN M on top of <code>ethN</code>, or <code>dockerN</code> for a IP masquerading container bridge.</p> <p>Note, this inference only works with the CLI, configuring networking over NETCONF or RESTCONF requires setting the type explicitly.</p> <p></p> <p>It is possible to create multiple MAC bridges, however, it is currently<sup>5</sup> not recommended to use more than one MAC bridge on products with Marvell LinkStreet switching ASICs. A VLAN filtering bridge should be used instead.</p>"},{"location":"networking/#vlan-filtering-bridge","title":"VLAN Filtering Bridge","text":"<p>By default bridges in Linux do not filter based on VLAN tags.  This can be enabled when creating a bridge by adding a port to a VLAN as a tagged or untagged member.  Use the port default VID (PVID) setting to control VLAN association for traffic ingressing a port untagged (default PVID: 1).</p> <pre><code>admin@example:/config/&gt; edit interface br0\nadmin@example:/config/interface/br0/&gt; up\nadmin@example:/config/&gt; set interface eth0 bridge-port bridge br0\nadmin@example:/config/&gt; set interface eth0 bridge-port pvid 10\nadmin@example:/config/&gt; set interface eth1 bridge-port bridge br0\nadmin@example:/config/&gt; set interface eth1 bridge-port pvid 20\nadmin@example:/config/&gt; edit interface br0\nadmin@example:/config/interface/br0/&gt; set bridge vlans vlan 10 untagged eth0\nadmin@example:/config/interface/br0/&gt; set bridge vlans vlan 20 untagged eth1\n</code></pre> <p>This sets <code>eth0</code> as an untagged member of VLAN 10 and <code>eth1</code> as an untagged member of VLAN 20.  Switching between these ports is thus prohibited.</p> <p></p> <p>To terminate a VLAN in the switch itself, either for switch management or for routing, the bridge must become a (tagged) member of the VLAN.</p> <pre><code>admin@example:/config/interface/br0/&gt; set bridge vlans vlan 10 tagged br0\nadmin@example:/config/interface/br0/&gt; set bridge vlans vlan 20 tagged br0\n</code></pre> <p>To route or to manage via a VLAN, a VLAN interface needs to be created on top of the bridge, see section VLAN Interfaces below for more on this topic.</p> <p>Note</p> <p>In some use-cases only a single management VLAN on the bridge is used. For the example above, if the bridge itself is an untagged member only in VLAN 10, IP addresses can be set directly on the bridge without the need for dedicated VLAN interfaces on top of the bridge.</p>"},{"location":"networking/#multicast-filtering-and-snooping","title":"Multicast Filtering and Snooping","text":"<p>Multicast filtering in the bridge is handled by the bridge itself.  It can filter both IP multicast and MAC multicast.  For IP multicast it also supports \"snooping\", i.e., IGMP and MLD, to automatically reduce the broadcast effects of multicast.  See the next section for a summary of the terminology used.</p> <p>Important</p> <p>Currently there is no way to just enable multicast filtering without also enabling snooping.  This may change in the future, in which case a <code>filtering</code> enabled setting will be made available along with the existing <code>snooping</code> setting.</p> <p>When creating your bridge you must decide if you need a VLAN filtering bridge or a plain bridge (see previous section).  Multicast filtering is supported for either, but take note that it must be enabled and set up per VLAN when VLAN filtering is enabled -- there are no global multicast settings in this operating mode.</p> <p>In the following example we have a regular 8-port bridge without VLAN filtering.  We focus on the multicast specific settings:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface br0\nadmin@example:/config/interface/br0/&gt; set bridge multicast snooping\nadmin@example:/config/interface/br0/&gt; set ipv4 address 192.168.2.1 prefix-length 24\nadmin@example:/config/interface/br0/&gt; leave\nadmin@example:/&gt; copy running-config startup-config\n</code></pre> <p>Here we enable snooping and set a static IPv4 address so that the switch can take part in IGMP querier elections.  (MLD querier election currently not supported.)  We can inspect the current state:</p> <pre><code>admin@example:/&gt; show ip multicast\nMulticast Overview\nQuery Interval (default): 125 sec\nRouter Timeout          : 255\nFast Leave Ports        :\nRouter Ports            :\nFlood Ports             : e0, e1, e2, e3, e4, e5, e6, e7\n\nInterface       VID  Querier                     State  Interval  Timeout  Ver\nbr0                  192.168.2.1                    Up       125     None    3\n\nBridge          VID  Multicast Group       Ports\nbr0                  224.1.1.1             e3, e2\nbr0                  ff02::6a              br0\n</code></pre> <p>This is a rather small LAN, so our bridge has already become the elected IGMP querier.  We see it is ours because the timeout is <code>None</code>, and we recognize the IP address the system has detected, as ours.  We can also see two ports that have joined the same IPv4 multicast group, 224.1.1.1, and one join from the system itself for the IPv6 group ff02::6a.</p> <p>Now, let us see what happens when we add another bridge, this time with VLAN filtering enabled.  We skip the boring parts about how to move ports e4-e7 to <code>br1</code> and assign them to VLANs, and again, focus on the multicast bits only:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface br1\nadmin@example:/config/interface/br1/&gt; set bridge vlans vlan 1 multicast snooping\nadmin@example:/config/interface/br1/&gt; set bridge vlans vlan 2 multicast snooping\nadmin@example:/config/interface/br1/&gt; leave\nadmin@example:/&gt; copy running-config startup-config\n</code></pre> <p>Let us see what we get:</p> <pre><code>admin@example:/&gt; show ip multicast\nMulticast Overview\nQuery Interval (default): 125 sec\nRouter Timeout          : 255\nFast Leave Ports        : e5\nRouter Ports            : e1, e2, e5, e6, e7\nFlood Ports             : e1, e2, e3, e4, e5, e6, e7, e8\n\nInterface       VID  Querier                     State  Interval  Timeout  Ver\nbr0                  192.168.2.1                    Up       125     None    3\nbr1               1  0.0.0.0                        Up       125     None    3\nbr1               2  0.0.0.0                        Up       125     None    3\n\nBridge          VID  Multicast Group       Ports\nbr0                  224.1.1.1             e2\nbr0                  ff02::fb              br0\nbr0                  ff02::6a              br0\nbr0                  ff02::1:ff00:0        br0\nbr1               1  224.1.1.1             e5\nbr1               2  224.1.1.1             e7\nbr1               1  ff02::fb              br1\nbr1               1  ff02::1:ff00:0        br1\n</code></pre> <p>In this setup we have a lot more going on.  Multiple multicast router ports have been detected, and behind the scenes someone has also added an IGMP/MLD fast-leave port.</p>"},{"location":"networking/#terminology-abbreviations","title":"Terminology &amp; Abbreviations","text":"<ul> <li>IGMP: Internet Group Membership Protocol, multicast subscription    for IPv4, for details see RFC3376</li> <li>MLD: Multicast Listener Discovery (Protocol), multicast    subscription for IPv6, for details see RFC3810</li> <li>Unknown/Unregistered multicast: multicast groups that are not    in the multicast forwarding database (MDB)</li> <li>Known/Registered multicast: multicast groups that are in the    multicast forwarding database (MDB)</li> <li>MDB: the multicast forwarding database, consists of filters for    multicast groups, directing where multicast is allowed to egress.  A    filter entry consists of a group and a port list.  The bridge filters    with a unique database per VLAN, in the same was as the unicast FDB</li> <li>Join/Leave: the terminology used in earlier versions of the two    protocols to subscribe and unsubscribe to a multicast group.  For    more information, see Membership Report</li> <li>Membership Report A membership report is sent by end-devices and    forwarded by switches to the elected querier on the LAN.  They    consist of multiple \"join\" and \"leave\" operations on groups.  They    can also, per group, list which senders to allow or block.  Switches    usually only support the group subscription, and even more common    also only support filtering on the MAC level<sup>3</sup></li> <li>Querier election: the process of determining who is the elected    IGMP/MLD querier on a LAN.  Lowest numerical IP address wins, the    special address 0.0.0.0 (proxy querier) never wins</li> <li>Proxy querier: when no better querier exists on a LAN, one or    more devices can send proxy queries with source address 0.0.0.0 (or    :: for IPv6).  See Query Interval, below, why this is a good    thing</li> <li>Query interval: the time in seconds between two queries from an    IGMP/MLD querier.  It is not uncommon that end-devices do not send    their membership reports unless they first hear a query</li> <li>Fast Leave: set on a bridge port to ensure multicast is pruned as    quickly as possible when a \"leave\" membership report is received.  In    effect, this option marks the port as directly connected to an    end-device.  When not set (default), a query with timeout is first    sent to ensure no unintentional loss of multicast is incurred</li> <li>Router port: can be both configured statically and detected at    runtime based on connected devices, usually multicast routers.  On    a router port all multicast is forwarded, both known and unknown</li> <li>Flood port: set on a bridge port (default: enabled) to ensure    all unknown multicast is forwarded</li> <li>Router timeout: the time in seconds until a querier is deemed to    have been lost and another device (switch/router) takes over.  In the    tables shown above, a None timeout is declared when the current    device is the active querier</li> </ul> <p>Tip</p> <p>The reason why multicast flooding is enabled by default is to ensure safe co-existence with MAC multicast, which is common in industrial networks.  It also allows end devices that do not know of IGMP/MLD to communicate over multicast as long as the group they have chosen is not used by other IGMP/MLD aware devices on the LAN.</p> <p>As soon as an IGMP/MLD membership report to \"join\" a group is received the group is added to the kernel MDB and forwarding to other ports stop.  The only exception to this rule is multicast router ports.</p> <p>If your MAC multicast forwarding is not working properly, it may be because an IP multicast group maps to the same MAC address.  Please see RFC 1112 for details.  Use static multicast router ports, or static multicast MAC filters, to mitigate.</p>"},{"location":"networking/#forwarding-of-ieee-reserved-group-addresses","title":"Forwarding of IEEE Reserved Group Addresses","text":"<p>Addresses in the range <code>01:80:C2:00:00:0X</code> are used by various bridge signaling protocols, and are not forwarded by default.  Still, it is sometimes useful to let the bridge forward such packets, this can be done by specifying protocol names or the last address nibble as decimal value <code>0..15</code>:</p> <pre><code>admin@example:/config/&gt; edit interface br0 bridge\nadmin@example:/config/interface/br0/bridge/&gt; set ieee-group-forward     # Tap the ? ley for alternatives\n  [0..15]  List of IEEE link-local protocols to forward, e.g., STP, LLDP\n  dot1x    802.1X Port-Based Network Access Control.\n  lacp     802.3 Slow Protocols, e.g., LACP.\n  lldp     802.1AB Link Layer Discovery Protocol (LLDP).\n  stp      Spanning Tree (STP/RSPT/MSTP).\nadmin@example:/config/interface/br0/bridge/&gt; set ieee-group-forward\n</code></pre> <p>The following example configures bridge br0 to forward LLDP packets.</p> <pre><code>admin@example:/config/interface/br0/bridge/&gt; set ieee-group-forward lldp\nadmin@example:/config/interface/br0/bridge/&gt;\n</code></pre>"},{"location":"networking/#link-aggregation","title":"Link Aggregation","text":"<p>A link aggregate, or lag, allows multiple physical interfaces to be combined into a single logical interface, providing increased bandwidth (in some cases) and redundancy (primarily).  Two modes of qualifying lag member ports are available:</p> <ol> <li>static: Active members selected based on link status (carrier)</li> <li>lacp: IEEE 802.3ad Link Aggregation Control Protocol</li> </ol> <p>In LACP mode, LACPDUs are exchanged by the link partners to qualify each lag member, while in static mode only carrier is used.  This additional exchange in LACP ensures traffic can be forwarded in both directions.</p> <p>Traffic distribution, for both modes, across the active lag member ports is determined by the hash policy<sup>1</sup>.  It uses an XOR of the source, destination MAC addresses and the EtherType field.  This, IEEE 802.3ad-compliant, algorithm will place all traffic to a particular network peer on the same link.  Meaning there is no increased bandwidth for communication between two specific devices.</p> <p>Tip</p> <p>Similar to other interface types, naming your interface <code>lagN</code>, where <code>N</code> is a number, allows the CLI to automatically infer the interface type as LAG.</p>"},{"location":"networking/#basic-configuration","title":"Basic Configuration","text":"<p>Creating a link aggregate interface and adding member ports:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface lag0\nadmin@example:/config/interface/lag0/&gt; set lag mode static\nadmin@example:/config/interface/lag0/&gt; end\nadmin@example:/config/&gt; set interface eth7 lag-port lag lag0\nadmin@example:/config/&gt; set interface eth8 lag-port lag lag0\nadmin@example:/config/&gt; leave\n</code></pre> <p>A static lag responds only to link (carrier) changes of member ports. E.g., in this example egressing traffic is continuously distributed over the two links until link down on one link is detected, triggering all traffic to be steered to the sole remaining link.</p>"},{"location":"networking/#lacp-configuration","title":"LACP Configuration","text":"<p>LACP mode provides dynamic negotiation of the link aggregate.  Key settings include:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface lag0\nadmin@example:/config/interface/lag0/&gt; set lag mode lacp\nadmin@example:/config/interface/lag0/&gt; set lag lacp mode passive\nadmin@example:/config/interface/lag0/&gt; set lag lacp rate fast\nadmin@example:/config/interface/lag0/&gt; set lag lacp system-priority 100\n</code></pre> <p>LACP mode supports two operational modes:</p> <ul> <li>active: Initiates negotiation by sending LACPDUs (default)</li> <li>passive: Waits for peer to initiate negotiation</li> </ul> <p>Note</p> <p>At least one end of the link must be in active mode for negotiation to occur.</p> <p>The LACP rate setting controls protocol timing:</p> <ul> <li>slow: LACPDUs sent every 30 seconds, with 90 second timeout (default)</li> <li>fast: LACPDUs sent every second, with 3 second timeout</li> </ul>"},{"location":"networking/#link-flapping","title":"Link Flapping","text":"<p>To protect against link flapping, debounce timers can be configured to delay link qualification.  Usually only the <code>up</code> delay is needed:</p> <pre><code>admin@example:/config/interface/lag0/lag/link-monitor/&gt; edit debounce\nadmin@example:/config/interface/lag0/lag/link-monitor/debounce/&gt; set up 500\nadmin@example:/config/interface/lag0/lag/link-monitor/debounce/&gt; set down 200\n</code></pre>"},{"location":"networking/#operational-status-overview","title":"Operational Status, Overview","text":"<p>Like other interfaces, link aggregates are also available in the general interfaces overview in the CLI admin-exec context.  Here is the above static mode aggregate:</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\n.\n.\n.\nlag0            lag        UP          static: balance-xor, hash: layer2\n\u2502               ethernet   UP          00:a0:85:00:02:00\n\u251c eth7          lag        ACTIVE\n\u2514 eth8          lag        ACTIVE\n</code></pre> <p>Same aggregate, but in LACP mode:</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\n.\n.\n.\nlag0            lag        UP          lacp: active, rate: fast (1s), hash: layer2\n\u2502               ethernet   UP          00:a0:85:00:02:00\n\u251c eth7          lag        ACTIVE      active, short_timeout, aggregating, in_sync, collecting, distributing\n\u2514 eth8          lag        ACTIVE      active, short_timeout, aggregating, in_sync, collecting, distributing\n</code></pre>"},{"location":"networking/#operational-status-detail","title":"Operational Status, Detail","text":"<p>In addition to basic status shown in the interface overview, detailed LAG status can be inspected:</p> <pre><code>admin@example:/&gt; show interfaces name lag0\nname                : lag0\nindex               : 25\nmtu                 : 1500\noperational status  : up\nphysical address    : 00:a0:85:00:02:00\nlag mode            : static\nlag type            : balance-xor\nlag hash            : layer2\nlink debounce up    : 0 msec\nlink debounce down  : 0 msec\nipv4 addresses      :\nipv6 addresses      :\nin-octets           : 0\nout-octets          : 2142\n</code></pre> <p>Same aggregate, but in LACP mode:</p> <pre><code>admin@example:/&gt; show interfaces name lag0\nname                : lag0\nindex               : 24\nmtu                 : 1500\noperational status  : up\nphysical address    : 00:a0:85:00:02:00\nlag mode            : lacp\nlag hash            : layer2\nlacp mode           : active\nlacp rate           : fast (1s)\nlacp aggregate id   : 1\nlacp system priority: 65535\nlacp actor key      : 9\nlacp partner key    : 9\nlacp partner mac    : 00:a0:85:00:03:00\nlink debounce up    : 0 msec\nlink debounce down  : 0 msec\nipv4 addresses      :\nipv6 addresses      :\nin-octets           : 100892\nout-octets          : 111776\n</code></pre> <p>Member ports provide additional status information:</p> <ul> <li>Link failure counter: number of detected link failures</li> <li>LACP state flags: various states of LACP negotiation:</li> <li><code>active</code>: port is actively sending LACPDUs</li> <li><code>short_timeout</code>: using fast rate (1s) vs. slow rate (30s)</li> <li><code>aggregating</code>: port is allowed to aggregate in this LAG</li> <li><code>in_sync</code>: port is synchronized with partner</li> <li><code>collecting</code>: port is allowed to receive traffic</li> <li><code>distributing</code>: port is allowed to send traffic</li> <li><code>defaulted</code>: using default partner info (partner not responding)</li> <li><code>expired</code>: partner info has expired (no LACPDUs received)</li> <li>Aggregator ID: unique identifier for this LAG group</li> <li>Actor state: LACP state flags for this port (local)</li> <li>Partner state: LACP state flags from the remote port</li> </ul> <p>Example member port status:</p> <pre><code>admin@example:/&gt; show interfaces name eth7\nname                : eth7\nindex               : 8\nmtu                 : 1500\noperational status  : up\nphysical address    : 00:a0:85:00:02:00\nlag member          : lag0\nlag member state    : active\nlacp aggregate id   : 1\nlacp actor state    : active, short_timeout, aggregating, in_sync, collecting, distributing\nlacp partner state  : active, short_timeout, aggregating, in_sync, collecting, distributing\nlink failure count  : 0\nipv4 addresses      :\nipv6 addresses      :\nin-octets           : 473244\nout-octets          : 499037\n</code></pre>"},{"location":"networking/#example-switch-uplink-with-lacp","title":"Example: Switch Uplink with LACP","text":"<p>LACP mode provides the most robust operation, automatically negotiating the link aggregate and detecting configuration mismatches.</p> <p>A common use case is connecting a switch to an upstream device:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface lag0\nadmin@example:/config/interface/lag0/&gt; set lag mode lacp\n</code></pre> <p>Enable fast LACP for quicker fail-over:</p> <pre><code>admin@example:/config/interface/lag0/&gt; set lag lacp rate fast\n</code></pre> <p>Add uplink ports</p> <pre><code>admin@example:/config/interface/lag0/&gt; end\nadmin@example:/config/&gt; set interface eth7 lag-port lag lag0\nadmin@example:/config/&gt; set interface eth8 lag-port lag lag0\n</code></pre> <p>Enable protection against \"link flapping\".</p> <pre><code>admin@example:/config/interface/lag0/&gt; edit lag link-monitor\nadmin@example:/config/interface/lag0/lag/link-monitor/&gt; edit debounce\nadmin@example:/config/interface/lag0/lag/link-monitor/debounce/&gt; set up 500\nadmin@example:/config/interface/lag0/lag/link-monitor/debounce/&gt; set down 200\nadmin@example:/config/interface/lag0/lag/link-monitor/debounce/&gt; top\n</code></pre> <p>Add to bridge for switching</p> <pre><code>admin@example:/config/interface/lag0/lag/link-monitor/debounce/&gt; end\nadmin@example:/config/&gt; set interface lag0 bridge-port bridge br0\nadmin@example:/config/&gt; leave\n</code></pre>"},{"location":"networking/#vlan-interfaces","title":"VLAN Interfaces","text":"<p>Creating a VLAN can be done in many ways.  This section assumes VLAN interfaces created atop another Linux interface.  E.g., the VLAN interfaces created on top of the Ethernet interface or bridge in the picture below.</p> <p></p> <p>A VLAN interface is basically a filtering abstraction. When you run <code>tcpdump</code> on a VLAN interface you will only see the frames matching the VLAN ID of the interface, compared to all the VLAN IDs if you run <code>tcpdump</code> on the lower-layer interface.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth0.20\nadmin@example:/config/interface/eth0.20/&gt; show\ntype vlan;\nvlan {\n  tag-type c-vlan;\n  id 20;\n  lower-layer-if eth0;\n}\nadmin@example:/config/interface/eth0.20/&gt; leave\n</code></pre> <p>The example below assumes bridge br0 is already created, see VLAN Filtering Bridge.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface vlan10\nadmin@example:/config/interface/vlan10/&gt; set vlan id 10\nadmin@example:/config/interface/vlan10/&gt; set vlan lower-layer-if br0\nadmin@example:/config/interface/vlan10/&gt; leave\n</code></pre> <p>As conventions, a VLAN interface for VID 20 on top of an Ethernet interface eth0 is named eth0.20, and a VLAN interface for VID 10 on top of a bridge interface br0 is named vlan10.</p> <p>Note</p> <p>If you name your VLAN interface <code>foo0.N</code> or <code>vlanN</code>, where <code>N</code> is a number, the CLI infers the interface type automatically.</p>"},{"location":"networking/#physical-ethernet-interfaces","title":"Physical Ethernet Interfaces","text":""},{"location":"networking/#ethernet-settings-and-status","title":"Ethernet Settings and Status","text":"<p>Physical Ethernet interfaces provide low-level settings for speed/duplex as well as packet status and statistics.</p> <p>By default, Ethernet interfaces defaults to auto-negotiating speed/duplex modes, advertising all speed and duplex modes available. In the example below, the switch would by default auto-negotiate speed 1 Gbit/s on port eth1 and 100 Mbit/s on port eth4, as those are the highest speeds supported by H1 and H2 respectively.</p> <p></p> <p>The speed and duplex status for the links can be listed as shown below, assuming the link operational status is 'up'. </p> <pre><code>admin@example:/&gt; show interfaces name eth1\nname                : eth1\nindex               : 2\nmtu                 : 1500\noperational status  : up\nauto-negotiation    : on\nduplex              : full\nspeed               : 1000\nphysical address    : 00:53:00:06:11:01\nipv4 addresses      :\nipv6 addresses      : \nin-octets           : 75581\nout-octets          : 43130\n...\nadmin@example:/&gt; show interfaces name eth4\nname                : eth4\nindex               : 5\nmtu                 : 1500\noperational status  : up\nauto-negotiation    : on\nduplex              : full\nspeed               : 100\nphysical address    : 00:53:00:06:11:04\nipv4 addresses      :\nipv6 addresses      : \nin-octets           : 75439\nout-octets          : 550704\n...\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#configuring-fixed-speed-and-duplex","title":"Configuring fixed speed and duplex","text":"<p>Auto-negotiation of speed/duplex mode is desired in almost all use-cases, but it is possible to disable auto-negotiation and specify a fixed speed and duplex mode.</p> <p>Important</p> <p>When setting a fixed speed and duplex mode, ensure both sides of the link have matching configuration.  If speed does not match, the link will not come up.  If duplex mode does not match, the result is reported collisions and/or bad throughput.</p> <p>The example below configures port eth3 to fixed speed 100 Mbit/s half-duplex mode. </p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth3 ethernet\nadmin@example:/config/interface/eth3/ethernet/&gt; set speed 0.1\nadmin@example:/config/interface/eth3/ethernet/&gt; set duplex half\nadmin@example:/config/interface/eth3/ethernet/&gt; set auto-negotiation enable false\nadmin@example:/config/interface/eth3/ethernet/&gt; show\nauto-negotiation {\n  enable false;\n}\nduplex half;\nspeed 0.1;\nadmin@example:/config/interface/eth3/ethernet/&gt; leave\nadmin@example:/&gt; \n</code></pre> <p>Speed metric is in Gbit/s.  Auto-negotiation needs to be disabled in order for fixed speed/duplex to apply. Only speeds <code>0.1</code>(100 Mbit/s) and <code>0.01</code> (10 Mbit/s) can be specified. 1 Gbit/s and higher speeds require auto-negotiation to be enabled.</p>"},{"location":"networking/#ethernet-statistics","title":"Ethernet statistics","text":"<p>Ethernet packet statistics<sup>6</sup> can be listed as shown below.</p> <pre><code>admin@example:/&gt; show interfaces name eth1\nname                : eth1\nindex               : 2\nmtu                 : 1500\noperational status  : up\nauto-negotiation    : on\nduplex              : full\nspeed               : 1000\nphysical address    : 00:53:00:06:11:0a\nipv4 addresses      :\nipv6 addresses      : \nin-octets           : 75581\nout-octets          : 43130\n\neth-in-frames                : 434\neth-in-multicast-frames      : 296\neth-in-broadcast-frames      : 138\neth-in-error-fcs-frames      : 0\neth-in-error-oversize-frames : 0\neth-out-frames               : 310\neth-out-multicast-frames     : 310\neth-out-broadcast-frames     : 0\neth-out-good-octets          : 76821\neth-in-good-octets           : 60598\nadmin@example:/&gt; \n</code></pre>"},{"location":"networking/#veth-pairs","title":"VETH Pairs","text":"<p>A Virtual Ethernet (VETH) pair is basically a virtual Ethernet cable.  A cable can be \"plugged in\" to a bridge and the other end can be given to a container, or plugged into another bridge.</p> <p>The latter example is useful if you have multiple bridges in the system with different properties (VLAN filtering, IEEE group forwarding, etc.), but still want some way of communicating between these domains.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface veth0a\nadmin@example:/config/interface/veth0a/&gt; set veth peer veth0b\nadmin@example:/config/interface/veth0a/&gt; end\nadmin@example:/config/&gt; diff\ninterfaces {\n+  interface veth0a {\n+    type veth;\n+    veth {\n+      peer veth0b;\n+    }\n+  }\n+  interface veth0b {\n+    type veth;\n+    veth {\n+      peer veth0a;\n+    }\n+  }\n}\nadmin@example:/config/&gt;\n</code></pre> <p>Tip</p> <p>This is another example of the automatic inference of the interface type from the name.  Any name can be used, but then you have to set the interface type to <code>veth</code> manually.</p>"},{"location":"networking/#management-plane","title":"Management Plane","text":"<p>This section details IP Addresses And Other Per-Interface IP settings.</p> <p>Infix support several network interface types, each can be assigned one or more IP addresses, both IPv4 and IPv6 are supported.  (There is no concept of a \"primary\" address.)</p> <p></p>"},{"location":"networking/#ipv4-address-assignment","title":"IPv4 Address Assignment","text":"<p>Multiple address assignment methods are available:</p> Type Yang Model Description static ietf-ip Static assignment of IPv4 address, e.g., 10.0.1.1/24 link-local infix-ip Auto-assignment of IPv4 address in 169.254.x.x/16 range dhcp infix-dhcp-client Assignment of IPv4 address by DHCP server, e.g., 10.0.1.1/24 <p>Note</p> <p>The DHCP address method is only available for LAN interfaces (Ethernet, virtual Ethernet (veth), bridge, link aggregates, etc.)</p> <p>Supported DHCP (request) options, configurability (Cfg) and defaults, are listed below.  Configurable options can be disabled on a per client interface basis, some options, like <code>clientid</code> and option 81, are possible to set the value of as well.</p> Opt Name Cfg Description 1 <code>netmask</code> No Request IP address and netmask 3 <code>router</code> Yes Default route(s), see also option 121 and 249 6 <code>dns-server</code> Yes DNS server(s), static ones take precedence 12 <code>hostname</code> Yes DHCP cannot set hostname, only for informing server 15 <code>domain</code> Yes Default domain name, for name resolution 28 <code>broadcast</code> Yes Broadcast address, calculated if disabled 42 <code>ntp-server</code> Yes NTP server(s), static ones take precedence 50 <code>address</code> Yes Request (previously cached) address 61 <code>client-id</code> Yes Default MAC address (and option 12) 81 <code>fqdn</code> Yes Similar to option 12, request FQDN update in DNS 119 <code>search</code> Yes Request domain search list 121 <code>classless-static-route</code> Yes Classless static routes 249 <code>ms-classless-static-route</code> Yes Microsoft static route, same as option 121 <p>Default: <code>router</code>, <code>dns-server</code>, <code>domain</code>, <code>broadcast</code>, <code>ntp-server</code>, <code>search</code>,              <code>address</code>, <code>classless-static-route</code>, <code>ms-classless-static-route</code></p> <p>When configuring a DHCP client, ensure that the NTP client is enabled for the <code>ntp-server</code> DHCP option to be processed correctly.  If the NTP client is not enabled, any NTP servers provided by the DHCP server will be ignored. For details on how to enable the NTP client, see the NTP Client Configuration section.</p> <p>Important</p> <p>Per RFC3442, if the DHCP server returns both a Classless Static Routes option (121) and Router option (3), the DHCP client must ignore the latter.</p>"},{"location":"networking/#ipv6-address-assignment","title":"IPv6 Address Assignment","text":"<p>Multiple address assignment methods are available:</p> Type Yang Model Description static ietf-ip Static assignment of IPv6 address, e.g., 2001:db8:0:1::1/64 link-local ietf-ip<sup>2</sup> (RFC4862) Auto-configured link-local IPv6 address (fe80::0 prefix + interface identifier, e.g., fe80::ccd2:82ff:fe52:728b/64) global auto-conf ietf-ip (RFC4862) Auto-configured (stateless) global IPv6 address (prefix from router + interface identifier, e.g., 2001:db8:0:1:ccd2:82ff:fe52:728b/64 <p>Both for link-local and global auto-configuration, it is possible to auto-configure using a random suffix instead of the interface identifier.</p>"},{"location":"networking/#examples","title":"Examples","text":"<pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>To illustrate IP address configuration, the examples below uses a switch with a single Ethernet interface (eth0) and a loopback interface (lo). As shown above, these examples assume eth0 has an IPv6 link-local address and lo has static IPv4 and IPv6 addresses by default.</p>"},{"location":"networking/#static-and-link-local-ipv4-addresses","title":"Static and link-local IPv4 addresses","text":"<pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth0 ipv4\nadmin@example:/config/interface/eth0/ipv4/&gt; set address 10.0.1.1 prefix-length 24\nadmin@example:/config/interface/eth0/ipv4/&gt; set autoconf enabled true\nadmin@example:/config/interface/eth0/ipv4/&gt; diff\n+interfaces {\n+  interface eth0 {\n+    ipv4 {\n+      address 10.0.1.1 {\n+        prefix-length 24;\n+      }\n+      autoconf {\n+        enabled true;\n+      }\n+    }\n+  }\n+}\nadmin@example:/config/interface/eth0/ipv4/&gt; leave\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv4                   169.254.1.3/16 (random)\n                ipv4                   10.0.1.1/24 (static)\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>As shown, the link-local IPv4 address is configured with <code>set autconf enabled true</code>.  The resulting address (169.254.1.3/16) is of type random (ietf-ip.yang).</p> <p>The IPv4LL client also supports a <code>request-address</code> setting which can be used to \"seed\" the client's starting address.  If the address is free it will be used, otherwise it falls back to the default algorithm.</p> <pre><code>admin@example:/config/interface/eth0/ipv4/&gt; set autoconf request-address 169.254.1.2\n</code></pre>"},{"location":"networking/#use-of-dhcp-for-ipv4-address-assignment","title":"Use of DHCP for IPv4 address assignment","text":"<pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit dhcp-client\nadmin@example:/config/dhcp-client/&gt; set client-if eth0\nadmin@example:/config/dhcp-client/&gt; leave\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv4                   10.1.2.100/24 (dhcp)\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>The resulting address (10.1.2.100/24) is of type dhcp.</p>"},{"location":"networking/#disabling-ipv6-link-local-addresses","title":"Disabling IPv6 link-local address(es)","text":"<p>The (only) way to disable IPv6 link-local addresses is by disabling IPv6 on the interface.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth0 ipv6\nadmin@example:/config/interface/eth0/ipv6/&gt; set enabled false\nadmin@example:/config/interface/eth0/ipv6/&gt; leave\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#static-ipv6-address","title":"Static IPv6 address","text":"<pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth0 ipv6\nadmin@example:/config/interface/eth0/ipv6/&gt; set address 2001:db8::1 prefix-length 64\nadmin@example:/config/interface/eth0/ipv6/&gt; leave\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv6                   2001:db8::1/64 (static)\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#stateless-auto-configuration-of-global-ipv6-address","title":"Stateless Auto-configuration of Global IPv6 Address","text":"<p>Stateless address auto-configuration of global addresses is enabled by default. The address is formed by concatenating the network prefix advertised by the router (here 2001:db8:0:1::0/64) and the interface identifier.  The resulting address is of type link-layer, as it is formed based on the interface identifier (ietf-ip.yang).</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv6                   2001:db8:0:1:0:ff:fe00:0/64 (link-layer)\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>Disabling auto-configuration of global IPv6 addresses can be done as shown below.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth0 ipv6\nadmin@example:/config/interface/eth0/ipv6/&gt; set autoconf create-global-addresses false\nadmin@example:/config/interface/eth0/ipv6/&gt; leave\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#random-link-identifiers-for-ipv6-stateless-autoconfiguration","title":"Random Link Identifiers for IPv6 Stateless Autoconfiguration","text":"<p>By default, the auto-configured link-local and global IPv6 addresses are formed from a link-identifier based on the MAC address.</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv6                   2001:db8:0:1:0:ff:fe00:0/64 (link-layer)\n                ipv6                   fe80::ff:fe00:0/64 (link-layer)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>To avoid revealing identity information in the IPv6 address, it is possible to specify use of a random identifier (ietf-ip.yang and RFC8981).</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface eth0 ipv6\nadmin@example:/config/interface/eth0/ipv6/&gt; set autoconf create-temporary-addresses true\nadmin@example:/config/interface/eth0/ipv6/&gt; leave\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\neth0            ethernet   UP          02:00:00:00:00:00\n                ipv6                   2001:db8:0:1:b705:8374:638e:74a8/64 (random)\n                ipv6                   fe80::ad3d:b274:885a:9ffb/64 (random)\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>Both the link-local address (fe80::) and the global address (2001:) have changed type to random.</p>"},{"location":"networking/#ipv4-forwarding","title":"IPv4 forwarding","text":"<p>To be able to route (static or dynamic) on the interface it is required to enable forwarding. This setting controls if packets received on this interface can be forwarded.</p> <pre><code>admin@example:/config/&gt; edit interface eth0\nadmin@example:/config/interface/eth0/&gt; set ipv4 forwarding\nadmin@example:/config/interface/eth0/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#ipv6-forwarding","title":"IPv6 forwarding","text":"<p>Due to how the Linux kernel manages IPv6 forwarding, we can not fully control it per interface via this setting like how IPv4 works.  Instead, IPv6 forwarding is globally enabled when at least one interface enable forwarding, otherwise it is disabled.</p> <p>The following table shows the system IPv6 features that the <code>forwarding</code> setting control when it is Enabled or *Disabled:</p> IPv6 Feature Enabled Disabled IsRouter set in Neighbour Advertisements Yes No Transmit Router Solicitations No Yes Router Advertisements are ignored Yes Yes Accept Redirects No Yes <pre><code>admin@example:/config/&gt; edit interface eth0\nadmin@example:/config/interface/eth0/&gt; set ipv6 forwarding\nadmin@example:/config/interface/eth0/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#routing-support","title":"Routing support","text":"<p>Currently supported YANG models:</p> YANG Model Description ietf-routing Base model for all other models ietf-ipv4-unicast-routing Static IPv4 unicast routing ietf-ipv6-unicast-routing Static IPv6 unicast routing ietf-ospf OSPF routing infix-routing Infix deviations and extensions <p>The base model, ietf-routing, is where all the other models hook in.  It is used to set configuration and read operational status (RIB tables) in the other models.</p> <p>Note</p> <p>The standard IETF routing models allows multiple instances, but Infix currently only support one instance per routing protocol!  In the examples presented here, the instance name <code>default</code> is used.</p>"},{"location":"networking/#ipv4-static-routes","title":"IPv4 Static routes","text":"<p>The standard IETF model for static routes reside under the <code>static</code> control plane protocol.  For our examples we use the instance name <code>default</code>, you can use any name.</p> <p>For a route with destination 192.168.200.0/24 via 192.168.1.1:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit routing control-plane-protocol static name default\nadmin@example:/config/routing/control-plane-protocol/static/name/default/&gt; set ipv4 route 192.168.200.0/24 next-hop next-hop-address 192.168.1.1\nadmin@example:/config/routing/control-plane-protocol/static/name/default/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>For a \"floating\" static route with destination 10.0.0.0/16 via a backup router 192.168.1.1, using the highest possible distance:</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit routing control-plane-protocol static name default\nadmin@example:/config/routing/control-plane-protocol/static/name/default/&gt; set ipv4 route 10.0.0.0/16 next-hop next-hop-address 192.168.1.1 route-preference 254\nadmin@example:/config/routing/control-plane-protocol/static/name/default/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Tip</p> <p>Remember to enable IPv4 forwarding for the interfaces you want to route between.</p>"},{"location":"networking/#ipv6-static-routes","title":"IPv6 Static routes","text":"<pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit routing control-plane-protocol static name default\nadmin@example:/config/routing/control-plane-protocol/static/name/default/&gt; set ipv6 route 2001:db8:3c4d:200::/64 next-hop next-hop-address 2001:db8:3c4d:1::1\nadmin@example:/config/routing/control-plane-protocol/static/name/default/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#ospfv2-routing","title":"OSPFv2 Routing","text":"<p>The system supports OSPF dynamic routing for IPv4, i.e., OSPFv2.  To enable OSPF and set one active interface in area 0:</p> <pre><code>admin@example:/config/&gt; edit routing control-plane-protocol ospfv2 name default\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; set ospf area 0.0.0.0 interface e0 enabled\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Tip</p> <p>Remember to enable IPv4 forwarding for all the interfaces you want to route between.</p>"},{"location":"networking/#ospf-area-types","title":"OSPF area types","text":"<p>In addition to regular OSPF areas, area types NSSA and Stub are also supported.  To configure an NSSA area with summary routes:</p> <pre><code>admin@example:/config/&gt; edit routing control-plane-protocol ospfv2 name default\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; set ospf area 0.0.0.1 area-type nssa-area\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; set ospf area 0.0.0.1 summary true\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#bidirectional-forwarding-detection-bfd","title":"Bidirectional Forwarding Detection (BFD)","text":"<p>It is possible to enable BFD per OSPF interface to speed up detection of link loss.</p> <pre><code>admin@example:/config/&gt; edit routing control-plane-protocol ospfv2 name default\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/&gt; set area 0.0.0.0 interface e0 bfd enabled true\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#ospf-interface-settings","title":"OSPF interface settings","text":"<p>We have already seen how to enable OSPF per interface (enabled true) and BFD for OSPF per interface (bfd enabled true).  These and other OSPF interface settings are done in context of an OSFP area, e.g., area 0.0.0.0.  Available commands can be listed using the <code>?</code> mark.</p> <pre><code>admin@example:/config/routing/control-plane-protocol/ospfv2/name/default/&gt; edit ospf area 0.0.0.0\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/area/0.0.0.0/&gt; edit interface e0\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/area/0.0.0.0/interface/e0/&gt; set ?\n  bfd                  BFD interface configuration.\n  cost                 Interface's cost.\n  dead-interval        Interval after which a neighbor is declared down\n  enabled              Enables/disables the OSPF protocol on the interface.\n  hello-interval       Interval between Hello packets (seconds).  It must\n  interface-type       Interface type.\n  passive              Enables/disables a passive interface.  A passive\n  retransmit-interval  Interval between retransmitting unacknowledged Link\n  transmit-delay       Estimated time needed to transmit Link State Update\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/area/0.0.0.0/interface/e0/&gt; set\n</code></pre> <p>For example, setting the OSPF interface type to point-to-point for an Ethernet interface can be done as follows.</p> <pre><code>admin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/area/0.0.0.0/interface/e0/&gt; set interface-type point-to-point\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/area/0.0.0.0/interface/e0/&gt;\n</code></pre>"},{"location":"networking/#ospf-global-settings","title":"OSPF global settings","text":"<p>In addition to area and interface specific settings, OSPF provides global settings for route redistribution and OSPF router identifier.</p> <pre><code>admin@example:/config/&gt; edit routing control-plane-protocol ospfv2 name default ospf\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/&gt; set ?\n  area                     List of OSPF areas.\n  default-route-advertise  Distribute default route to network\n  explicit-router-id       Defined in RFC 2328.  A 32-bit number\n  redistribute             Redistribute protocols into OSPF\nadmin@example:/config/routing/control-plane-protocol/ospfv2/name/default/ospf/&gt; set\n</code></pre> <ul> <li>Explicit router ID: By default the router will pick an IP address   from one of its OSPF interfaces as OSPF router ID. An explicit ID is   used to get a deterministic behavior, e.g., <code>set explicit-router-id   1.1.1.1</code>.</li> <li>Redistribution: <code>set redistribute static</code> and <code>set redistribute connected</code>   can be used to include static or connected routes into the OSPF routing   domain. These routes are redistributed as external type-2 (E2)   routes.</li> <li>Advertising default route: An OSPF router can be made to distribute   a default route into the OSPF domain by command <code>set   default-route-advertise enabled</code>. This route is distributed as long   as the router itself has an active default route in its routing   table. By adding command <code>set default-route-advertise always</code> the   router will distribute a default route even when it lacks a default   route. The default route will be distributed as an external type-2   (E2) route.</li> </ul>"},{"location":"networking/#debug-ospfv2","title":"Debug OSPFv2","text":"<p>Using NETCONF and the YANG model ietf-routing it is possible to read the OSPF routing table, neighbors and more, that may be useful for debugging the OSPFv2 setup. The CLI has various OSPF status commands such as <code>show ospf neighbor</code>, <code>show ospf interface</code> and <code>show ospf routes</code>.</p> <pre><code>admin@example:/&gt; show ospf neighbor\n\nNeighbor ID     Pri State           Up Time         Dead Time Address         Interface                        RXmtL RqstL DBsmL\n10.1.1.2          1 Full/-          3h46m59s          30.177s 10.1.1.2        e0:10.1.1.1                          0     0     0\n10.1.1.3          1 Full/-          3h46m55s          34.665s 10.1.1.3        e1:10.1.1.1                          0     0     0\n\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#view-routing-table","title":"View routing table","text":"<p>The routing table can be inspected from the operational datastore, XPath <code>/routing/ribs</code>, using sysrepocfg, NETCONF/RESTCONF, or using the CLI.</p>"},{"location":"networking/#ipv4-routing-table","title":"IPv4 routing table","text":"<p>This CLI example shows the IPv4 routing table with a few connected routes and some routes learned from OSPF.  See the next section for an explanation of route preferences (PREF).</p> <p>The <code>&gt;</code> at the start of a line marks a selected route (in the IETF YANG model referred to as active), if there are more than one route with the same destination the <code>*</code> marks the next-hop used and installed in the kernel FIB (the YANG model refers to this as installed).</p> <pre><code>admin@example:/&gt; show ip route\n   DESTINATION            PREF NEXT-HOP         PROTO     UPTIME\n&gt;* 0.0.0.0/0             110/2 10.0.23.1        ospfv2   4h2m43s\n&gt;* 10.0.0.1/32        110/4000 10.0.13.1        ospfv2   4h2m43s\n   10.0.0.3/32           110/0 lo               ospfv2   4h2m57s\n&gt;* 10.0.0.3/32             0/0 lo               direct   4h2m58s\n   10.0.13.0/30       110/2000 e5               ospfv2   4h2m57s\n&gt;* 10.0.13.0/30            0/0 e5               direct   4h2m58s\n   10.0.23.0/30          110/1 e6               ospfv2   4h2m57s\n&gt;* 10.0.23.0/30            0/0 e6               direct   4h2m58s\n   192.168.3.0/24        110/1 e2               ospfv2   4h2m57s\n&gt;* 192.168.3.0/24          0/0 e2               direct   4h2m58s\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#ipv6-routing-table","title":"IPv6 routing table","text":"<p>This CLI example show the IPv6 routing table.</p> <pre><code>admin@example:/&gt; show ipv6 route\n   DESTINATION                      PREF NEXT-HOP              PROTO     UPTIME\n&gt;* ::/0                              1/0 2001:db8:3c4d:50::1   static   0h1m20s\n&gt;* 2001:db8:3c4d:50::/64             0/0 e6                    direct   0h1m20s\n&gt;* 2001:db8:3c4d:200::1/128          0/0 lo                    direct   0h1m20s\n * fe80::/64                         0/0 e7                    direct   0h1m20s\n * fe80::/64                         0/0 e6                    direct   0h1m20s\n * fe80::/64                         0/0 e5                    direct   0h1m20s\n * fe80::/64                         0/0 e4                    direct   0h1m20s\n * fe80::/64                         0/0 e3                    direct   0h1m20s\n * fe80::/64                         0/0 e2                    direct   0h1m20s\n&gt;* fe80::/64                         0/0 e1                    direct   0h1m20s\nadmin@example:/&gt;\n</code></pre>"},{"location":"networking/#route-preference","title":"Route Preference","text":"<p>The operating system leverages FRRouting (Frr) as routing engine for both static and dynamic routing.  Even routes injected from a DHCP client, and IPv4 link-local (IPv4) routes, are injected into Frr to let it weigh all routes before installing them into the kernel routing table (sometimes referred to as FIB).</p> <p>Routes have different weights made up from a distance and a metric. The kernel routing table only talks about metric, which unfortunately is not the same -- this is one of the reasons why the term route preference is used instead.  It is recommended to use the CLI, or any of the other previously mentioned YANG based front-ends, to inspect the routing table.</p> <p>Default distances used (lower numeric value wins):</p> Distance Protocol 0 Kernel routes, i.e., connected routes 1 Static routes 5 DHCP routes 110 OSPF 254 IPv4LL (ZeroConf) device routes 255 Route will not be used or redistributed <p>Hence, a route learned from OSPF may be overridden by a static route set locally.  By default, even a route to the same destination, but with a different next-hop, learned from a DHCP server wins over an OSPF route.</p> <p>The distance used for static routes and DHCP routes can be changed by setting a different routing preference value.</p> <p>Note</p> <p>The kernel metric is an unsigned 32-bit value, which is read by Frr as (upper) 8 bits distance and 24 bits metric.  But it does not write it back to the kernel FIB this way, only selected routes are candidates to be installed in the FIB by Frr.</p>"},{"location":"networking/#source-protocol","title":"Source protocol","text":"<p>The source protocol describes the origin of the route.</p> Protocol Description kernel Added when setting a subnet address on an interface static User created, learned from DHCP, or IPv4LL ospfv2 Routes learned from OSPFv2 <p>The YANG model ietf-routing support multiple ribs but only two are currently supported, namely <code>ipv4</code> and <code>ipv6</code>.</p> <ol> <li> <p><code>(source MAC XOR destination MAC XOR EtherType) MODULO num_links</code> \u21a9</p> </li> <li> <p>Link-local IPv6 addresses are implicitly enabled when enabling IPv6.  IPv6 can be enabled/disabled per interface in the ietf-ip YANG model.\u00a0\u21a9</p> </li> <li> <p>For example, IPv4 groups are mapped to MAC multicast addresses by mapping the low-order 23-bits of the IP address in the low-order 23 bits of the Ethernet address 01:00:5E:00:00:00.  Meaning, more than one IP multicast group maps to the same MAC multicast group.\u00a0\u21a9</p> </li> <li> <p>A YANG deviation was previously used to make it possible to set <code>phys-address</code>, but this has been replaced with the more flexible <code>custom-phys-address</code>.\u00a0\u21a9</p> </li> <li> <p>MAC bridges on Marvell Linkstreet devices are currently limited to a single MAC database, this may be a problem if the same MAC address appears in different MAC bridges.\u00a0\u21a9</p> </li> <li> <p>Ethernet counters are described in ieee802-ethernet-interface.yang and infix-ethernet-interface.yang.  There is a dedicated document on Ethernet Counters that provide additional details on the statistics support.\u00a0\u21a9</p> </li> </ol>"},{"location":"override-package/","title":"Package Override","text":"<p>This guide demonstrates how the <code>local.mk</code> file is utilized to override a Buildroot package, which can be very useful when fixing bugs, adding features, or evaluating new releases of packages.  As an example we use <code>tcpdump</code> to illustrate this process.</p> <p>Tip</p> <p>For a comprehensive guide to utilizing Buildroot during development, including the <code>&lt;pkg&gt;_OVERRIDE_SRCDIR</code> mechanism, shown below, please see Using Buildroot during development in the official docs.</p>"},{"location":"override-package/#setup","title":"Setup","text":"<p>Since the <code>output/</code> directory is often wiped for rebuilds, make sure you keep the file <code>local.mk</code> in the top directory and only symlink it to your build directory:</p> <pre><code>~$ cd infix/\n~/infix(main)$ touch local.mk\n~/infix/output(main)$ ln -s ../local.mk .\n~/infix/output(main)$ cd ..\n</code></pre>"},{"location":"override-package/#override","title":"Override","text":"<p>Now edit the file:</p> <pre><code>~/infix(main)$ editor local.mk\n</code></pre> <p>Add an override for <code>tcpdump</code>.  The file is a Makefile snippet so you can add a lot of things.  Comment out lines with the UNIX comment <code>#</code> character if needed:</p> <pre><code>TCPDUMP_OVERRIDE_SRCDIR = /path/to/tcpdump/repo\n</code></pre>"},{"location":"override-package/#building","title":"Building","text":"<p>The execution of <code>make tcpdump-rebuild all</code> triggers a process where Buildroot synchronizes the tcpdump source code from the specified override directory to <code>output/build/tcpdump-custom</code>, followed by the rebuilding of the entire project.</p> <pre><code>~/infix$(main)$ make tcpdump-rebuild all\n</code></pre> <p>Buildroot follows a process of downloading and processing tarballs: extraction, configuration, compilation, and installation.  The source for each package is extracted to a temporary build directory:</p> <pre><code>output/build/&lt;package&gt;-&lt;version&gt;    # e.g., tcpdump-4.99.4\n</code></pre> <p>Let's have a look at what we got:</p> <pre><code>~/infix$(main)$ ll /output/build/ | grep tcpdump\ndrwxr-xr-x   7 group user 20480 Nov 10 18:26 tcpdump-4.99.4/\ndrwxr-xr-x   7 group user 12288 Nov 10 18:28 tcpdump-custom/\n</code></pre> <p>As long as your local override is in place, Buildroot will use your custom version.</p> <p>Note</p> <p>Remember, the build directory is ephemeral, so be careful to change any of the files therein.  It can be useful though during debugging, but just make sure to learn the difference between the various Buildroot commands to build, clean, reconfigure, etc.</p>"},{"location":"qos/","title":"Quality of Service","text":"<p>On occasion, most networks will experience congestion due to some extraordinary load being placed upon it. If the load is transient, switches and routers may be able to absorb such bursts of traffic by queuing packets in internal memories. However, if the load is sustained over long periods of time, queues will fill up and packets will start to be dropped. When such situations arise, it is the job of the network's Quality of Service (QoS) policy to define which packets to drop and which ones to prioritize, such that critical services remain operational.</p>"},{"location":"qos/#hardware-forwarded-traffic","title":"Hardware Forwarded Traffic","text":"<p>The default QoS policy for flows which are offloaded to a switching ASIC is defined by the hardware defaults of the device in question.</p>"},{"location":"qos/#marvell-linkstreet","title":"Marvell LinkStreet","text":"<p>This family of devices, sometimes also referred to as SOHO, are managed by the <code>mv88e6xxx</code> driver in the Linux kernel. While older chips in this family where limited to 4 output queues per port, this documentation is only valid for newer generations with 8 output queues per port.</p> <p></p> <p>The picture illustrates packets having their priority determined at ingress, here interface e1 and e3. In this example, both packets are forwarded to the same outgoing interface (e2), subject to output queueing. The sections below provides more information on these topics. </p>"},{"location":"qos/#default-policy","title":"Default Policy","text":""},{"location":"qos/#queueing","title":"Queueing","text":"<p>Both layer 2 (VLAN PCP) and layer 3 (IP DSCP) priority marks are considered when selecting the output queue of an incoming frame. PCP to queue mapping is done 1:1. For IP packets, the 3 most significant bits of the DSCP is used to select the queue:</p> PCP DSCP \u21d2 Queue Weight 0 0-7 \u21d2 0 1 1 8-15 \u21d2 1 2 2 16-23 \u21d2 2 3 3 24-31 \u21d2 3 6 4 32-39 \u21d2 4 12 5 40-47 \u21d2 5 17 6 48-55 \u21d2 6 25 7 56-63 \u21d2 7 33 <p>For packets containing both a VLAN tag and an IP header, PCP priority takes precedence over DSCP priority. In cases where neither are available, packets are always assigned to queue 0.</p> <p>Each port's set of 8 egress queues operate on a Weighted Round Robin (WRR) schedule, using the weights listed in the table above. The sum of all weights adds up to 99, meaning that the weight of any given queue is roughly equivalent to the percentage of the available bandwidth reserved for it.</p>"},{"location":"qos/#marking","title":"Marking","text":"<p>Any priority marks available on ingress are left unmodified when the frame egresses an output port. In the case when an IP packet ingresses without a VLAN tag, and is to egress with a VLAN tag, its PCP is set to the 3 most significant bits of it. If no priority information is available in the frame on ingress (i.e. untagged non-IP), then packets will egress out of tagged ports with PCP set to 0.</p>"},{"location":"qos/#software-forwarded-traffic","title":"Software Forwarded Traffic","text":"<p>For packets which are processed by a CPU, i.e. typically routed traffic, and bridged traffic between interfaces that do not belong to the same hardware switching domain, an nftables container can be used to define a QoS policy.</p> <p>For VLAN interfaces, Infix provides support for mapping the Priority Code Point (PCP) to internal priority on ingress, and the reverse on egress. </p> <p></p> <p>These <code>ingress-qos</code> and <code>egress-qos</code> settings are done per VLAN, both defaulting to '0'. The example below shows how to keep the PCP priority  for packets being routed between two VLAN interfaces.</p> <pre><code>admin@example:/config/&gt; edit interface e1.10\nadmin@example:/config/interface/e1.10/&gt; set vlan ingress-qos priority from-pcp \nadmin@example:/config/interface/e1.10/&gt; up\nadmin@example:/config/&gt; edit interface e1.20\nadmin@example:/config/interface/e1.20/&gt; set vlan egress-qos pcp from-priority \nadmin@example:/config/interface/e1.20/&gt; leave\nadmin@example:/&gt; \n</code></pre>"},{"location":"qos/#a-complex-example","title":"A complex example","text":"<p>The picture below shows a packet flow being subject both to software forwarding and hardware offloading.</p> <p></p>"},{"location":"scripting-prod/","title":"Scripting for Production Tests","text":"<p>This document shows how to set up and remotely script devices with a focus on production testing.</p>"},{"location":"scripting-prod/#vlan-snake","title":"VLAN Snake","text":"<p>As part of production tests, verification of Ethernet ports is usually expected.  A common way for devices with multiple bridged Ethernet ports is to connect a test PC to two ports and send a ping traversing all ports.  This can be achieved by using VLANs, on the switch, as described in this section.  The resulting configuration file can be applied to the running configuration of the produced unit, e.g, use config file restore as described previously.</p> <p>In this example we assume a 10 port switch, with ports e1-e10.  The following VLAN configuration and cable connections will be used:</p> VLAN &amp; Ports Connect VLAN 10: e1 &amp; e2 e2 &lt;=&gt; e3 VLAN 20: e3 &amp; e4 e4 &lt;=&gt; e5 VLAN 30: e5 &amp; e6 e6 &lt;=&gt; e7 VLAN 40: e7 &amp; e8 e8 &lt;=&gt; e9 VLAN 50: e9 &amp; e10 <p>The test PC is connected to e1 and e10 via different interfaces (alternatively, two different PCs are used).</p> <p>Tip</p> <p>Configuration here is done via console. When configuring remotely over SSH, remember to keep one IP address (the one used for the SSH connection)! I.e., set a static IP address first, then perform the VLAN configuration step.</p>"},{"location":"scripting-prod/#configuration-at-start","title":"Configuration at Start","text":"<p>Starting out, we assume a configuration where all ports are network interfaces (possibly with IPv6 enabled).</p> <pre><code>admin@example:/&gt; show interfaces\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\ne1              ethernet   LOWER-DOWN  00:53:00:06:11:01\ne2              ethernet   LOWER-DOWN  00:53:00:06:11:02\ne3              ethernet   LOWER-DOWN  00:53:00:06:11:03\ne4              ethernet   LOWER-DOWN  00:53:00:06:11:04\ne5              ethernet   LOWER-DOWN  00:53:00:06:11:05\ne6              ethernet   LOWER-DOWN  00:53:00:06:11:06\ne7              ethernet   LOWER-DOWN  00:53:00:06:11:07\ne8              ethernet   LOWER-DOWN  00:53:00:06:11:08\ne9              ethernet   LOWER-DOWN  00:53:00:06:11:09\ne10             ethernet   UP          00:53:00:06:11:0a\n                ipv6                   fe80::0053:00ff:fe06:110a/64 (link-layer)\nadmin@example:/&gt;\n</code></pre>"},{"location":"scripting-prod/#creating-bridge-and-adding-ports","title":"Creating Bridge and Adding Ports","text":"<p>The following example creates a bridge and adds all Ethernet ports to it.  On a device with layer-2 offloading (switch fabric), this sets all ports in the same VLAN.  The next section sets up VLAN isolation.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface br0\nadmin@example:/config/interface/br0/&gt; end\nadmin@example:/config/&gt; set interface e1 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e2 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e3 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e4 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e5 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e6 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e7 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e8 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e9 bridge-port bridge br0\nadmin@example:/config/&gt; set interface e10 bridge-port bridge br0\nadmin@example:/config/&gt;\n</code></pre> <p>The interface status can be viewed using <code>show interfaces</code> after leaving configuration context.  When configuring via SSH, first assign an IP address to <code>br0</code> before leaving configuration context, e.g.</p> <pre><code>admin@example:/config/&gt; set interface br0 ipv6 enabled\n</code></pre> <p>This enables IPv6 SLAAC, auto-configured address.  Or skip <code>leave</code> and stay in configuration context until you have completed all the device setup, including setting IP address.</p> <pre><code>admin@example:/config/&gt; leave\nadmin@example:/&gt;\nadmin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nbr0             bridge\n\u2502               ethernet   UP          00:53:00:06:11:01\n\u251c e1            bridge     LOWER-DOWN\n\u251c e2            bridge     LOWER-DOWN\n\u251c e3            bridge     LOWER-DOWN\n\u251c e4            bridge     LOWER-DOWN\n\u251c e5            bridge     LOWER-DOWN\n\u251c e6            bridge     LOWER-DOWN\n\u251c e7            bridge     LOWER-DOWN\n\u251c e8            bridge     LOWER-DOWN\n\u251c e9            bridge     LOWER-DOWN\n\u2514 e10           bridge     FORWARDING\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre>"},{"location":"scripting-prod/#assign-vlans-to-ports","title":"Assign VLANs to Ports","text":"<p>Now, configure VLANs as outlined previously: default VID for ingress (PVID), which is done per port, and egress mode (untagged), which is done at the bridge level. See the VLAN bridges section for more information.</p> <pre><code>admin@example:/&gt;\nadmin@example:/&gt; configure\nadmin@example:/config/&gt; set interface e1 bridge-port pvid 10\nadmin@example:/config/&gt; set interface e2 bridge-port pvid 10\nadmin@example:/config/&gt; set interface e3 bridge-port pvid 20\nadmin@example:/config/&gt; set interface e4 bridge-port pvid 20\nadmin@example:/config/&gt; set interface e5 bridge-port pvid 30\nadmin@example:/config/&gt; set interface e6 bridge-port pvid 30\nadmin@example:/config/&gt; set interface e7 bridge-port pvid 40\nadmin@example:/config/&gt; set interface e8 bridge-port pvid 40\nadmin@example:/config/&gt; set interface e9 bridge-port pvid 50\nadmin@example:/config/&gt; set interface e10 bridge-port pvid 50\nadmin@example:/config/&gt; edit interface br0\nadmin@example:/config/interface/br0/&gt; edit bridge vlans\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 10 untagged e1\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 10 untagged e2\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 20 untagged e3\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 20 untagged e4\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 30 untagged e5\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 30 untagged e6\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 40 untagged e7\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 40 untagged e8\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 50 untagged e9\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 50 untagged e10\nadmin@example:/config/interface/br0/bridge/vlans/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Interface status would now should something like the following</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nbr0             bridge\n\u2502               ethernet   UP          00:53:00:06:11:01\n\u251c e1            bridge     LOWER-DOWN  vlan:10u pvid:10\n\u251c e2            bridge     LOWER-DOWN  vlan:10u pvid:10\n\u251c e3            bridge     LOWER-DOWN  vlan:20u pvid:20\n\u251c e4            bridge     LOWER-DOWN  vlan:20u pvid:20\n\u251c e5            bridge     LOWER-DOWN  vlan:30u pvid:30\n\u251c e6            bridge     LOWER-DOWN  vlan:30u pvid:30\n\u251c e7            bridge     LOWER-DOWN  vlan:40u pvid:40\n\u251c e8            bridge     LOWER-DOWN  vlan:40u pvid:40\n\u251c e9            bridge     LOWER-DOWN  vlan:50u pvid:50\n\u2514 e10           bridge     FORWARDING  vlan:50u pvid:50\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre>"},{"location":"scripting-prod/#connect-cables-and-test","title":"Connect Cables and Test","text":"<p>We can now connect the PC to e1 and e10, while the other ports are patched according to above.  We should see link up and FORWARDING on all ports in the bridge.</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nbr0             bridge\n\u2502               ethernet   UP          00:53:00:06:11:01\n\u251c e1            bridge     FORWARDING  vlan:10u pvid:10\n\u251c e2            bridge     FORWARDING  vlan:10u pvid:10\n\u251c e3            bridge     FORWARDING  vlan:20u pvid:20\n\u251c e4            bridge     FORWARDING  vlan:20u pvid:20\n\u251c e5            bridge     FORWARDING  vlan:30u pvid:30\n\u251c e6            bridge     FORWARDING  vlan:30u pvid:30\n\u251c e7            bridge     FORWARDING  vlan:40u pvid:40\n\u251c e8            bridge     FORWARDING  vlan:40u pvid:40\n\u251c e9            bridge     FORWARDING  vlan:50u pvid:50\n\u2514 e10           bridge     FORWARDING  vlan:50u pvid:50\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nadmin@example:/&gt;\n</code></pre> <p>Here we use IPv6 ping all hosts (ff02::1) on PC interface eth1 to check reachability to the other interface of the PC.</p> <p>Tip</p> <p>We recommend using network namespaces (Linux only) on the PC to ensure that traffic is actually sent out to the switch, rather than being looped back internally. Alternatively, use two separate PCs.</p> <pre><code>~ $ ping -L ff02::1%eth1\nPING ff02::1%eth1(ff02::1%eth1) 56 data bytes\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=1 ttl=64 time=0.496 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=2 ttl=64 time=0.514 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=3 ttl=64 time=0.473 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=4 ttl=64 time=0.736 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=5 ttl=64 time=0.563 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=6 ttl=64 time=0.507 ms\n^C\n--- ff02::1%eth1 ping statistics ---\n6 packets transmitted, 6 received, 0% packet loss, time 5108ms\nrtt min/avg/max/mdev = 0.473/0.548/0.736/0.088 ms\n~ $\n</code></pre> <p>We can verify that traffic goes through the switch by disconnecting one of the patch cables, e.g., between e4 and e5</p> <pre><code>~ $ ping -L ff02::1%eth1\nPING ff02::1%eth1(ff02::1%eth1) 56 data bytes\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=1 ttl=64 time=0.510 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=2 ttl=64 time=0.448 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=3 ttl=64 time=0.583 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=4 ttl=64 time=0.515 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=5 ttl=64 time=0.521 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=6 ttl=64 time=0.495 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=7 ttl=64 time=0.743 ms\n... Disconnecting patch cable, thus losing packets\n... and reconnecting again. Connectivity resumes.\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=16 ttl=64 time=0.961 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=17 ttl=64 time=0.513 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=18 ttl=64 time=0.794 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=19 ttl=64 time=0.755 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=20 ttl=64 time=0.779 ms\n^C\n--- ff02::1%eth1 ping statistics ---\n20 packets transmitted, 12 received, 40% packet loss, time 19432ms\nrtt min/avg/max/mdev = 0.448/0.634/0.961/0.156 ms\n~ $\n</code></pre>"},{"location":"scripting-prod/#set-ip-address","title":"Set IP Address","text":"<p>The configuration so far does not provide a means to connect to the switch management via SSH or NETCONF, as the switch has no IP address. The example below shows how to add the switch to VLAN 10 (as used for ports e1 and e2) and enables IPv6.</p> <pre><code>admin@example:/config/&gt; edit interface vlan10\nadmin@example:/config/interface/vlan10/&gt; set vlan lower-layer-if br0\nadmin@example:/config/interface/vlan10/&gt; set ipv6 enabled\nadmin@example:/config/interface/vlan10/&gt; show\ntype vlan;\nipv6 {\n  enabled true;\n}\nvlan {\n  tag-type c-vlan;\n  id 10;\n  lower-layer-if br0;\n}\nadmin@example:/config/interface/vlan10/&gt;\nadmin@example:/config/interface/vlan10/&gt; end\nadmin@example:/config/&gt; edit interface br0 bridge vlans\nadmin@example:/config/interface/br0/bridge/vlans/&gt; set vlan 10 tagged br0\nadmin@example:/config/interface/br0/bridge/vlans/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Interface vlan10 with an auto-configured IPv6 address should appear.</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nbr0             bridge                 vlan:10t\n\u2502               ethernet   UP          00:53:00:06:11:01\n\u251c e1            bridge     FORWARDING  vlan:10u pvid:10\n\u251c e2            bridge     FORWARDING  vlan:10u pvid:10\n\u251c e3            bridge     FORWARDING  vlan:20u pvid:20\n\u251c e4            bridge     FORWARDING  vlan:20u pvid:20\n\u251c e5            bridge     FORWARDING  vlan:30u pvid:30\n\u251c e6            bridge     FORWARDING  vlan:30u pvid:30\n\u251c e7            bridge     FORWARDING  vlan:40u pvid:40\n\u251c e8            bridge     FORWARDING  vlan:40u pvid:40\n\u251c e9            bridge     FORWARDING  vlan:50u pvid:50\n\u2514 e10           bridge     FORWARDING  vlan:50u pvid:50\nlo              ethernet   UP          00:00:00:00:00:00\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\nvlan10          ethernet   UP          00:53:00:06:11:01\n\u2502               ipv6                   fe80::0053:00ff:fe06:1101/64 (link-layer)\n\u2514 br0           ethernet   UP          00:53:00:06:11:01\nadmin@example:/&gt;\n</code></pre> <p>When pinging \"IPv6 all hosts\" from the PC, there should be two responses for every ping, one from the switch and one from the PC attached to e10.</p> <pre><code>~ $ ping -L ff02::1%eth1\nPING ff02::1%eth1(ff02::1%eth1) 56 data bytes\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=1 ttl=64 time=0.508 ms\n64 bytes from fe80::0053:00ff:fe06:1101%eth1: icmp_seq=1 ttl=64 time=0.968 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=2 ttl=64 time=0.866 ms\n64 bytes from fe80::0053:00ff:fe06:1101%eth1: icmp_seq=2 ttl=64 time=0.867 ms\n64 bytes from fe80::0053:00ff:fe06:1101%eth1: icmp_seq=3 ttl=64 time=0.467 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=3 ttl=64 time=0.469 ms\n64 bytes from fe80::488a:a35f:9d41:ac9c%eth1: icmp_seq=4 ttl=64 time=0.452 ms\n64 bytes from fe80::0053:00ff:fe06:1101%eth1: icmp_seq=4 ttl=64 time=0.453 ms\n^C\n--- ff02::1%eth1 ping statistics ---\n4 packets transmitted, 4 received, +4 duplicates, 0% packet loss, time 3031ms\nrtt min/avg/max/mdev = 0.452/0.631/0.968/0.211 ms\n~ $\n</code></pre> <p>It should now be possible to access the switch from the PC via SSH (or NETCONF).</p> <pre><code>~ $ ssh admin@fe80::0053:00ff:fe06:1101%eth1\nadmin@fe80::0053:00ff:fe06:1101%eth1's password:\n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-'\n\nRun the command 'cli' for interactive OAM\n\nadmin@example:~$ exit\n~ $\n</code></pre> <p>See previous sections on backup and restore of the created configuration.</p>"},{"location":"scripting-restconf/","title":"Examples using RESTCONF","text":""},{"location":"scripting-restconf/#factory-reset","title":"Factory Reset","text":"<pre><code>~$ curl -kX POST -u admin:admin \\\n        -H \"Content-Type: application/yang-data+json\" \\\n        https://example.local/restconf/operations/ietf-factory-default:factory-reset\ncurl: (56) OpenSSL SSL_read: error:0A000126:SSL routines::unexpected eof while reading, errno 0\n</code></pre>"},{"location":"scripting-restconf/#system-reboot","title":"System Reboot","text":"<pre><code>~$ curl -kX POST -u admin:admin \\\n        -H \"Content-Type: application/yang-data+json\" \\\n        https://example.local/restconf/operations/ietf-system:system-restart\n</code></pre>"},{"location":"scripting-restconf/#set-date-and-time","title":"Set Date and Time","text":"<p>Here's an example of an RPC that takes input/argument:</p> <pre><code>~$ curl -kX POST -u admin:admin \\\n        -H \"Content-Type: application/yang-data+json\" \\\n        -d '{\"ietf-system:input\": {\"current-datetime\": \"2024-04-17T13:48:02-01:00\"}}' \\\n        https://example.local/restconf/operations/ietf-system:set-current-datetime\n</code></pre> <p>You can verify that the changes took by a remote SSH command:</p> <pre><code>~$ ssh admin@example.local 'date'\nWed Apr 17 14:48:12 UTC 2024\n~$\n</code></pre>"},{"location":"scripting-restconf/#read-hostname","title":"Read Hostname","text":"<p>Example of fetching JSON configuration data to stdout:</p> <pre><code>~$ curl -kX GET -u admin:admin \\\n        -H 'Accept: application/yang-data+json' \\\n        https://example.local/restconf/data/ietf-system:system/hostname\n{\n  \"ietf-system:system\": {\n    \"hostname\": \"foo\"\n  }\n}\n</code></pre>"},{"location":"scripting-restconf/#set-hostname","title":"Set Hostname","text":"<p>Example of inline JSON data:</p> <pre><code>~$ curl -kX PATCH -u admin:admin \\\n     -H 'Content-Type: application/yang-data+json' \\\n     -d '{\"ietf-system:system\":{\"hostname\":\"bar\"}}' \\\n     https://example.local/restconf/data/ietf-system:system\n</code></pre>"},{"location":"scripting-restconf/#copy-running-to-startup","title":"Copy Running to Startup","text":"<p>No copy command available yet to copy between datastores, and the Rousette back-end also does not support \"write-through\" to the startup datastore.</p> <p>To save running-config to startup-config, use the following example to fetch running to a local file and then update startup with it:</p> <pre><code>~$ curl -kX GET -u admin:admin -o running-config.json \\\n        -H 'Accept: application/yang-data+json'       \\\n         https://example.local/restconf/ds/ietf-datastores:running\n\n~$ curl -kX PUT -u admin:admin -d @running-config.json \\\n        -H 'Content-Type: application/yang-data+json'  \\\n        https://example.local/restconf/ds/ietf-datastores:startup\n</code></pre>"},{"location":"scripting-sysrepocfg/","title":"Legacy Scripting","text":"<p>Note</p> <p>This method is a legacy \"simple and human-friendly\" way to manage the system.  These days we strongly recommend using RESTCONF instead.</p>"},{"location":"scripting-sysrepocfg/#legacy-scripting","title":"Legacy Scripting","text":"<p>Although not the primary interface for Infix, it is possible to interact with the system using raw sysrepocfg commands.  This way you get to interact directly with the YANG models when logged in to Infix.  Thus, a set config, read config, read status and an RPC can be conducted using <code>sysrepocfg</code> for any supported YANG model.</p> <p>See sysrepocfg for more information.  Examples below will utilize:</p> <ul> <li><code>sysrepocfg -I FILE -fjson -d DATABASE</code> to import/write a JSON   formatted configuration file to the specified database.</li> <li><code>sysrepocfg -E FILE -fjson -d DATABASE</code> to edit/merge JSON formatted   configuration in FILE with the specified database.</li> <li><code>sysrepocfg -R FILE -fjson</code> to execute remote procedure call (RPC)    defined in FILE (JSON formatted).</li> <li><code>sysrepocfg -X -fjson -d DATABASE -x xpath</code> to read configuration or   status from specified database.</li> </ul> <p>For importing (-I) and editing (-E), <code>-d running</code> is typically used in examples below. Specify <code>-d startup</code> to apply changes to startup configuration. Exporting (-X) could operate on configuration (e.g., <code>-d running</code>) or status (<code>-d operational</code>).</p> <p>Some commands require a file as input.  In the examples below we assume it has been transferred to the device in advance, e.g. using <code>scp</code>:</p> <pre><code>~$ cat file.json\n{\n   \"ietf-factory-default:factory-reset\": {\n   }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$\n</code></pre>"},{"location":"scripting-sysrepocfg/#factory-reset","title":"Factory Reset","text":"<pre><code>~$ cat file.json\n{\n   \"ietf-factory-default:factory-reset\": {\n   }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -fjson -R /tmp/file.json'\n^C\n~$\n</code></pre> <p>See Factory Reset for another (simpler) alternative.</p> <p>If it is only wished to copy factory config to running config the following RPC is available</p> <pre><code>~$ cat file.json\n{\n   \"infix-factory-default:factory-default\": {\n   }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -fjson -R /tmp/file.json'\n^C\n~$\n</code></pre>"},{"location":"scripting-sysrepocfg/#system-reboot","title":"System Reboot","text":"<pre><code>~$ cat /tmp/file.json\n{\n   \"ietf-system:system-restart\": {\n   }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -fjson -R /tmp/file.json'\n~$\n</code></pre> <p>See System Reboot for another (simpler) alternative.</p>"},{"location":"scripting-sysrepocfg/#set-date-and-time","title":"Set Date and Time","text":"<pre><code>~$ ssh admin@example.local 'date'\nSun Nov 20 10:20:23 UTC 2005\n~$ cat file.json\n{\n   \"ietf-system:set-current-datetime\": {\n      \"current-datetime\": \"2024-04-17T13:48:02-01:00\"\n   }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -fjson -R /tmp/file.json'\n~$ ssh admin@example.local 'date'\nWed Apr 17 14:48:12 UTC 2024\n~$\n</code></pre> <p>See Set Date and Time for another (simpler) alternative.</p>"},{"location":"scripting-sysrepocfg/#remote-control-of-ethernet-ports","title":"Remote Control of Ethernet Ports","text":"<p>Reading administrative status of interface e0 of running configuration.</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d running -e report-all \\\n       -x \\\"/ietf-interfaces:interfaces/interface[name='e0']/enabled\\\"'\n{\n  \"ietf-interfaces:interfaces\": {\n    \"interface\": [\n      {\n        \"name\": \"e0\",\n        \"enabled\": true\n      }\n    ]\n  }\n}\n~$\n</code></pre> <p>Note</p> <p>Without <code>-e report-all</code> argument the line <code>\"enabled: true</code> would not be shown as <code>true</code> is default.</p> <pre><code>~$ ssh admin@example.local \"sysrepocfg -X -fjson -d running \\\n       -x \\\"/ietf-interfaces:interfaces/interface[name='e0']/enabled\\\"\"\n{\n  \"ietf-interfaces:interfaces\": {\n    \"interface\": [\n      {\n        \"name\": \"e0\"\n      }\n    ]\n  }\n}\n~$\n</code></pre> <p>Setting the administrative status of interface e0 of running configuration.</p> <pre><code>$ cat file.json\n{\n  \"ietf-interfaces:interfaces\": {\n    \"interface\": [\n      {\n        \"name\": \"e0\",\n        \"enabled\": false\n      }\n    ]\n  }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -E /tmp/file.json -fjson -d running'\n~$\n</code></pre>"},{"location":"scripting-sysrepocfg/#enabledisable-dhcpv4-client","title":"Enable/Disable DHCPv4 client","text":"<p>Enabling DHCPv4 client on interface e0, with current default options.</p> <pre><code>~$ cat /tmp/file.json\n{\n  \"infix-dhcp-client:dhcp-client\": {\n    \"enabled\": true,\n    \"client-if\": [\n      {\n        \"if-name\": \"e0\"\n      }\n    ]\n  }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -E /tmp/file.json -fjson -d running'\n~$\n</code></pre> <p>Disabling DHCPv4 client.</p> <pre><code>~$ cat /tmp/file.json\n{\n  \"infix-dhcp-client:dhcp-client\": {\n    \"enabled\": false\n  }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -E /tmp/file.json -fjson -d running'\n~$\n</code></pre> <p>Configuration for client interface e0 remains, but does not apply as DHCPv4 is disabled.</p> <pre><code>admin@example:~$ sysrepocfg -X -fjson -d running -x \"/infix-dhcp-client:dhcp-client\"\n{\n  \"infix-dhcp-client:dhcp-client\": {\n    \"enabled\": false,\n    \"client-if\": [\n      {\n        \"if-name\": \"e0\"\n      }\n    ]\n  }\n}\nadmin@example:~$\n</code></pre> <p>To fully remove the DHCPv4 client configuration or a specific client-if with sysrepocfg, one would need to read out the full configuration, remove relevant parts and read back.</p>"},{"location":"scripting-sysrepocfg/#enabledisable-ipv6","title":"Enable/Disable IPv6","text":"<p>IPv6 is typically enabled on all interfaces by default. The example below shows IPv4 and IPv6 addresses assigned on e0.</p> <pre><code>~$ ssh admin@example.local 'ip addr show dev e0'\n2: e0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 02:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.15/24 scope global proto dhcp e0\n       valid_lft forever preferred_lft forever\n    inet6 fec0::ff:fe00:0/64 scope site dynamic mngtmpaddr proto kernel_ra\n       valid_lft 86380sec preferred_lft 14380sec\n    inet6 fe80::ff:fe00:0/64 scope link proto kernel_ll\n       valid_lft forever preferred_lft forever\n~$\n</code></pre> <p>IPv6 is enabled/disabled per interface. The example below disables IPv6 on interface e0.</p> <pre><code>~$ cat /tmp/file.json\n{\n  \"ietf-interfaces:interfaces\": {\n    \"interface\": [\n      {\n        \"name\": \"e0\",\n        \"ietf-ip:ipv6\": {\n          \"enabled\": false\n        }\n      }\n    ]\n  }\n}\n~$ scp file.json admin@example.local:/tmp/file.json\n~$ ssh admin@example.local 'sysrepocfg -E /tmp/file.json -fjson -d running'\n~$ ssh admin@example.local 'ip addr show dev e0'\n2: e0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 02:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.15/24 scope global proto dhcp e0\n       valid_lft forever preferred_lft forever\n~$\n</code></pre>"},{"location":"scripting-sysrepocfg/#change-a-binary-setting","title":"Change a Binary Setting","text":"<p>A YANG <code>binary</code> type setting is Base64 encoded and requires a little bit more tricks.  We take the opportunity to showcase a shell script helper: <code>/usr/bin/text-editor</code>, which works just like the <code>text-editor</code> command in the CLI, but this one takes an XPath argument to the binary leaf to edit.</p> <p>Stripped down, it looks something like this:</p> <pre><code>if tmp=$(sysrepocfg -G \"$xpath\"); then\n    file=$(mktemp)\n\n    echo \"$tmp\" | base64 -d &gt; \"$file\"\n    if edit \"$file\"; then\n        tmp=$(base64 -w0 &lt; \"$file\")\n        sysrepocfg -S \"$xpath\" -u \"$tmp\"\n    fi\n\n    rm -f \"$file\"\nelse\n    echo \"Failed to retrieve value for $xpath\"\n    exit 1\nfi\n</code></pre> <p>An example container configuration, with an embedded file that is mounted to <code>/var/www/index.html</code> can look like this:</p> <pre><code>  \"infix-containers:containers\": {\n    \"container\": [\n      {\n        \"name\": \"web\",\n        \"image\": \"oci-archive:/lib/oci/curios-httpd-latest.tar.gz\",\n        \"hostname\": \"web\",\n        \"network\": {\n          \"interface\": [\n            {\n              \"name\": \"veth-sys0\"\n            }\n          ]\n        },\n        \"mount\": [\n          {\n            \"name\": \"index.html\",\n            \"content\": \"PCFET0NUWVBFIGh0bWwjibberish.shortened.down==\",\n            \"target\": \"/var/www/index.html\"\n          }\n        ]\n      }\n    ]\n  }\n</code></pre> <p>The command to edit this file, and restart the container with the new contents, look like this:</p> <pre><code>admin@infix:~$ cfg edit \"/infix-containers:containers/container[name='web']/mount[name='index.html']/content\"\n</code></pre>"},{"location":"scripting-sysrepocfg/#backup-configuration","title":"Backup Configuration","text":"<p>Displaying running or startup configuration is possible with <code>sysrepocfg -X</code>, as shown below.</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d running'\n{\n  \"ieee802-dot1ab-lldp:lldp\": {\n    \"infix-lldp:enabled\": true\n...\n~$\n</code></pre> <p>An example for backing up startup configuration from remote PC.</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d startup &gt; /tmp/backup.json'\n~$ scp admin@example.local:/tmp/backup.json .\n~$\n</code></pre> <p>Or possibly skip intermediate storage of file</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d startup' &gt; backup.json\n~$\n</code></pre> <p>A final example is to only use <code>scp</code>. This is simpler, but only works to backup the startup configuration (not running).</p> <pre><code>~$ scp admin@example.local:/cfg/startup-config.cfg backup.json\n~$\n</code></pre>"},{"location":"scripting-sysrepocfg/#restore-configuration","title":"Restore Configuration","text":"<p>To restore a backup configuration to startup, the simplest way is to use <code>scp</code> and reboot as shown below</p> <pre><code>~$ scp admin@example.local:/cfg/startup-config.cfg backup.json\n~$ ssh admin@example.local 'reboot'\nConnection to switch.local closed by remote host.\n~$\n</code></pre> <p>An alternative method to restore a backup configuration is to use the <code>sysrepocfg -I FILE</code> (import) command.</p> <p>The example below imports the backup configuration to startup, and reboots the unit.</p> <pre><code>~$ scp backup.json admin@example.local:/tmp/\n~$ ssh admin@example.local 'sudo sysrepocfg -I /tmp/backup.json -fjson -d startup'\n~$ ssh admin@example.local 'reboot'\nConnection to switch.local closed by remote host.\n~$\n</code></pre> <p>Note</p> <p>The login credentials (hash) for the <code>admin</code> user are stored as part of the configuration file.  When replacing a switch and applying the backed up configuration from the former switch, the password on the replacement unit will also change.</p>"},{"location":"scripting-sysrepocfg/#copy-running-to-startup","title":"Copy Running to Startup","text":"<p>The following command reads out the running config via <code>sysrepocfg -X</code> and writes the result to the startup configuration.</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d running &gt; /cfg/startup-config.cfg'\n~$\n</code></pre> <p>An alternative is to write it to a temporary file, and use <code>sysrepocfg -I</code> to import it to startup.</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d running &gt; /tmp/running.json'\n~$ ssh admin@example.local 'sysrepocfg -I /tmp/running.json -fjson -d startup'\n~$\n</code></pre>"},{"location":"scripting-sysrepocfg/#read-hardware-information","title":"Read Hardware Information","text":"<p>The IETF Hardware YANG model has been augmented for ONIE formatted production data stored in EEPROMs, if available.  For details, see the VPD documentation and the ietf-hardware and infix-hardware YANG models.</p> <pre><code>~$ ssh admin@example.local 'sysrepocfg -X -fjson -d operational -x /ietf-hardware:hardware'\n{\n  \"ietf-hardware:hardware\": {\n    \"component\": [\n      {\n        \"name\": \"product\",\n        \"class\": \"infix-hardware:vpd\",\n        \"serial-num\": \"12345\",\n        \"model-name\": \"Switch2010\",\n        \"mfg-date\": \"2024-01-30T16:42:37+00:00\",\n        \"infix-hardware:vpd-data\": {\n          \"product-name\": \"Switch2010\",\n          \"part-number\": \"ABC123-001\",\n          \"serial-number\": \"007\",\n          \"mac-address\": \"00:53:00:01:23:45\",\n          \"manufacture-date\": \"01/30/2024 16:42:37\",\n          \"num-macs\": 11,\n          \"manufacturer\": \"ACME Production\",\n          \"vendor\": \"SanFran Networks\"\n        }\n      },\n      {\n        \"name\": \"USB\",\n        \"class\": \"infix-hardware:usb\",\n        \"state\": {\n          \"admin-state\": \"unlocked\",\n          \"oper-state\": \"enabled\"\n        }\n      }\n    ]\n  }\n}\n~$\n</code></pre>"},{"location":"scripting/","title":"Scripting Infix","text":"<p>In some situations a user cannot, or does not want to, use the NETCONF API for interacting with Infix.  Examples include production tasks and simpler remote scripting jobs to one or more remote devices.</p> <p>This document assumes you have the password for the <code>admin</code> user, and that you can connect to the device.  Please see Finding my Device for help on locating it.</p> <p>Furthermore, the example commands shown here that are execute from a PC to a remote device over SSH, use Linux/UNIX.  With advances lately in both Windows and macOS, many of the user friendly tools previously only available in Linux are now available there too.</p> <p>The shell prompt for the PC laptop side:</p> <pre><code>~$\n</code></pre> <p>The shell prompt when logged in to an Infix device:</p> <pre><code>admin@example:~$\n</code></pre> <p>Note</p> <p>The shell script commands used here are the raw variants which the CLI usually wraps in a warm and snugly blanket.  Meaning they may change over time, while the CLI wrappers do not.  That being said, please let us know if you find any inconsistencies.</p>"},{"location":"scripting/#tips","title":"Tips","text":"<ul> <li>Ensure the <code>admin</code> user does not have <code>clish</code> as login shell</li> <li>Enable SSH key authentication</li> <li>Deploy same SSH public key to many Infix devices</li> <li>Secure your private SSH key using, e.g., <code>ssh-agent</code></li> </ul> <p>The <code>ssh-keygen</code> command, used to create the private/public key pair, asks for a passphrase and although this is technically optional it is highly recommended to set one.  For ease of use, in particular when scripting, use <code>ssh-agent</code> to avoid retyping the passphrase for every command.</p> <p>Useful links on SSH, keys, and using <code>ssh-agent</code>:</p> <ul> <li>https://en.wikipedia.org/wiki/Ssh-agent</li> <li>https://www.cyberciti.biz/faq/how-to-use-ssh-agent-for-authentication-on-linux-unix/</li> <li>https://goteleport.com/blog/how-to-use-ssh-agent-safely/</li> </ul>"},{"location":"scripting/#admin-user-not-authorized","title":"Admin User Not Authorized","text":"<p>All system services and critical configuration files are owned by the locked-down <code>root</code> user.  It is not possible to activate the <code>root</code> user account for remote logins.  Instead, use <code>admin</code> user and the <code>sudo</code> command prefix.</p> <p>Here we are logged in to an example device:</p> <pre><code>admin@example:~$ cp /cfg/startup-config.cfg /cfg/backup-config.cfg\ncp: can't create '/cfg/backup-config.cfg': Permission denied\nadmin@example:~$ sudo cp /cfg/startup-config.cfg /cfg/backup-config.cfg\n</code></pre>"},{"location":"scripting/#examples","title":"Examples","text":"<p>The following example commands are run from the PC over SSH.  The following is a very brief introduction.</p> <p>The notation is <code>ssh username@address</code>, where address can be an IPv4 or IPv6 address, a DNS name, or an mDNS name, e.g. infix.local.  In the case of IPv6: <code>address%interface</code>, where interface differs between operating systems.  On Linux and macOS the interface name is used, but on Windows the interface index<sup>1</sup> is used.</p>"},{"location":"scripting/#logging-in-to-a-device","title":"Logging in to a device","text":"<pre><code>~$ ssh admin@fe80::ff:fe00:0%eth0\nThe authenticity of host 'fe80::ff:fe00:0%eth0 (fe80::ff:fe00:0%eth0)' can't be established.\nED25519 key fingerprint is SHA256:5/9mw64jhmYyD8MD+SwrsG3RXMBbP48pDe2T8bg14RQ.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'fe80::ff:fe00:0%eth0' (ED25519) to the list of known hosts.\nadmin@fe80::ff:fe00:0%eth0's password: *****\n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-'\n\nRun the command 'cli' for interactive OAM\n\nadmin@infix-c0-ff-ee:/&gt;\n</code></pre>"},{"location":"scripting/#running-a-remote-command","title":"Running a remote command","text":"<pre><code>~$ ssh admin@fe80::ff:fe00:0%eth0 echo hej\nadmin@fe80::ff:fe00:0%eth0's password: *****\nhej\n</code></pre>"},{"location":"scripting/#made-easy-with-mdns","title":"Made Easy with mDNS","text":"<p>Connecting to networked devices using IP addresses is the way many people are used to.  The above example with IPv6 tend to scare off people, so for the rest of this document we'll use the mDNS name instead:</p> <pre><code>~$ ssh admin@infix.local%eth0\nThe authenticity of host 'infix.local%eth0' can't be established.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n...\nadmin@infix:/&gt;\n</code></pre>"},{"location":"scripting/#factory-reset","title":"Factory Reset","text":"<p>The command option <code>-y</code> disables any \"are you sure?\" interaction and immediately triggers a factory reset and reboot of the device.  It is when the device boots up it erases all writable storage.</p> <pre><code>~$ ssh admin@infix.local%eth0 factory -y\nadmin@infix.local%eth0's password: *****\n</code></pre>"},{"location":"scripting/#system-reboot","title":"System Reboot","text":"<pre><code>~$ ssh admin@infix.local%eth0 reboot\nadmin@infix.local%eth0's password: *****\n</code></pre>"},{"location":"scripting/#set-date-and-time","title":"Set Date and Time","text":"<p>Devices running Infix may have their system time completely off and this can cause problems for upgrading and when accessing the web interface over HTTPS (certificate validation looks at start and end dates).</p> <p>To set the device's system time, and sync that with the RTC: use the PCs current time as argument:</p> <pre><code>~$ ssh admin@infix.local%eth0 \"sudo date -s '2024-03-20 18:14+01:00' &amp;&amp; \\\n                               sudo hwclock -w -u\"\nadmin@infix.local%eth0's password: *****\n</code></pre> <p>Tip</p> <p>The <code>-u</code> option ensures saving system time to the RTC in UTC time.</p> <p>Verify that the change took:</p> <pre><code>~$ ssh admin@infix.local%eth0 date\nadmin@infix.local%eth0's password: *****\nWed Mar 20 17:14:47 UTC 2024\n</code></pre>"},{"location":"scripting/#remote-control-of-ethernet-ports","title":"Remote Control of Ethernet Ports","text":"<p>There are two ways to do it:</p> <ol> <li>Change the configuration without saving it to <code>startup-config</code></li> <li>Change the operational state</li> </ol> <p>The first involves sending a NETCONF command/config in XML. The second we will cover here. We start by querying available interfaces (ports) on the remote system:</p> <pre><code>~$ ssh admin@infix.local%qtap0 ip -br a\nadmin@infix.local%qtap0's password:\nlo               UP             127.0.0.1/8 ::1/128\ne0               UP             fe80::ff:fe00:0/64\ne1               UP\ne2               UP\ne3               UP\ne4               UP\ne5               UP             fe80::ff:fe00:5/64\ne6               UP             fe80::ff:fe00:6/64\ne7               UP             fe80::ff:fe00:7/64\ne8               UP             fe80::ff:fe00:8/64\ne9               UP             192.168.2.200/24 fe80::ff:fe00:9/64\nbr0              UP\n</code></pre> <p>Here we see a loopback interface (lo), ten Ethernet ports (e0-e9) and a bridge (br0).  From this quick glance we can guess that the ports e1-e4 are bridged (you can verify this with the remote command <code>bridge link</code>) because they do not have a link-local IPv6 address.</p> <p>I know it's port e6 that I want to take down:</p> <pre><code>~$ ssh admin@infix.local%qtap0 ip link set e6 down\nadmin@infix.local%qtap0's password:\nRTNETLINK answers: Operation not permitted\n~$ ssh admin@infix.local%qtap0 sudo ip link set e6 down\nadmin@infix.local%qtap0's password:\n</code></pre> <p>Changing the operational link state of a port is a privileged command, so we have to prefix our command with <code>sudo</code>.</p> <p>Inspecting the link state again show the port is now down:</p> <pre><code>~$ ssh admin@infix.local%qtap0 ip -br a\nadmin@infix.local%qtap0's password:\nlo               UP             127.0.0.1/8 ::1/128\ne0               UP             fe80::ff:fe00:0/64\ne1               UP\ne2               UP\ne3               UP\ne4               UP\ne5               UP             fe80::ff:fe00:5/64\ne6               DOWN\ne7               UP             fe80::ff:fe00:7/64\ne8               UP             fe80::ff:fe00:8/64\ne9               UP             192.168.2.200/24 fe80::ff:fe00:9/64\nbr0              UP\n</code></pre>"},{"location":"scripting/#check-network-connectivity","title":"Check Network Connectivity","text":"<p>Say you want to perform a [System Upgrade][#system-upgrade] and it just does not work, a good place to start troubleshooting is ensuring the device can actually reach the upgrade server.</p> <p>We run the following <code>ping</code> command remotely on the device:</p> <pre><code>~$ ssh admin@infix.local%eth0 ping -c 3 server.local\nadmin@infix.local%qtap0's password: *****\nPING server.local (192.168.2.42) 56(84) bytes of data.\n64 bytes from server.local: icmp_seq=1 ttl=64 time=0.201 ms\n64 bytes from server.local: icmp_seq=2 ttl=64 time=0.432 ms\n64 bytes from server.local: icmp_seq=3 ttl=64 time=0.427 ms\n\n--- server.local ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2050ms\nrtt min/avg/max/mdev = 0.201/0.353/0.432/0.107 ms\n</code></pre> <p>Here we get a reply, so whatever is the issue with the upgrade was not hiding behind a connectivity issue at least.</p>"},{"location":"scripting/#system-upgrade","title":"System Upgrade","text":"<p>The underlying software that handles upgrades is called RAUC.  To trigger an upgrade you (currently) need an FTP/TFTP or HTTP/HTTPS server where RAUC can fetch the upgrade from.  In this example we use an FTP server to upgrade the currently inactive \"slot\":</p> <pre><code>~$ ssh admin@infix.local%eth0 rauc install ftp://server.local/infix-aarch64-24.06.0.pkg\nadmin@infix.local%eth0's password: *****\ninstalling\n  0% Installing\n  0% Determining slot states\n 20% Determining slot states done.\n 20% Checking bundle\n 20% Verifying signature\n 40% Verifying signature done.\n 40% Checking bundle done.\n 40% Checking manifest contents\n 60% Checking manifest contents done.\n 60% Determining target install group\n 80% Determining target install group done.\n 80% Updating slots\n 80% Checking slot rootfs.1\n 90% Checking slot rootfs.1 done.\n 90% Copying image to rootfs.1\n 99% Copying image to rootfs.1 done.\n 99% Updating slots done.\n100% Installing done.\nidle\nInstalling `ftp://server.local/infix-aarch64-24.06.0.pkg` succeeded\n~$\n</code></pre> <p>The inactive slot is now marked active and will be used on the next boot.  To upgrade the partition we booted from, we must first reboot.</p> <p>For more information, see the Boot Procedure document.</p> <p>Alternative:</p> <p>If you know your device has sufficient storage, eMMC or RAM disk (check with the remote command <code>df -h</code>), you can also copy the <code>.pkg</code> file to the device instead of having to set up an FTP/TFTP or HTTP/HTTPS server.</p> <p>Create an upload directory where <code>admin</code> has write permission:</p> <pre><code>~$ ssh admin@infix.local%eth0 \"sudo mkdir /var/tmp/upload; \\\n                               sudo chown admin /var/tmp/upload\"\nadmin@infix.local%eth0's password:\n</code></pre> <p>Copy the file with secure copy, first we show the nasty IPv6 version of the command:</p> <pre><code>~$ scp infix-aarch64-24.06.0.pkg admin@\\[fe80::ff:fe00:0%eth0\\]:/var/tmp/upload/\nadmin@fe80::ff:fe00:0%eth0's password:\ninfix-aarch64-24.06.0.pkg                              100%  296   601.4KB/s   00:00\n</code></pre> <p>And the upgrade command itself:</p> <pre><code>~$ ssh admin@infix.local%eth0 rauc install /var/tmp/upload/infix-aarch64-24.06.0.pkg\nadmin@infix.local%eth0's password: *****\n.\n.\n.\n</code></pre> <p>Remember to remove the file from the upload directory when you are done, this can be done before or after the reboot to activate the upgrade.  If you want to upgrade both \"slots\", then you can of course keep the file until you are done (provided the upload directory was created on persistent storage).</p> <pre><code>~$ ssh admin@infix.local%eth0 rm /var/tmp/upload/infix-aarch64-24.06.0.pkg\nadmin@infix.local%eth0's password: *****\n~$\n</code></pre>"},{"location":"scripting/#controlling-leds","title":"Controlling LEDs","text":"<p>As part of production testing, LED verification is often expected to be performed.  Infix uses standard Linux support for LED management, where LEDs appear in the file system under /sys/class/leds and can be controlled using echo command. <code>sudo</code> privileges are required.</p> <p>When interacting with LEDs this way, first disable the Infix iitod daemon to avoid conflicting LED control.</p> <pre><code>~$ ssh admin@example.local 'initctl stop iitod'\n</code></pre> <p>Then run the test, e.g., visually control that a red LED labeled 'LAN' is working.</p> <pre><code>~$ ssh admin@example.local 'echo none | sudo tee /sys/class/leds/red\\:lan/trigger'\n~$ ssh admin@example.local 'echo 1    | sudo tee /sys/class/leds/red\\:lan/brightness'\n</code></pre> <p>To turn off the same LED, run the following commands.</p> <pre><code>~$ ssh admin@example.local 'echo none | sudo tee /sys/class/leds/red\\:lan/trigger'\n~$ ssh admin@example.local 'echo 0    | sudo tee /sys/class/leds/red\\:lan/brightness'\n</code></pre> <p>When done with LED testing, enable Infix iitod daemon again.</p> <pre><code>~$ ssh admin@example.local 'initctl start iitod'\n</code></pre>"},{"location":"scripting/#reading-power-feed-status","title":"Reading Power Feed Status","text":"<p>As part of production tests, verification of Power Feed sensors is often expected to be performed. Infix uses standard Linux support for Power management, where power sources appear in the file system under /sys/class/power_supply. The following example reads status of two power supplies named pwr1 and pwr2.</p> <pre><code>~$ ssh admin@example 'cat /sys/class/power_supply/pwr1/online'\n1\n~$ ssh admin@example 'cat /sys/class/power_supply/pwr2/online'\n0\n~$\n</code></pre> <p>Here, only <code>pwr1</code> have power.</p> <ol> <li> <p>Press Win-r to bring up the Run dialog, enter <code>cmd.exe</code> and press enter.  Then type in <code>ipconfig /all</code> to list all interfaces, their status, as well as interface index.\u00a0\u21a9</p> </li> </ol>"},{"location":"syslog/","title":"Syslog Support","text":"<p>The system comes with native logging to internal storage, <code>/var/log/</code>, or <code>/log</code> for a shortcut.  Depending on the device, this may be a RAM disk, meaning logs are not retained across reboots.  This document details how to log to external media or remote syslog servers.</p> <p>It is also possible to set up the device to act as a syslog server (log sink), this is covered briefly at the very end of this document.</p> <p>Note: the native logging cannot be modified, only the log file rotation can be changed.  Please see the <code>dir</code> admin-exec command for a listing of existing native log files.</p>"},{"location":"syslog/#log-to-file","title":"Log to File","text":"<p>Logging to a local file is useful when combined with an external media. E.g., a USB stick with a log partition (named/labeled: \"log\").  Below is an example.</p> <p>For a list of available log facilities, see the table in a later section.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit syslog\nadmin@example:/config/syslog/&gt; edit actions log-file file:/media/log/mylog\nadmin@example:/config/syslog/actions/log-file/file:/media/log/mylog/&gt; set facility-list\n      all    audit     auth authpriv  console     cron    cron2   daemon      ftp     kern\n   local0   local1   local2   local3   local4   local5   local6   local7      lpr     mail\n     news      ntp   syslog     user     uucp\nadmin@example:/config/syslog/actions/log-file/file:/media/log/mylog/&gt; set facility-list all severity\n     alert       all  critical     debug emergency     error      info      none    notice   warning\nadmin@example:/config/syslog/actions/log-file/file:/media/log/mylog/&gt; set facility-list all severity critical\nadmin@example:/config/syslog/actions/log-file/file:/media/log/mylog/&gt; set facility-list mail severity warning\nadmin@example:/config/syslog/actions/log-file/file:/media/log/mylog/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Note: the <code>log-file</code> syntax requires the leading prefix <code>file:</code>. If the path is not absolute, e.g., <code>file:mylog</code>, the file is saved to the system default path, i.e., <code>/log/mylog</code>.  In this case, verify that the filename is not already in use.</p>"},{"location":"syslog/#log-rotation","title":"Log Rotation","text":"<p>By default log files are allowed to grow to a size of 1 MiB after which they are \"rotated\".  The whole reason for this is to not fill up the disk with outdated logs.  A rotated file is saved in stages and older ones are also compressed (using <code>gzip</code>).  Use the <code>show log</code> command in admin-exec context to start the log file viewer:</p> <pre><code>admin@example:/config/syslog/&gt; do show log\nlog  log.0  log.1.gz  log.2.gz  log.3.gz  log.4.gz  log.5.gz\nadmin@example:/config/syslog/&gt; do show log log.1.gz\n</code></pre> <p>Tip: use the Tab key on your keyboard list available log files. The <code>do</code> prefix is also very useful in configure context to access commands from admin-exec context.</p> <p>By default 10 compressed older files are saved.  Here the oldest is <code>log.5.gz</code> and the most recently rotated one is <code>log.0</code>.</p> <p>Log file rotation can be configured both globally and per log file. Here we show the global settings, the set up is the same for per log file, which if unset inherit the global settings:</p> <pre><code>admin@example:/&gt; configure \nadmin@example:/config/&gt; edit syslog file-rotation\nadmin@example:/config/syslog/file-rotation/&gt; show\nadmin@example:/config/syslog/file-rotation/&gt;\n</code></pre> <p>The defaults are not shown.  We can inspect them by asking the YANG model for the help texts:</p> <pre><code>admin@example:/config/syslog/file-rotation/&gt; help\n   max-file-size    number-of-files\nadmin@example:/config/syslog/file-rotation/&gt; help max-file-size \nNAME\n        max-file-size kilobytes\n\nDESCRIPTION\n        Maximum log file size (kiB), before rotation.\n\nDEFAULT\n        1024\nadmin@example:/config/syslog/file-rotation/&gt; help number-of-files \nNAME\n        number-of-files [0..4294967295]\n\nDESCRIPTION\n        Maximum number of log files retained.\n\nDEFAULT\n        10\n</code></pre> <p>To change the defaults to something smaller, 512 kiB and 20 (remember everything after .0 is compressed, and text compresses well):</p> <pre><code>admin@example:/config/syslog/file-rotation/&gt; set max-file-size 512\nadmin@example:/config/syslog/file-rotation/&gt; set number-of-files 20\nadmin@example:/config/syslog/file-rotation/&gt; show\nnumber-of-files 20;\nmax-file-size 512;\nadmin@example:/config/syslog/file-rotation/&gt; leave\nadmin@example:/&gt; \n</code></pre>"},{"location":"syslog/#log-format","title":"Log Format","text":"<p>There are three major syslog log formats, the default is RFC3164 for log files and BSD for remote logging.  Depending on time synchronization and remote log server capabilities, or policies, the RFC5424 format is often preferred since it not only has better time resolution but also supports structured logging:</p> <pre><code>BSD     : myproc[8710]: Kilroy was here.\nRFC3164 : Aug 24 05:14:15 192.0.2.1 myproc[8710]: Kilroy was here.\nRFC5424 : 2003-08-24T05:14:15.000003-07:00 192.0.2.1 myproc 8710 - - Kilroy was here.\n</code></pre> <p>The BSD format is only applicable to remote logging.  It remains the default for compatibility reasons, and is recommended since the device may not have proper time, making it better for the remote log server to perform time stamping at the time of arrival.</p> <p>Configuring the log format is the same for log files and remotes:</p> <pre><code>admin@example:/config/&gt; edit syslog actions log-file file:foobar \nadmin@example:/config/syslog/actions/log-file/file:foobar/&gt; set log-format \n                  bsd               rfc3164              rfc5424\nadmin@example:/config/syslog/actions/log-file/file:foobar/&gt; set log-format rfc5424 \nadmin@example:/config/syslog/actions/log-file/file:foobar/&gt; leave\nadmin@example:/&gt;\n</code></pre>"},{"location":"syslog/#log-to-remote-server","title":"Log to Remote Server","text":"<p>Logging to a remote syslog server is the recommended way of supervising the system.  This way all login attempts (console, SSH, or web) and any configuration changes can be traced, even in cases of a remote attacker tries to cover their traces by deleting logs.</p> <p>The recommended setup involves using a fixed IP address, default BSD log format, and the default Internet port (514).  This is the most reliable, because your device may not have DNS set up or even available, and some remote syslog servers do not support receiving time stamped log messages -- this is of course entirely dependent on how the remote server is set up, as well as local policy.</p> <pre><code>admin@example:/config/&gt; edit syslog\n       actions file-rotation        server\nadmin@example:/config/&gt; edit syslog actions destination moon\nadmin@example:/config/syslog/actions/destination/moon/&gt; set\n facility-list    log-format           udp\nadmin@example:/config/syslog/actions/destination/moon/&gt; set udp\n address    port\nadmin@example:/config/syslog/actions/destination/moon/&gt; set udp address 192.168.0.12\nadmin@example:/config/syslog/actions/destination/moon/&gt; set facility-list container severity all\nadmin@example:/config/syslog/actions/destination/moon/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Note: the alternatives shown below each prompt in the example above can be found by tapping the Tab key.</p>"},{"location":"syslog/#acting-as-a-log-server","title":"Acting as a Log Server","text":"<p>The syslog server can act as a log sink for other devices on a LAN.  For this to work you need a static IP address, here we use 10.0.0.1/24.</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit syslog server\nadmin@example:/config/syslog/server/&gt; set enabled true\nadmin@example:/config/syslog/server/&gt; set listen udp 514 address 10.0.0.1\nadmin@example:/config/syslog/server/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>See the above Log to File section on how to set up filtering of received logs to local files.  Please note, filtering based on property, e.g., hostname, is not supported yet.</p>"},{"location":"syslog/#facilities","title":"Facilities","text":"Code Facility Description 0 kern Kernel log messages 1 user User-level messages 2 mail Mail system 3 daemon General system daemons 4 auth Security/authorization messages 5 syslog Messages generated by syslogd 6 lpr Line printer subsystem 7 news Network news subsystem 8 uucp UNIX-to-UNIX copy 9 cron Clock/cron daemon (BSD, Linux) 10 authpriv Security/authorization messages (private) 11 ftp FTP daemon 12 ntp NTP subsystem 13 audit Log audit (security) 14 console Log alert 15 cron2 Clock/cron daemon (Solaris) 16 rauc* local0, reserved for RAUC 17 container* local1, reserved for containers 18 local2 Currently unused 19 local3 Currently unused 20 local4 Currently unused 21 local5 Currently unused 22 reserved* local6, reserved for industrial Ethernet 23 web* local7, reserved for nginx web server <p>Facilities marked <code>*</code> are local augments to the model.</p>"},{"location":"system/","title":"System Configuration","text":"<p>System settings in Infix are provided by the ietf-system YANG model, augmented with Linux specific extensions in infix-system, like Message of the Day (login message) and user login shell.  More on this later on in this document.</p> <p>For the sake of brevity, the hostname in the following examples has been shortened to <code>host</code>.  The default hostname is composed from a product specific string followed by the last three octets of the system base MAC address, e.g., <code>switch-12-34-56</code>.  An example of how to change the hostname is included below.</p> <p>Note</p> <p>When issuing <code>leave</code> to activate your changes, remember to also save your settings, <code>copy running-config startup-config</code>.  See the CLI Introduction for a background.</p>"},{"location":"system/#changing-password","title":"Changing Password","text":"<p>User management, including passwords, SSH keys, remote authentication is available in the system authentication configuration context.</p> <pre><code>admin@host:/config/&gt; edit system authentication user admin\nadmin@host:/config/system/authentication/user/admin/&gt; change password\nNew password:\nRetype password:\nadmin@host:/config/system/authentication/user/admin/&gt; leave\n</code></pre> <p>The <code>change password</code> command starts an interactive dialogue that asks for the new password, with a confirmation, and then salts and encrypts the password with sha512crypt.</p> <p>It is also possible to use the <code>set password ...</code> command.  This allows setting an already hashed password.  To manually hash a password, use the <code>do password encrypt</code> command.  This launches the admin-exec command to hash, and optionally salt, your password.  This encrypted string can then be used with <code>set password ...</code>.</p> <p>Tip</p> <p>If you are having trouble thinking of a password, there is a nifty <code>password generate</code> command in admin-exec context which generates random passwords using the UNIX command <code>pwgen</code>.  Use the <code>do</code> prefix when inside any configuration context to access admin-exec commands.</p>"},{"location":"system/#ssh-authorized-key","title":"SSH Authorized Key","text":"<p>Logging in remotely with SSH is possible by adding a public key to a user.  Here we add the authorized key to the admin user, multiple keys are supported.</p> <p>With SSH keys in place it is possible to disable password login, just remember to verify SSH login and network connectivity before doing so.</p> <pre><code>admin@host:/config/&gt; edit system authentication user admin\nadmin@host:/config/system/authentication/user/admin/&gt; edit authorized-key example@host\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; set algorithm ssh-rsa\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; set key-data AAAAB3NzaC1yc2EAAAADAQABAAABgQC8iBL42yeMBioFay7lty1C4ZDTHcHyo739gc91rTTH8SKvAE4g8Rr97KOz/8PFtOObBrE9G21K7d6UBuPqmd0RUF2CkXXN/eN2PBSHJ50YprRFt/z/304bsBYkDdflKlPDjuSmZ/+OMp4pTsq0R0eNFlX9wcwxEzooIb7VPEdvWE7AYoBRUdf41u3KBHuvjGd1M6QYJtbFLQMMTiVe5IUfyVSZ1RCxEyAB9fR9CBhtVheTVsY3iG0fZc9eCEo89ErDgtGUTJK4Hxt5yCNwI88YaVmkE85cNtw8YwubWQL3/tGZHfbbQ0fynfB4kWNloyRHFr7E1kDxuX5+pbv26EqRdcOVGucNn7hnGU6C1+ejLWdBD7vgsoilFrEaBWF41elJEPKDzpszEijQ9gTrrWeYOQ+x++lvmOdssDu4KvGmj2K/MQTL2jJYrMJ7GDzsUu3XikChRL7zNfS2jYYQLzovboUCgqfPUsVba9hqeX3U67GsJo+hy5MG9RSry4+ucHs=\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; show\nalgorithm ssh-rsa;\nkey-data AAAAB3NzaC1yc2EAAAADAQABAAABgQC8iBL42yeMBioFay7lty1C4ZDTHcHyo739gc91rTTH8SKvAE4g8Rr97KOz/8PFtOObBrE9G21K7d6UBuPqmd0RUF2CkXXN/eN2PBSHJ50YprRFt/z/304bsBYkDdflKlPDjuSmZ/+OMp4pTsq0R0eNFlX9wcwxEzooIb7VPEdvWE7AYoBRUdf41u3KBHuvjGd1M6QYJtbFLQMMTiVe5IUfyVSZ1RCxEyAB9fR9CBhtVheTVsY3iG0fZc9eCEo89ErDgtGUTJK4Hxt5yCNwI88YaVmkE85cNtw8YwubWQL3/tGZHfbbQ0fynfB4kWNloyRHFr7E1kDxuX5+pbv26EqRdcOVGucNn7hnGU6C1+ejLWdBD7vgsoilFrEaBWF41elJEPKDzpszEijQ9gTrrWeYOQ+x++lvmOdssDu4KvGmj2K/MQTL2jJYrMJ7GDzsUu3XikChRL7zNfS2jYYQLzovboUCgqfPUsVba9hqeX3U67GsJo+hy5MG9RSry4+ucHs=;\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; leave\n</code></pre> <p>Note</p> <p>The <code>ssh-keygen</code> program already base64 encodes the public key data, so there is no need to use the <code>text-editor</code> command, <code>set</code> does the job.</p>"},{"location":"system/#multiple-users","title":"Multiple Users","text":"<p>The system supports multiple users and multiple user levels, or groups, that a user can be a member of.  Access control is entirely handled by the NETCONF \"NACM\" YANG model, which provides granular access to configuration, data, and RPC commands over NETCONF.</p> <p>By default the system ships with a single group, <code>admin</code>, which the default user <code>admin</code> is a member of.  The broad permissions granted by the <code>admin</code> group is what gives its users full system administrator privileges.  There are no restrictions on the number of users with administrator privileges, nor is the <code>admin</code> user reserved or protected in any way -- it is completely possible to remove the default <code>admin</code> user from the configuration.  However, it is recommended to keep at least one user with administrator privileges in the system, otherwise the only way to regain full access is to perform a factory reset.</p>"},{"location":"system/#adding-a-user","title":"Adding a User","text":"<p>Similar to how to change password, adding a new user is done using the same set of commands:</p> <pre><code>admin@host:/config/&gt; edit system authentication user jacky\nadmin@host:/config/system/authentication/user/jacky/&gt; change password\nNew password:\nRetype password:\nadmin@host:/config/system/authentication/user/jacky/&gt; leave\n</code></pre> <p>An authorized SSH key is added the same way as presented previously.</p>"},{"location":"system/#adding-a-user-to-the-admin-group","title":"Adding a User to the Admin Group","text":"<p>The following commands add user <code>jacky</code> to the <code>admin</code> group.</p> <pre><code>admin@host:/config/&gt; edit nacm group admin\nadmin@host:/config/nacm/group/admin/&gt; set user-name jacky\nadmin@host:/config/nacm/group/admin/&gt; leave\n</code></pre>"},{"location":"system/#security-aspects","title":"Security Aspects","text":"<p>The NACM user levels apply primarily to NETCONF, with exception of the <code>admin</code> group which is granted full system administrator privileges to the underlying UNIX system with the following ACL rules:</p> <pre><code>   ...\n   \"module-name\": \"*\",\n   \"access-operations\": \"*\",\n   \"action\": \"permit\",\n   ...\n</code></pre> <p>A user in the <code>admin</code> group is allowed to also use a POSIX login shell and use the <code>sudo</code> command to perform system administrative commands. This makes it possible to use all the underlying UNIX tooling, which to many can be very useful, in particular when debugging a system, but please remember to use with care -- the system is not built to require managing from the shell.  The tools available in the CLI and automated services, started from the system's configuration, are the recommended way of using the system, in addition to NETCONF tooling.</p>"},{"location":"system/#changing-hostname","title":"Changing Hostname","text":"<p>Notice how the hostname in the prompt does not change until the change is committed by issuing the <code>leave</code> command.</p> <pre><code>admin@host:/config/&gt; edit system\nadmin@host:/config/system/&gt; set hostname example\nadmin@host:/config/system/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>The hostname is advertised over mDNS-SD in the <code>.local</code> domain.  If another device already has claimed the <code>example.local</code> CNAME, in our case, mDNS will advertise a \"uniqified\" variant, usually suffixing with an index, e.g., <code>example-1.local</code>.  Use an mDNS browser to scan for available devices on your LAN.</p> <p>In some cases you may want to set the device's domain name as well. This is handled the same way:</p> <pre><code>admin@host:/config/&gt; edit system\nadmin@host:/config/system/&gt; set hostname foo.example.com\nadmin@host:/config/system/&gt; leave\nadmin@foo:/&gt;\n</code></pre> <p>Both host and domain name are stored in the system files <code>/etc/hosts</code> and <code>/etc/hostname</code>.  The latter is exclusively for the host name.  The domain may be used by the system DHCP server when handing out leases to clients, it is up to the clients to request the domain name option.</p> <p>Note</p> <p>Critical services like syslog, mDNS, LLDP, and similar that advertise the hostname, are restarted when the hostname is changed.</p>"},{"location":"system/#changing-login-banner","title":"Changing Login Banner","text":"<p>The <code>motd-banner</code> setting is an Infix augment and an example of a <code>binary</code> type setting that can be changed interactively with the built-in <code>text-editor</code> command.</p> <p>Tip</p> <p>See the next section for how to change the editor used to something you may be more familiar with.</p> <pre><code>admin@host:/config/&gt; edit system\nadmin@host:/config/system/&gt; text-editor motd-banner\nadmin@host:/config/system/&gt; leave\nadmin@host:/&gt;\n</code></pre> <p>Log out and log back in again to inspect the changes.</p>"},{"location":"system/#changing-the-editor","title":"Changing the Editor","text":"<p>The system has three different built-in editors that can be used as the <code>text-editor</code> command:</p> <ul> <li><code>emacs</code> (Micro Emacs)</li> <li><code>nano</code> (GNU Nano)</li> <li><code>vi</code> (Visual Editor)</li> </ul> <p>To change the editor to GNU Nano:</p> <pre><code>admin@host:/&gt; configure\nadmin@host:/config/&gt; edit system\nadmin@host:/config/system/&gt; set text-editor nano\nadmin@host:/config/system/&gt; leave\nadmin@host:/&gt;\n</code></pre> <p>Important</p> <p>Configuration changes only take effect after issuing the <code>leave</code> command.  I.e., you must change the editor first, and then re-enter configure context to use your editor of choice.</p>"},{"location":"system/#dns-resolver-configuration","title":"DNS Resolver Configuration","text":"<p>The system supports both static and dynamic (DHCP) DNS setup.  The locally configured (static) server is preferred over any acquired from a DHCP client.</p> <pre><code>admin@host:/&gt; configure\nadmin@host:/config/&gt; edit system dns-resolver\nadmin@host:/config/system/dns-resolver/&gt; set server google udp-and-tcp address 8.8.8.8\nadmin@host:/config/system/dns-resolver/&gt; show\nserver google {\n  udp-and-tcp {\n    address 8.8.8.8;\n  }\n}\nadmin@host:/config/system/dns-resolver/&gt; leave\n</code></pre> <p>It is also possible to configure resolver options like timeout and retry attempts.  See the YANG model for details, or use the built-in help system in the CLI.</p> <p>Note</p> <p>When acting as a DHCP server and DNS proxy for other devices, any local DNS server configured here is automatically used as upstream DNS server.</p>"},{"location":"system/#ntp-client-configuration","title":"NTP Client Configuration","text":"<p>Below is an example configuration for enabling NTP with a specific server and the <code>iburst</code> option for faster initial synchronization.</p> <pre><code>admin@host:/&gt; configure\nadmin@host:/config/&gt; edit system ntp\nadmin@host:/config/system/ntp/&gt; set enabled\nadmin@host:/config/system/ntp/&gt; set server ntp-pool\nadmin@host:/config/system/ntp/&gt; set server ntp-pool udp address pool.ntp.org\nadmin@host:/config/system/ntp/&gt; set server ntp-pool iburst\nadmin@host:/config/system/ntp/&gt; set server ntp-pool prefer\nadmin@host:/config/system/ntp/&gt; leave\n</code></pre> <p>This configuration enables the NTP client and sets the NTP server to <code>pool.ntp.org</code> with the <code>iburst</code> and <code>prefer</code> options. The <code>iburst</code> option ensures faster initial synchronization, and the <code>prefer</code> option designates this server as preferred.</p> <ul> <li><code>prefer false</code>: The NTP client will choose the best available source based on several factors, such as network delay, stratum, and other metrics (default config).</li> <li><code>prefer true</code>: The NTP client will try to use the preferred server as the primary source unless it becomes unreachable or unusable.</li> </ul>"},{"location":"system/#show-ntp-sources","title":"Show NTP Sources","text":"<p>The status for NTP sources is availble in YANG and accessable with CLI/NETCONF/RESTCONF.</p> <p>To view the sources being used by the NTP client, run: <pre><code>admin@target:/&gt; show ntp\nADDRESS         MODE         STATE            STRATUM POLL-INTERVAL\n192.168.1.1     server       candidate              1             6\n192.168.2.1     server       candidate              1             6\n192.168.3.1     server       selected               1             6\n</code></pre></p>"},{"location":"system/#show-ntp-status","title":"Show NTP Status","text":"<p>To check the status of NTP synchronization (only availble in CLI), use the following command:</p> <pre><code>admin@host:/&gt; show ntp tracking\nReference ID    : C0248F86 (192.36.143.134)\nStratum         : 2\nRef time (UTC)  : Mon Oct 21 10:06:45 2024\nSystem time     : 0.000000001 seconds slow of NTP time\nLast offset     : -3845.151367188 seconds\nRMS offset      : 3845.151367188 seconds\nFrequency       : 4.599 ppm slow\nResidual freq   : +1293.526 ppm\nSkew            : 12.403 ppm\nRoot delay      : 1.024467230 seconds\nRoot dispersion : 0.273462683 seconds\nUpdate interval : 0.0 seconds\nLeap status     : Normal\nadmin@host:/&gt;\n</code></pre> <p>This output provides detailed information about the NTP status, including reference ID, stratum, time offsets, frequency, and root delay.</p> <p>Tip</p> <p>The system uses <code>chronyd</code> Network Time Protocol (NTP) daemon.  The output shown here is best explained in the Chrony documentation.</p>"},{"location":"test-arch/","title":"Test System Architecture","text":""},{"location":"test-arch/#tenets","title":"Tenets","text":"<ul> <li> <p>Keep overhead to a minimum.  Tests should be fast to both write   and run.  Ideally, the developer should want to add tests early in   the development cycle because they instinctively feel that that is   the quickest route to arrive at a correct and robust implementation.</p> </li> <li> <p>Both physical and virtual hardware matters.  Infix is primarily   deployed on physical hardware, so being able to run the test suite   on real devices is crucial to guarantee a high quality product.  At   the same time, there is much value in running the same suite on   virtual hardware, as it makes it easy to catch regressions early.   It is also much more practical and economical to build large virtual   networks than physical ones.</p> </li> <li> <p>Avoid CLI scripting &amp; scraping.  Reliably interacting with a DUT   over a serial line in a robust way is very hard to get right.   Given that we have a proper API (RESTCONF), we should leverage that   when testing.  Front-ends can be tested by other means.</p> </li> </ul>"},{"location":"test-arch/#overview","title":"Overview","text":"<p>The test system is made up of several independent components, which are typically used in concert to run a full test suite.</p>"},{"location":"test-arch/#test-cases","title":"Test Cases","text":"<p>A test case is an executable, receiving the physical topology as a positional argument, which produces TAP compliant output on its <code>stdout</code>. I.e., it is executed in the following manner:</p> <pre><code>test-case [OPTS] &lt;physical-topology&gt;\n</code></pre> <p>Test cases are typically written in Python, using the Infamy library.  Ultimately though, it can be implemented in any language, as long as it matches the calling convention above.</p>"},{"location":"test-arch/#infamy","title":"Infamy","text":"<p>Rather than having each test case come up with its own implementation of how to map topologies, how to push NETCONF data to a device, etc., we provide a library of functions to take care of all that, dubbed \"Infamy\".  When adding a new test case, ask yourself if any parts of it might belong in Infamy as a generalized component that can be reused by other tests.</p> <p>Some of the core functions provided by Infamy are:</p> <ul> <li>Mapping a logical topology to a physical one</li> <li>Finding and attaching to a device over an Ethernet interface, using   NETCONF</li> <li>Pushing/pulling NETCONF data to/from a device</li> <li>Generating TAP compliant output</li> </ul>"},{"location":"test-arch/#9pm","title":"9PM","text":"<p>To run multiple tests, we employ 9PM. It let's us define test suites as simple YAML files. Suites can also be hierarchically structured, with a suite being made up of other suites, etc.</p> <p>It also validates the TAP output, making sure to catch early exits from a case, and produces a nice summary report.</p>"},{"location":"test-arch/#testenv","title":"<code>/test/env</code>","text":"<p>A good way to ensure that nobody ever runs the test suite is to make it really hard to do so.  <code>/test/env</code>'s job is instead to make it very easy to create a reproducible environment in which tests can be executed.</p> <p>Several technologies are leveraged to accomplish this:</p> <ul> <li> <p>Containers: The entire execution is optionally done inside a   standardized <code>docker</code> container environment.  This ensures that the   software needed to run the test suite is always available, no matter   which distribution the user is running on their machine.</p> </li> <li> <p>Python Virtual Environments: To make sure that the expected   versions of all Python packages are available, the execution is   wrapped inside a <code>venv</code>.  This is true for containerized executions,   where the container comes with a pre-installed environment, but it   can also be sourced from the host system when running outside of the   container.</p> </li> <li> <p>Virtual Test Topology: Using Qeneth, the environment can   optionally be started with a virtual topology of DUTs to run the   tests on.</p> </li> </ul> <p><code>docker</code> is the only supported container environment when running tests in the host's network namespace. When running on a virtual Qeneth topology, <code>podman</code> may also be used by installing the <code>podman-docker</code> package from your host system's distro.</p>"},{"location":"test-arch/#physical-and-logical-topologies","title":"Physical and Logical Topologies","text":"<p>Imagine that we want to create a test with three DUTs; one acting as a DHCP server, and the other two as DHCP clients - with all three having a management connection to the host PC running the test.  In other words, the test requires a logical topology like the one below.</p> <p></p> <pre><code>graph \"dhcp-client-server\" {\n    host [\n        label=\"host | { &lt;c1&gt; c1 | &lt;srv&gt; srv | &lt;c2&gt; c2 }\",\n        kind=\"controller\",\n    ];\n\n    server [\n        label=\"{ &lt;mgmt&gt; mgmt } | server | { &lt;c1&gt; c1 | &lt;c2&gt; c2 }\",\n        kind=\"infix\",\n    ];\n    client1 [\n        label=\"{ &lt;mgmt&gt; mgmt } | client1 | { &lt;srv&gt; srv }\",\n        kind=\"infix\",\n    ];\n    client2 [\n        label=\"{ &lt;mgmt&gt; mgmt } | client2 | { &lt;srv&gt; srv }\",\n        kind=\"infix\",\n    ];\n\n    host:srv -- server:mgmt\n    host:c1  -- client1:mgmt\n    host:c2  -- client2:mgmt\n\n    server:c1 -- client1:srv;\n    server:c2 -- client2:srv;\n}\n</code></pre> <p>When running in a virtualized environment, one could simply create a setup that matches the test's logical topology.  But in scenarios when devices are physical systems, connected by real copper cables, this is not possible (unless you have some wicked L1 relay matrix thingy).</p> <p>Instead, the test implementation does not concern itself with the exact nodes used to run the test, only that the logical topology can be mapped to some subset of the physical topology.  In mathematical terms, the physical topology must contain a subgraph that is isomorphic to the logical topology.</p> <p>Standing on the shoulders of giants (i.e. people with mathematics degrees), we can deploy well-known algorithms to find such subgraphs. Continuing our example, let's say we want to run our DHCP test on the physical topology below.</p> <p></p> <pre><code>graph \"quad-ring\" {\n    host [\n        label=\"host | { &lt;d1a&gt; d1a | &lt;d1b&gt; d1b | &lt;d1c&gt; d1c | &lt;d2a&gt; d2a | &lt;d2b&gt; d2b | &lt;d2c&gt; d2c | &lt;d3a&gt; d3a | &lt;d3b&gt; d3b | &lt;d3c&gt; d3c | &lt;d4a&gt; d4a | &lt;d4b&gt; d4b | &lt;d4c&gt; d4c }\",\n        kind=\"controller\",\n    ];\n\n    dut1 [\n        label=\"{ &lt;e1&gt; e1 | &lt;e2&gt; e2 | &lt;e3&gt; e3 } | dut1 | { &lt;e4&gt; e4 | &lt;e5&gt; e5 }\",\n        kind=\"infix\",\n    ];\n    dut2 [\n        label=\"{ &lt;e1&gt; e1 | &lt;e2&gt; e2 | &lt;e3&gt; e3 } | dut2 | { &lt;e4&gt; e4 | &lt;e5&gt; e5 }\",\n        kind=\"infix\",\n    ];\n    dut3 [\n        label=\"{ &lt;e1&gt; e1 | &lt;e2&gt; e2 | &lt;e3&gt; e3 } | dut3 | { &lt;e4&gt; e4 | &lt;e5&gt; e5 }\",\n        kind=\"infix\",\n    ];\n    dut4 [\n        label=\"{ &lt;e1&gt; e1 | &lt;e2&gt; e2 | &lt;e3&gt; e3 } | dut4 | { &lt;e4&gt; e4 | &lt;e5&gt; e5 }\",\n        kind=\"infix\",\n    ];\n\n    host:d1a -- dut1:e1\n    host:d1b -- dut1:e2\n    host:d1c -- dut1:e3\n\n    host:d2a -- dut2:e1\n    host:d2b -- dut2:e2\n    host:d2c -- dut2:e3\n\n    host:d3a -- dut3:e1\n    host:d3b -- dut3:e2\n    host:d3c -- dut3:e3\n\n    host:d4a -- dut4:e1\n    host:d4b -- dut4:e2\n    host:d4c -- dut4:e3\n\n    dut1:e5 -- dut2:e4\n    dut2:e5 -- dut3:e4\n    dut3:e5 -- dut4:e4\n    dut4:e5 -- dut1:e4\n}\n</code></pre> <p>Our test (in fact, all tests) receives the physical topology as an input parameter, and then maps the desired logical topology onto it, producing a mapping from logical nodes and ports to their physical counterparts.</p> <pre><code>{\n  \"client1\": \"dut1\",\n  \"client1:mgmt\": \"dut1:e1\",\n  \"client1:srv\": \"dut1:e4\",\n  \"client2\": \"dut3\",\n  \"client2:mgmt\": \"dut3:e2\",\n  \"client2:srv\": \"dut3:e5\",\n  \"host\": \"host\",\n  \"host:c1\": \"host:d1a\",\n  \"host:c2\": \"host:d3b\",\n  \"host:srv\": \"host:d4c\",\n  \"server\": \"dut4\",\n  \"server:c1\": \"dut4:e5\",\n  \"server:c2\": \"dut4:e4\",\n  \"server:mgmt\": \"dut4:e3\"\n}\n</code></pre> <p>With this information, the test knows that, in this particular environment, the server should be managed via the port called <code>d4c</code> on the node called <code>host</code>; that the port connected to the server on <code>client1</code> is <code>e4</code> on <code>dut1</code>, etc.  Thereby separating the implementation of the test from any specific physical setup.</p> <p>Testcases are not required to use a logical topology; they may choose to accept whatever physical topology its given, and dynamically determine the DUTs to use for testing.  As an example, an STP test could accept an arbitrary physical topology, run the STP algorithm on it offline, enable STP on all DUTs, and then verify that the resulting spanning tree matches the expected one.</p>"},{"location":"test-arch/#integration-to-infix","title":"Integration to Infix","text":"<p>When the test environment is started with Qeneth, it doesn't use the  base image directly. Instead, it creates a copy and inserts a <code>test-mode</code> flag into it. During the bootstrap phase, the system checks for the  presence of the test-mode flag (file).</p> <p>If the flag exists, a 'test-config.cfg' file is generated. In the  following step, the system loads the 'test-config' instead of the standard <code>startup-config</code> (or <code>factory-config</code>). This configuration is simple and safe, equivalent to the one used in 'Secure Mode'  (also known as 'failure-config').</p> <p>Additionally, the configuration enables extra RPCs related to system  restart and configuration overrides, allowing tests to be run even on  systems where the factory configuration may potentially create L2 loops. </p>"},{"location":"testing/","title":"Regression Testing with Infamy","text":"<p>Infix comes with a test suite that is intended to provide end-to-end verification of supported features.  Generally speaking, this means that one or more DUTs are configured over NETCONF; the resulting network is then black-box tested by injecting and inspecting network traffic at various points.</p> <p>This document is intended to be a practical guide on how to run, develop and debug tests. There is a separate document describing the Test System Architecture.</p>"},{"location":"testing/#modes-of-testing","title":"Modes of Testing","text":""},{"location":"testing/#virtual-devices","title":"Virtual Devices","text":"<p>By default, tests are run on a topology made up of virtual Infix nodes using Qeneth. To run the full regression test suite: build Infix for <code>x86_64</code>:</p> <pre><code>$ make x86_64_defconfig\n$ make\n$ make test\n</code></pre>"},{"location":"testing/#physical-devices","title":"Physical Devices","text":"<p>To run the tests on a preexisting topology from the host's network namespace, specify the <code>host</code> <code>TEST_MODE</code>:</p> <pre><code>$ make TEST_MODE=host test\n</code></pre> <p>This typically used when testing on physical hardware. By default the topology will be sourced from <code>/etc/infamy.dot</code>, but this can be overwritten by setting the <code>TOPOLOGY</code> variable:</p> <pre><code>$ make TEST_MODE=host TOPOLOGY=~/my-topology.dot test\n</code></pre>"},{"location":"testing/#make-run-devices","title":"<code>make run</code> Devices","text":"<p>Some tests only require a single DUT.  These can therefore be run against an Infix image started from <code>make run</code>. This requires that the instance is configured to use TAP networking.</p> <p>When the instance is running, you can open a separate terminal and run the subset of the test suite that can be mapped to it:</p> <pre><code>$ make TEST_MODE=run test\n</code></pre>"},{"location":"testing/#interactive-usage","title":"Interactive Usage","text":"<p>When developing and debugging tests, the overhead of repeatedly setting up and tearing down the test environment can quickly start to weigh you down. In these situation, you can start an interactive test environment:</p> <pre><code>$ make test-sh\nInfo: Generating topology\nInfo: Generating node YAML\nInfo: Generating executables\nInfo: Launching dut1\nInfo: Launching dut2\nInfo: Launching dut3\nInfo: Launching dut4\n11:42:52 infamy0:test #\n</code></pre> <p>The example above uses the default mode (<code>qeneth</code>), but the <code>host</code> and <code>run</code> modes also support the <code>test-sh</code> target.</p> <p>It takes a little while to start up, but then we have a shell prompt inside the container running Infamy.  It's a very limited environment, but it has enough to easily run single tests, connect to the virtual devices, and step your code.</p>"},{"location":"testing/#running-subsets-of-tests","title":"Running Subsets of Tests","text":"<p>Each test case is a separate executable, which can be run without arguments:</p> <pre><code>11:42:53 infamy0:test # ./case/infix_dhcp/dhcp_basic.py\n</code></pre> <p>To run a suite of tests, e.g., only the DHCP client tests, pass the suite as an argument to 9PM:</p> <pre><code>11:42:53 infamy0:test # ./9pm/9pm.py case/infix_dhcp/infix_dhcp.yaml\n</code></pre> <p>To run the suite of all tests:</p> <pre><code>11:42:53 infamy0:test # ./9pm/9pm.py case/all.yaml\n</code></pre>"},{"location":"testing/#connecting-to-infamy","title":"Connecting to Infamy","text":"<p>The test system runs in a Docker container, so to get a shell prompt in another terminal you need to connect to that container.  Infamy comes with a helper script for this:</p> <pre><code>$ ./test/shell\n11:42:53 infamy0:test #\n</code></pre> <p>By default it connect to the latest started Infamy instance.  If you for some reason run multiple instances of Infamy the <code>shell</code> script takes an optional argument \"system\", which is the hostname of the container you want to connect to:</p> <pre><code>$ ./test/shell infamy2\n11:42:53 infamy2:test #\n</code></pre>"},{"location":"testing/#connecting-to-a-dut","title":"Connecting to a DUT","text":"<p>All DUTs in a virtual Infamy topology are emulated in Qemu instances managed by qeneth.  If you want to watch what's happening on one of the target systems, e.g., tail a log file or run <code>tcpdump</code> during the test, there is another helper script in Infamy for this:</p> <pre><code>$ ./test/console 1\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\n\nInfix OS \u2014 Immutable.Friendly.Secure v23.11.0-226-g0c144da (console)\ninfix-00-00-00 login: admin\nPassword:\n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-'\n\nRun the command 'cli' for interactive OAM\n\nadmin@infix-00-00-00:~$\n</code></pre> <p>From here we can observe <code>dut1</code> freely while running tests.</p> <p>The <code>console</code> script uses <code>telnet</code> to connect to a port forwarded to <code>localhost</code> by the Docker container.  To exit Telnet, use Ctrl-] and then 'q' followed by enter.  This can be customized in <code>~/.telnetrc</code></p> <p>Like the <code>shell</code> script, <code>console</code> takes an optional \"system\" argument in case you run multiple instances of Infamy:</p> <pre><code>$ ./test/console 1 infamy2\n</code></pre> <p>You can also connect to the console of a DUT from within a <code>shell</code>:</p> <pre><code>$ ./test/shell\n11:42:54 infamy0:test # qeneth status\n11:42:54 infamy0:test # qeneth console dut1\nlogin: admin\npassword: *****\nadmin@infix-00-00-00:~$\n</code></pre> <p>Note: disconnect from the qeneth console by using bringing up the old Telnet \"menu\" using Ctrl-], compared to standard Telnet this is the BusyBox version so you press 'e' + enter instead of 'q' to quit.</p>"},{"location":"testing/#attaching-to-macvlans","title":"Attaching to MACVLANs","text":"<p>To fully isolate the host's interfaces from one another, many tests will stack a MACVLAN on an interface, which is then placed in a separate network namespace.</p> <p>It is often useful to attach to those namespaces, so that you can interactively inject traffic into the test setup.</p> <p>First, connect to the Infamy instance in question:</p> <pre><code>$ ./test/shell\n11:43:19 infamy0:test #\n</code></pre> <p>Then, attach to the MACVLAN namespace by running the <code>nsenter</code> helper script from the test directory, supplying the base interface name as the first argument:</p> <pre><code>11:43:19 infamy0:test # ./nsenter d1b\n11:43:20 infamy0(d1b):test #\n</code></pre> <p>By default, an interactive shell is started, but you can also supply another command:</p> <pre><code>11:43:19 infamy0:test # ./nsenter d1b ip -br addr\nlo               UNKNOWN        127.0.0.1/8 ::1/128\niface@if7        UP             10.0.0.1/24 fe80::38d0:88ff:fe77:b7cd/64\n</code></pre> <p>You can now freely debug the network activity of your test and the responses from the DUT.</p>"},{"location":"testing/#using-the-python-debugger","title":"Using the Python Debugger","text":"<p>The built in <code>breakpoint()</code> function in Python is very useful when you want to run a test case to a certain point at which you might want to interactively inspect either the test's or the device's state.</p> <p>Simply insert a call to <code>breakpoint()</code> at the point of interest in your test and run it as normal. Once Python executes the call, it will drop you into the Python debugger:</p> <pre><code>11:42:58 infamy0:test # ./case/infix_dhcp/dhcp_basic.py\n# Starting (2024-02-10 11:42:59)\n# Probing dut1 on port d1a for IPv6LL mgmt address ...\n# Connecting to mgmt IP fe80::ff:fe00:0%d1a:830 ...\nok 1 - Initialize\n&gt; /home/jocke/src/infix/test/case/infix_dhcp/dhcp_basic.py(44)&lt;module&gt;()\n(Pdb)\n</code></pre> <p>At this point you have full access to the test's state, but it is also an opportunity to inspect the state of the DUTs (e.g. via their console or over SSH).</p> <p>It is also possible to run a test under Pdb from the get-go, if you want to setup breakpoints without modifying the source, or simply step through the code:</p> <pre><code>11:42:58 infamy0:test # python -m pdb case/infix_dhcp/dhcp_basic.py\n</code></pre>"},{"location":"testing/#deterministic-topology-mappings","title":"Deterministic Topology Mappings","text":"<p>By default, mappings from logical to physical topologies are not stable across test case executions. This can be very frustrating when debugging a failing test, since logical nodes are suffled around between phyical nodes. In such cases, supplying a <code>PYTHONHASHSEED</code> variable (set to any 32-bit unsigned integer) when launching the test environment will make sure that topology mappings are deterministic:</p> <pre><code>$ make PYTHONHASHSEED=0 test-sh\n</code></pre> <p>If a seed is not supplied, a random value is chosen. This seed is logged by the <code>meta/reproducible.py</code> test case when running a test suite:</p> <pre><code>$ make test\nInfo: Generating topology\nInfo: Generating node YAML\nInfo: Generating executables\nInfo: Launching dut1\nInfo: Launching dut2\nInfo: Launching dut3\nInfo: Launching dut4\n9PM - Simplicity is the ultimate sophistication\n\nStarting test 0002-reproducible.py\n2024-05-03 10:40:30 # Starting (2024-05-03 10:40:30)\n2024-05-03 10:40:30 # Specify PYTHONHASHSEED=3773822171 to reproduce this test environment\n2024-05-03 10:40:30 ok 1 - $PYTHONHASHSEED is set\n2024-05-03 10:40:30 # Exiting (2024-05-03 10:40:30)\n2024-05-03 10:40:30 1..1\n...\n</code></pre> <p>This is useful because this value can then be used to rerun a test (or the whole suite) with identical topology mappings:</p> <pre><code>$ make PYTHONHASHSEED=3773822171 TESTS=case/ietf_system/hostname.py test\n</code></pre>"},{"location":"testing/#deterministic-transport-protocol","title":"Deterministic Transport Protocol","text":"<p>By default, the communication transport protocol (NETCONF/RESTCONF) is chosen randomly.  If you supply a <code>PYTHONHASHSEED</code> as described above, you get the same protocol used for that hash.  But if you want to choose the protocol, add extra arguments to Infamy:</p> <pre><code>$ make INFAMY_EXTRA_ARGS=\"--transport=restconf\" TESTS=case/ietf_system/hostname.py test\n</code></pre> <p>or, when running interactively:</p> <pre><code>$ make test-sh\n09:08:17 infamy0:test # ./9pm/9pm.py -o\"--transport=restconf\" case/ietf_system/hostname.py\n</code></pre>"},{"location":"testing/#test-specification","title":"Test specification","text":"<p>The test specification is automaticly generated from the test cases, this puts some constraints on the test cases:</p> <p>All test cases must be written so that it can be understandable with only the steps so the result can be reproduced manually.  E.g., instead of <code>set ip address on the interface</code> it should be more human readable, for example:</p> <p><pre><code>test.step(\"Set IPv4 address on the interface dut:cross\")\ntest.step(\"Verify the IP address is set on dut:cross\")\n</code></pre> where dut, cross and the IPv4 address could be found inside the logical topology for the test.</p> <p>Each test case must begin with the test name followed by a empty line and the description of the test. For example:</p> <pre><code>\"\"\"\nSet hostname\n\nVerify that it it possible to change hostname\n\"\"\"\n</code></pre> <p>The test specifaction can be genererated with:</p> <pre><code>$ make test-spec\n</code></pre>"},{"location":"testing/#test-development","title":"Test Development","text":"<p>For adding a new test to the automated regression test suite, it's best to start by reviewing an existing test case.</p> <p>All tests are located in the <code>infix/test/case</code> repository and are  grouped by the features they verify. For example,  <code>infix/test/case/infix_services</code> contains tests for various Infix  services, such as LLDP and mDNS.</p> <p>While test grouping is flexible, each test should be placed in a  logically relevant category.</p> <p>When creating a new test group, add it to <code>infix/test/case/all.yaml</code>, to enable it to run as a  subset of the test suite:</p> <pre><code>- name:  infix-services\n  suite: infix_services/infix_services.yaml\n</code></pre> <p>A new test (e.g., lldp_enable_disable) should be added to the  corresponding test group .yaml file, such as  <code>infix/test/cases/infix_services.yaml</code>:</p> <pre><code>- name: lldp_enable_disable\n  case: lldp_enable_disable/test.py\n</code></pre> <p>It is necessary to include the test in  <code>infix/test/case/infix_services/Readme.adoc</code> to ensure proper test  specification generation:</p> <pre><code>include::lldp_enable_disable/Readme.adoc[]\n</code></pre> <p>Each test case should have its own directory under,  <code>infix/test/case/infix_services</code>, containing:    - <code>test.py</code> - the test script   - <code>topology.dot</code> - the logical topology definition.</p> <p>When the test specification is generated,  <code>topology.svg</code> and <code>Readme.adoc</code> should also be created. </p>"},{"location":"tunnels/","title":"Tunnel configuration","text":"<p>Tunnel traffic from point A to point B</p>"},{"location":"tunnels/#generic-routing-encapsulation-gre","title":"Generic Routing Encapsulation (GRE)","text":"<p>The support for GRE tunnels includes IPv4 and IPv6 tunnels both in GRE (IP) and GRETAP (MAC) modes. <pre><code>admin@example:/config/&gt; edit interface gre1\nadmin@example:/config/interface/gre1/&gt; set type gretap\nadmin@example:/config/interface/gre1/&gt; set gre local 192.168.3.1 remote 192.168.3.2\nadmin@example:/config/interface/gre1/&gt; leave\nadmin@example:/&gt;\n</code></pre></p>"},{"location":"tunnels/#virtual-extensible-local-area-network-vxlan","title":"Virtual eXtensible Local Area Network (VXLAN)","text":"<p>The support for VXLAN tunnels includes IPv4 and IPv6.</p> <pre><code>admin@example:/config/&gt; edit interface vxlan100\nadmin@example:/config/interface/vxlan100/&gt; set vxlan local 192.168.3.1\nadmin@example:/config/interface/vxlan100/&gt; set vxlan remote 192.168.3.2\nadmin@example:/config/interface/vxlan100/&gt; set vxlan vni 100\nadmin@example:/config/interface/vxlan100/&gt; leave\n</code></pre>"},{"location":"upgrade/","title":"Upgrading &amp; Boot Order","text":"<p>For resilience purposes, Infix maintains two software images referred to as the primary and secondary partition image.  In addition, some bootloaders support netbooting.</p> <p>The boot order defines which image is tried first, and is listed with the CLI <code>show software</code> command. It also shows Infix version installed per partition, and which image was used when booting (<code>STATE booted</code>).</p> <pre><code>admin@example:/&gt; show software\nBOOT ORDER\nprimary secondary net\n\nNAME      STATE     VERSION                DATE\nprimary   booted    v25.01.0               2025-04-25T10:15:00+00:00\nsecondary inactive  v25.01.0               2025-04-25T10:07:20+00:00\nadmin@example:/&gt;\n</code></pre> <p>YANG support for upgrading Infix, inspecting and modifying the boot-order, is defined in infix-system-software.</p>"},{"location":"upgrade/#upgrading","title":"Upgrading","text":"<p>Upgrading Infix is done one partition at a time. If the system has booted from one partition, an <code>upgrade</code> will apply to the other (inactive) partition.</p> <ol> <li>Download and unpack the release to install. Make the image pkg    bundle available at some URL<sup>2</sup></li> <li>(Optional) Backup the startup configuration</li> <li>Assume the unit has booted the <code>primary</code> image. Then running the    <code>upgrade</code> command installs a new image on the <code>secondary</code> partition</li> <li>As part of a successful upgrade, the boot-order is implictly    changed to boot the newly installed image</li> <li>Reboot the unit</li> <li>The unit now runs the new image. To upgrade the remaining partition    (<code>primary</code>), run the same upgrade command again, and (optionally)    reboot to verify the upgrade</li> </ol> <p>Caution</p> <p>During boot (step 5), the unit may migrate the startup configuration for any syntax changes.  It is therefore important that you make sure to upgrade the other partition as well after reboot, of course after having verified your setup.</p> <p>The CLI example below shows steps 2-5.</p> <p>Backup startup configuration: It is recommended to backup the startup configuration before performing an upgrade. The backup is useful if the upgrade fails, and makes a later downgrade a smoother process.</p> <pre><code>admin@example:/&gt; dir /cfg\n/cfg directory\nbackup/             ssl/                startup-config.cfg\n\nadmin@example:/&gt; copy /cfg/startup-config.cfg /cfg/v25.01.0-startup-config.cfg\nadmin@example:/&gt; dir /cfg\n/cfg directory\nbackup/             ssl/                startup-config.cfg           v25.01.0-startup-config.cfg\n\nadmin@example:/&gt; \n</code></pre> <p>Upgrade: Here the image pkg bundle was made available via TFTP.</p> <pre><code>admin@example:/&gt; upgrade tftp://198.18.117.1/infix-aarch64-25.03.1.pkg\ninstalling\n  0% Installing\n  0% Determining slot states\n 10% Determining slot states done.\n...\n 98% Copying image to rootfs.1\n 99% Copying image to rootfs.1\n 99% Copying image to rootfs.1 done.\n 99% Updating slots done.\n100% Installing done.\nInstalling `tftp://198.18.117.1/infix-aarch64-25.03.1.pkg` succeeded\nadmin@example:/&gt;\n</code></pre> <p>Reboot: The unit will boot on the other partition, with the newly installed image. The <code>Loading startup-config</code> step conducts migration of startup configuration if applicable.</p> <pre><code>admin@example:/&gt; reboot\n[ OK ] Stopping Static routing daemon\n[ OK ] Stopping Zebra routing daemon\n...\n[ OK ] Loading startup-config\n[ OK ] Verifying self-signed https certificate\n[ OK ] Update DNS configuration\n[ OK ] Starting Status daemon\n\nInfix OS \u2014 Immutable.Friendly.Secure v25.03.1 (ttyS0)\nexample login: admin\nPassword:\n.-------.\n|  . .  | Infix OS \u2014 Immutable.Friendly.Secure\n|-. v .-| https://kernelkit.org\n'-'---'-'\n\nRun the command 'cli' for interactive OAM\n\nadmin@example:~$ cli\n\nSee the 'help' command for an introduction to the system\n\nadmin@example:/&gt; show software\nBOOT ORDER\nsecondary primary net\n\nNAME      STATE     VERSION                DATE\nprimary   inactive  v25.01.0               2025-04-25T10:15:00+00:00\nsecondary booted    v25.03.1               2025-04-25T10:24:31+00:00\nadmin@example:/&gt;\n</code></pre> <p>As shown, the boot order has been updated, so that secondary is now the preferred boot source.</p> <p>To upgrade the remaining partition (<code>primary</code>), run the <code>upgrade URL</code> command again, and (optionally) reboot.</p>"},{"location":"upgrade/#configuration-migration","title":"Configuration Migration","text":"<p>The example above illustrated an upgrade from Infix v25.01.0 to v25.03.1. Inbetween these versions, YANG configuration definitions changed slightly (more details given below).</p> <p>During boot, Infix inspects the <code>version</code> meta information within the startup configuration file to determine if configuration migration is needed. In this specific case, the configuration file has version <code>1.4</code> while the booted software expects version <code>1.5</code> (the configuration version numbering differs from the Infix image version numbering).  The startup configuration is migrated to <code>1.5</code> definitions and stored, while a backup previous startup configuration is stored in directory <code>/cfg/backup/</code>.</p> <pre><code>admin@example:/&gt; dir /cfg/backup/\n/cfg/backup/ directory\nstartup-config-1.4.cfg\n\nadmin@example:/&gt;\n</code></pre> <p>The modifications made to the startup configuration can be viewed by comparing the files from the shell. An example is shown below.</p> <pre><code>admin@example:/&gt; exit\nadmin@example:~$ diff /cfg/backup/startup-config-1.4.cfg /cfg/startup-config.cfg\n--- /cfg/backup/startup-config-1.4.cfg\n+++ /cfg/startup-config.cfg\n...\n-          \"public-key-format\": \"ietf-crypto-types:ssh-public-key-format\",\n+          \"public-key-format\": \"infix-crypto-types:ssh-public-key-format\",\n...\n-          \"private-key-format\": \"ietf-crypto-types:rsa-private-key-format\",\n+          \"private-key-format\": \"infix-crypto-types:rsa-private-key-format\",\n...\n-    \"version\": \"1.4\"\n+    \"version\": \"1.5\"\n...\nadmin@example:~$\n</code></pre>"},{"location":"upgrade/#downgrading","title":"Downgrading","text":"<p>Downgrading to an earlier version is possible, however, downgrading is not guaranteed to work smoothly.  In particular, when the unit boots up with the downgraded version, it may fail to apply the startup config, and instead apply its failure config.</p> <p>We consider two cases: downgrading with and without applying a backup startup configuration before rebooting.</p> <p>In both cases we start out with a unit running Infix v25.03.1, and wish to downgrade to v25.01.0.</p> <pre><code>admin@example:/&gt; show software\nBOOT ORDER\nprimary secondary net\n\nNAME      STATE     VERSION                DATE\nprimary   booted    v25.03.1               2025-04-25T11:36:26+00:00\nsecondary inactive  v25.03.1               2025-04-25T10:24:31+00:00\nadmin@example:/&gt;\n</code></pre>"},{"location":"upgrade/#with-backup-startup-config","title":"With Backup <code>startup-config</code>","text":"<p>This is the recommended approach to downgrade, given that you have a backup configuration available.  The objective is to avoid ending up with the unit in failure config.</p> <ol> <li>Find the backup configuration file</li> <li>Run <code>upgrade URL</code> to install Infix image to downgrade to</li> <li>Copy backup startup configuration to current startup configuration    (from shell)</li> <li>Reboot</li> </ol> <p>Find the backup configuration file:</p> <p>Assume you have a backup startup config for the Infix version to downgrade to (here Infix v25.01.0, config <code>version 1.4</code>).</p> <p>The preferred approach is to use a startup configuration backed up when running Infix v25.01.0 on the unit.  See section Upgrading above for more information.  In the following example, there is a backup file available named <code>v25.01.0-startup-config.cfg</code>:</p> <pre><code>admin@example:/&gt; dir /cfg\n/cfg directory\nbackup/       ssl/       startup-config.cfg    v25.01.0-startup-config.cfg\n\nadmin@example:/&gt; \n</code></pre> <p>The alternative is to use a startup config implicitly backed up by the system as part of Configuration Migration.</p> <pre><code>admin@example:/&gt; dir /cfg/backup/\n/cfg/backup/ directory\nstartup-config-1.4.cfg\n\nadmin@example:/&gt;\n</code></pre> <p>Caution</p> <p>Using a backup configuration file stored when the unit was running the old version (e.g., v25.01.0-startup-config.cfg) is preferred.  Although backup files stored due to configuration migration (e.g., <code>startup-config-1.4.cfg</code>) usually works too if the configuration file version (<code>1.4</code>) matches, there are situations when the system may fail to apply it as described below.</p> <p>The configuration file version (<code>1.4</code>) is only incremented when changes in YANG configuration syntax mandates it to handle upgrading. Say the next Infix version includes a new feature setting, it can still have version <code>1.4</code>, as upgrading to it would not need migration. If a user then enables the new feature setting, the new configuration will no longer be compatible with the previous Infix version. A downgrade after enabling new features risks ending up with the unit in failure config.</p> <p>Use <code>upgrade</code> command to downgrade:</p> <pre><code>admin@example:/&gt; upgrade tftp://198.18.117.1/infix-aarch64-25.01.0.pkg\ninstalling\n  0% Installing\n  0% Determining slot states\n 10% Determining slot states done.\n ...\n 99% Copying image to rootfs.1 done.\n 99% Updating slots done.\n100% Installing done.\nInstalling `tftp://198.18.117.1/infix-aarch64-25.01.0.pkg` succeeded\nadmin@example:/&gt;\n</code></pre> <p>Apply the backup configuration file:</p> <p>It is recommended to use a backup configuration file for the Infix version to downgrade to, if there is one available.</p> <pre><code>admin@example:/&gt; copy /cfg/v25.01.0-startup-config.cfg /cfg/startup-config.cfg\nOverwrite existing file /cfg/startup-config.cfg (y/N)? y\nadmin@example:/&gt;\n</code></pre> <p>An alternative is to use a backup file stored when the system conducted a configuration migration. See the caution note above.</p> <pre><code>admin@example:/&gt; copy /cfg/backup/startup-config-1.4.cfg /cfg/startup-config.cfg\nOverwrite existing file /cfg/startup-config.cfg (y/N)? y\nadmin@example:/&gt;\n</code></pre> <p>Reboot:</p> <p>The unit will come up with the applied backup configuration.</p> <pre><code>admin@example:/&gt; reboot\n[ OK ] Saving system clock to file\n[ OK ] Stopping Software update service\n[ OK ] Stopping Status daemon\n...\n[ OK ] Bootstrapping YANG datastore\n[ OK ] Starting Configuration daemon\n[ OK ] Loading startup-config\n[ OK ] Update DNS configuration\n[ OK ] Verifying self-signed https certificate\n[ OK ] Starting Status daemon\n\nInfix OS \u2014 Immutable.Friendly.Secure v25.01.0 (ttyS0)\nexample login:\n</code></pre> <p>Note</p> <p>If the unit despite these measures ends up in failure config, see the next section for more information on how to recover.</p>"},{"location":"upgrade/#without-a-backup-startup-config","title":"Without a Backup <code>startup-config</code>","text":"<p>This procedure assumes you have access to the unit's console port and its default login credentials<sup>1</sup>.</p> <ol> <li>Downgrade</li> <li>Reboot</li> <li>Login with unit's default credentials</li> <li>Conduct factory reset</li> <li>(Then go on configure the unit as you wish)</li> </ol> <p>Use <code>upgrade</code> command to downgrade:</p> <pre><code>admin@example:/&gt; upgrade tftp://198.18.117.1/infix-aarch64-25.01.0.pkg\ninstalling\n  0% Installing\n  0% Determining slot states\n 10% Determining slot states done.\n ...\n 99% Copying image to rootfs.1 done.\n 99% Updating slots done.\n100% Installing done.\nInstalling `tftp://198.18.117.1/infix-aarch64-25.01.0.pkg` succeeded\nadmin@example:/&gt;\n</code></pre> <p>Reboot:</p> <p>Conduct a reboot. During boot, the unit fails to apply the existing startup configuration (config version <code>1.5</code> while software expects version <code>1.4</code> or earlier), and instead applies its failure config. This is what is seen on the console when this situation occurs. Note that the login prompt displays <code>failed</code> as part of the hostname.</p> <pre><code>admin@example:/&gt; reboot\n[ OK ] Saving system clock to file\n[ OK ] Stopping Software update service\n[ OK ] Stopping Status daemon\n...\n[ OK ] Verifying SSH host keys\n[ OK ] Bootstrapping YANG datastore\n[ OK ] Starting Configuration daemon\n[FAIL] Loading startup-config\n[ OK ] Loading failure-config\n[ OK ] Verifying self-signed https certificate\n[ OK ] Starting Status daemon\n\nInfix OS \u2014 Immutable.Friendly.Secure v25.01.0 (ttyS0)\n\nERROR: Corrupt startup-config, system has reverted to default login credentials\nfailed-00-00-00 login:\n</code></pre> <p>To remedy a situation like this, you can login with the unit's default login credentials, preferrably via a console port. The unit's default credentials are typically printed on a sticker on the unit.</p> <pre><code>failed-00-00-00 login: admin\nPassword:\n\nRun the command 'cli' for interactive OAM\n\nadmin@failed-00-00-00:~$\n</code></pre> <p>When it is safe from a network operations perspective, you can conduct a factory reset and reboot. It is recommended to remove the unit from any production network before doing this, as a factory reset may enable undesired connectivity between the unit's ports.</p> <pre><code>admin@failed-00-00-00:~$ factory\nFactory reset device (y/N)? y\nfactory: scheduled factory reset on next boot.\nReboot now to perform reset, (y/N)? y\n[ OK ] Saving system time (UTC) to RTC\n[ OK ] Stopping mDNS alias advertiser\n...\n[ OK ] Starting Configuration daemon\n[ OK ] Loading startup-config\n[ OK ] Update DNS configuration\n[ OK ] Verifying self-signed https certificate\n[ OK ] Starting Status daemon\n[ OK ] Starting Status daemon\n\n\nPlease press Enter to activate this console.\n\nInfix OS \u2014 Immutable.Friendly.Secure v25.01.0 (ttyS0)\nexample login:\n</code></pre> <p>Continued configuration is done as with any unit after factory reset.</p> <ol> <li> <p>In failure config, Infix puts all Ethernet ports as individual interfaces. With direct access, one can connect with e.g., SSH, using link local IPv6 addresses. This as an alternative to connecting via a console port.\u00a0\u21a9</p> </li> <li> <p>Set up an FTP/TFTP/SFTP or HTTP/HTTPS server on the same LAN.\u00a0\u21a9</p> </li> </ol>"},{"location":"virtual/","title":"Virtual Environments","text":"<p>Infix primarily targets real hardware, deployment to the cloud is not a priority at the moment.  However, for development and testing purposes there is an <code>x86_64</code> build that runs in Qemu.</p> <p>These images also work with the Graphical Network Simulator (GNS3), which is a very user-friendly tool for playing around with simple to complex network setups, verifying interoperability between vendors, etc.</p>"},{"location":"virtual/#qemu","title":"QEMU","text":"<p>Note: installation for Debian/Ubuntu based systems: sudo apt install virt-manager -- dependencies ensure the relevant Qemu packages are pulled in as well.  Installing virt-manager helps set up Qemu networking on your system.</p> <p>A virtualized Infix x86_64 instance can easily be launched from a Linux system, with Qemu installed, by issuing:</p> <pre><code>./qemu.sh\n</code></pre> <p>from an unpacked release tarball.  From a built source tree of Infix the same functionality is bundled as:</p> <pre><code>make run\n</code></pre> <p>To change settings, e.g. networking, make run-menuconfig, or from a pre-built Infix release tarball, using ./qemu.sh -c</p> <p>The Infix test suite is built around Qemu and Qeneth, see:</p> <ul> <li>Regression Testing with Infamy</li> <li>Infamy Docker Image</li> </ul>"},{"location":"virtual/#gns3","title":"GNS3","text":"<p>Download the latest build of the <code>x86_64</code>, or <code>aarch64</code> if your host machine is Arm.  Unpack the tarball in a dedicated directory and use \"Import Appliance\" to install the <code>.gns3a</code> file into GNS3.</p> <p>Infix is in the \"Router\" category, it comes with 10 interfaces available by default for use as switch ports or routing.</p>"},{"location":"vpd/","title":"Vital Product Data","text":"<p>Infix can source Vital Product Data (VPD) from EEPROMs containing an ONIE TLV. The load bearing information from VPDs, used by Infix by default, is:</p> <ol> <li>Base (chassis) MAC address of the system</li> <li>Factory default admin password hash</li> </ol> <p>Additionally, every VPD is listed as a separate component in the ietf-hardware model, in which Infix exports all available attributes to the user. This is useful to read out exact hardware revisions of each board making up a system, figure out if a system belongs to a particular production batch, etc.</p>"},{"location":"vpd/#json-encoding","title":"JSON Encoding","text":"<p>To make EEPROM binary generation less cumbersome, Infix defines a JSON encoding of an ONIE TLV, and provides a tool, onieprom, to translate from one encoding to another. I.e. a JSON object can be translated to its binary equivalent, and vice versa.</p> <p>A mapping between TLV attribute IDs and JSON keys is defined, using the Linux kernel driver as a reference:</p> TLV ID Description Key Type <code>0x21</code> Product Name <code>\"product-name\"</code> String <code>0x22</code> Part Number <code>\"part-number\"</code> String <code>0x23</code> Serial Number <code>\"serial-number\"</code> String <code>0x24</code> MAC #1 Base <code>\"mac-address\"</code> String (\"c0:ff:ee:00:00:00\") <code>0x25</code> Manufacture Date <code>\"manufacture-date\"</code> String (\"MM/DD/YYYY HH:NN:SS\") <code>0x26</code> Device Version <code>\"device-version\"</code> Integer (u8) <code>0x27</code> Label Revision <code>\"label-revision\"</code> String <code>0x28</code> Platform Name <code>\"platform-name\"</code> String <code>0x29</code> ONIE Version <code>\"onie-version\"</code> String <code>0x2a</code> Num MACs <code>\"num-macs\"</code> Integer (u16) <code>0x2b</code> Manufacturer <code>\"manufacturer\"</code> String <code>0x2c</code> Country Code <code>\"country-code\"</code> String (ISO 3166-1 2-byte code) <code>0x2d</code> Vendor <code>\"vendor\"</code> String <code>0x2e</code> Diag Version <code>\"diag-version\"</code> String <code>0x2f</code> Service Tag <code>\"service-tag\"</code> String <code>0xfd</code> Vendor Extension <code>\"vendor-extension\"</code> List of extensions (see below) <p>The JSON encoding of a TLV is a single JSON object with an arbitrary subset of the attributes from the list above.</p> <p>Example: <pre><code>{\n    \"product-name\": \"Wacky Widget\",\n    \"serial-number\": \"#1\",\n    \"manufacture-date\": \"02/13/2024 11:29:52\"\n}\n</code></pre></p>"},{"location":"vpd/#vendor-extensions","title":"Vendor Extensions","text":"<p>As the specification explicitly mentions the option of supplying multiple vendor extensions, possibly multiple ones of the same type, the JSON chosen encoding is a list, where each element is itself a list of exactly two elements:</p> Element # Type 1 Integer (u32, IANA enterprise number) 2 String (UTF-8 encoded extension data) <p>The format of the extension data is defined by the entity indicated by the IANA enterprise number. Restricting extension data to UTF-8 encoded strings is a decision imposed by Infix; the ONIE specification allows for arbitrary binary data.</p> <p>Example:</p> <pre><code>{\n    ...\n    \"vendor-extension\": [\n        [ 12345, \"my extension data\" ]\n    ]\n}\n</code></pre>"},{"location":"vpd/#infix-specific-extensions","title":"Infix Specific Extensions","text":"<p>Kernelkit's IANA enterprise number is <code>61046</code>, under which any extensions required by Infix are stored. The only valid extension data that may be stored under this number is documented in this section. If other device specific data needs to be stored in a VPD, you must associate that with an enterprise number under our control.</p> <p>Every Kernelkit extension must be a valid JSON object containing an arbitrary subset of the following attributes:</p> Key Value Description <code>\"pwhash\"</code> String (output of <code>mkpasswd(1)</code>) Factory default password for <code>admin</code> <p>Since the extension is itself stored in a JSON document, it has to be appropriately quoted.</p> <p>Example:</p> <pre><code>{\n    ...\n    \"vendor-extension\": [\n        [ 61046, \"{\\\"pwhash\\\":\\\"$6$9rufAxdqCrxrwfQR$G0l9cTVlu/vOhxgo/uMKfRDOmZRd5XWF3vKr5da6qYoxuTJBS/Pl9K.5lrabWoWFFc.71yFMaSlZz0O8FtAtl.\\\"}\" ]\n    ]\n}\n</code></pre>"},{"location":"vpd/#creating-and-parsing-onie-eeprom-binaries","title":"Creating and Parsing ONIE EEPROM Binaries","text":"<pre><code>usage: onieprom [-h] [-e] [-d] [infile] [outfile]\n\npositional arguments:\n  infile\n  outfile\n\noptions:\n  -h, --help    show this help message and exit\n  -e, --encode  Encode JSON input to binary output\n  -d, --decode  Decode binary input to JSON output\n</code></pre> <p>To convert a compatible JSON document (using the first example above) to its binary equivalent, we ask onieprom to encode it for us:</p> <pre><code>~$ onieprom -e example.json &gt;example.bin\n~$ hexdump -C example.bin\n00000000  54 6c 76 49 6e 66 6f 00  01 00 2d 25 13 30 32 2f  |TlvInfo...-%.02/|\n00000010  31 33 2f 32 30 32 34 20  31 31 3a 32 39 3a 35 32  |13/2024 11:29:52|\n00000020  21 0c 57 61 63 6b 79 20  57 69 64 67 65 74 23 02  |!.Wacky Widget#.|\n00000030  23 31 fe 04 dd 69 88 97                           |#1...i..|\n00000038\n</code></pre> <p>We can also run the process in reverse, to inspect the contents of a binary in its equivalent JSON representation:</p> <pre><code>~$ onieprom -d example.bin &gt;example-again.json\n~$ jq . example-again.json\n{\n  \"manufacture-date\": \"02/13/2024 11:29:52\",\n  \"product-name\": \"Wacky Widget\",\n  \"serial-number\": \"#1\"\n}\n</code></pre>"},{"location":"wifi/","title":"Wi-Fi (Wireless LAN)","text":"<p>Infix includes built-in Wi-Fi client support for connecting to wireless networks. When a compatible Wi-Fi adapter is detected, the system automatically begins scanning for available networks.</p>"},{"location":"wifi/#current-limitations","title":"Current Limitations","text":"<ul> <li>Only client mode is supported (no access point functionality)</li> <li>USB hotplug is not supported - adapters must be present at boot</li> <li>Interface naming may be inconsistent with multiple USB Wi-Fi adapters</li> </ul>"},{"location":"wifi/#supported-wi-fi-adapters","title":"Supported Wi-Fi Adapters","text":"<p>Wi-Fi support is primarily tested with Realtek chipset-based adapters.</p>"},{"location":"wifi/#known-working-chipsets","title":"Known Working Chipsets","text":"<ul> <li>RTL8821CU</li> <li>Other Realtek chipsets may work but are not guaranteed</li> </ul> <p>Some Realtek chipsets require proprietary drivers not included in the standard kernel</p> <pre><code>     Firmware requirements vary by chipset\n     Check kernel logs if your adapter is not detected\n</code></pre>"},{"location":"wifi/#configuration","title":"Configuration","text":"<p>Add a supported Wi-Fi network device. To verify that it has been detected, look for <code>wifi0</code> in <code>show interfaces</code></p> <p><pre><code>admin@example:/&gt;  show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nlo              loopback   UP\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\ne1              ethernet   UP          02:00:00:00:00:01\n                ipv6                   fe80::ff:fe00:1/64 (link-layer)\n                ipv6                   fec0::ff:fe00:1/64 (link-layer)\nwifi0           ethernet   DOWN        f0:09:0d:36:5f:86\n                wifi                   ssid: ------, signal: ------\n</code></pre> Add the new Wi-Fi interface to the configuration to start scanning. <pre><code>admin@example:/config/&gt; set interface wifi0\nadmin@example:/config/&gt; leave\n</code></pre> Now the system will now start scanning in the background. To see the result read the operational datastore for interface <code>wifi0</code> or use the CLI</p> <pre><code>admin@infix-00-00-00:/&gt; show interfaces name wifi0\nname                : wifi0\ntype                : wifi\nindex               : 3\nmtu                 : 1500\noperational status  : down\nphysical address    : f0:09:0d:36:5f:86\nipv4 addresses      :\nipv6 addresses      :\nSSID                : ----\nSignal              : ----\n\nSSID                                    ENCRYPTION                    SIGNAL\nssid1                                   WPA2-Personal                 excellent\nssid2                                   WPA2-Personal                 excellent\nssid3                                   WPA2-Personal                 excellent\nssid4                                   WPA2-Personal                 good\nssid5                                   WPA2-Personal                 good\nssid6                                   WPA2-Personal                 good\n</code></pre> <p>In the CLI, signal strength is reported as: excellent, good, poor or bad. For precise values, use NETCONF or RESTCONF, where the RSSI (in dBm) is available in the operational datastore.</p> <p>Configure your Wi-Fi secret in the keystore, it should be between 8 and 63 characters</p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit keystore symmetric-key example\nadmin@example:/config/keystore/symmetric-key/example/&gt; set key-format wifi-preshared-key-format\nadmin@example:/config/keystore/symmetric-key/example/&gt; set cleartext-key mysecret\nadmin@example:/config/keystore/symmetric-key/example/&gt; leave\nadmin@example:/&gt;\n</code></pre> <p>Configure the Wi-Fi settings, set secret to the name selected above for the symmetric key, in this case <code>example</code>.</p> <p>WPA2 or WPA3 encryption will be automatically selected based on what the access point supports. No manual selection is required unless connecting to an open network. No support for certificate based authentication yet.</p> <p>Unencrypted network is also supported, to connect to an unencrypted network (generally not recommended): <pre><code>admin@example:/config/interface/wifi0/&gt; set wifi encryption disabled\n</code></pre></p> <p>A valid <code>country-code</code> is also required for regulatory compliance, the valid codes are documented in the YANG model <code>infix-wifi-country-codes</code></p> <pre><code>admin@example:/&gt; configure\nadmin@example:/config/&gt; edit interface wifi0\nadmin@example:/config/interface/wifi0/&gt;\nadmin@example:/config/interface/wifi0/&gt; set wifi ssid ssid1\nadmin@example:/config/interface/wifi0/&gt; set wifi secret example\nadmin@example:/config/interface/wifi0/&gt; set wifi country-code SE\nadmin@example:/config/interface/wifi0/&gt; leave\n</code></pre> <p>The Wi-Fi negotiation should now start immediately, provided that the SSID and pre-shared key are correct. You can verify the connection by running <code>show interfaces</code> again.</p> <pre><code>admin@example:/&gt; show interfaces\nINTERFACE       PROTOCOL   STATE       DATA\nlo              loopback   UP\n                ipv4                   127.0.0.1/8 (static)\n                ipv6                   ::1/128 (static)\ne1              ethernet   UP          02:00:00:00:00:01\n                ipv6                   fe80::ff:fe00:1/64 (link-layer)\n                ipv6                   fec0::ff:fe00:1/64 (link-layer)\nwifi0           ethernet   UP          f0:09:0d:36:5f:86\n                wifi                   ssid: ssid1, signal: excellent\n\nadmin@example:/&gt;\n</code></pre>"},{"location":"wifi/#troubleshooting-connection-issues","title":"Troubleshooting Connection Issues","text":"<p>Use <code>show wifi scan wifi0</code> and <code>show interfaces</code> to verify signal strength and connection status. If issues arise, try the following troubleshooting steps:</p> <ol> <li>Verify signal strength: Check that the target network shows \"good\" or \"excellent\" signal</li> <li>Check credentials: Verify the preshared key in <code>ietf-keystore</code></li> <li>Review logs: Check system logs with <code>show log</code> for Wi-Fi related errors</li> <li>Regulatory compliance: Ensure the country-code matches your location</li> <li>Hardware detection: Confirm the adapter appears in <code>show interfaces</code></li> </ol> <p>If issues persist, check the system log for specific error messages that can help identify the root cause.</p>"},{"location":"cli/configure/","title":"CLI Configure Context","text":"<p>Enter the configure context from admin-exec by typing <code>configure</code> followed by Enter.  Available commands, press <code>?</code> at the prompt:</p> <pre><code>admin@host:/&gt; configure\nadmin@host:/config/&gt;\n  abort        Abandon candidate\n  change       Interactively change setting, e.g. password\n  check        Validate candidate\n  commit       Commit current candidate to running-config\n  delete       Delete configuration setting(s)\n  diff         Summarize uncommitted changes\n  do           Execute operational mode command\n  edit         Descend to the specified configuration node\n  end          Alias to up, leave this subsection/node\n  exit         Ascend to the parent configuration node, or abort (from top)\n  leave        Finalize candidate and apply to running-config\n  no           Alias for delete\n  rollback     Restore candidate to running-config\n  set          Set configuration setting\n  show         Show configuration\n  text-editor  Modify binary content in a text editor\n  top          Ascend to the configuration root\n  up           Ascend to the parent configuration node\n</code></pre> <p>The <code>edit</code> command lets you change to a sub-configure context, e.g.:</p> <pre><code>admin@host:/config/&gt; edit interface eth0\nadmin@host:/config/interface/eth0/&gt;\n</code></pre> <p>Use <code>up</code> to go up one level.</p> <pre><code>admin@host:/config/interface/eth0/&gt; up\nadmin@host:/config/&gt;\n</code></pre> <p>Note: commands in configure context are automatically generated from the system's YANG models, hence different products likely have a different set of commands.  However, both the <code>ietf-interfaces.yang</code> and <code>ietf-ip.yang</code> models, for instance, that provide the networking support are common to all systems.</p>"},{"location":"cli/configure/#set-ip-address-on-an-interface","title":"Set IP Address on an Interface","text":"<pre><code>admin@host:/config/&gt; edit interface eth0\nadmin@host:/config/interface/eth0/&gt;\nadmin@host:/config/interface/eth0/&gt; set ipv4 address 192.168.2.200 prefix-length 24\n</code></pre> <p>From anywhere in configure context you can see the changes you have made by typing <code>diff</code>:</p> <pre><code>admin@host:/config/interface/eth0/&gt; diff\ninterfaces {\n  interface eth0 {\n+    ipv4 {\n+      address 192.168.2.200 {\n+        prefix-length 24;\n+      }\n+    }\n  }\n}\n</code></pre>"},{"location":"cli/configure/#saving-changes","title":"Saving Changes","text":"<p>Apply the changes (from candidate to <code>running-config</code>):</p> <pre><code>admin@host:/config/interface/eth0/&gt; leave\nadmin@host:/&gt; show running-config\n...\ninterfaces {\n  interface eth0 {\n    type ethernetCsmacd;\n    ipv4 {\n      address 192.168.2.200 {\n        prefix-length 24;\n      }\n    }\n  }\n...\n</code></pre> <p>Since we did not get any warnings we can save the running (RAM only) configuration to startup, so the changes are made persistent across reboots:</p> <pre><code>admin@host:/&gt; copy running-config startup-config\n</code></pre> <p>The <code>startup-config</code> can also be inspected with the <code>show</code> command to verify the changes are saved.</p> <p>Note: all commands need to be spelled out, no short forms are allowed in the CLI.  Use the <code>TAB</code> key to make your life easier.</p>"},{"location":"cli/configure/#changing-hostname","title":"Changing Hostname","text":"<p>Settings like hostname are located in the <code>ietf-system.yang</code> model. Here is how it can be set.</p> <pre><code>admin@host:/config/&gt; edit system\nadmin@host:/config/system/&gt; set hostname example\nadmin@host:/config/system/&gt; leave\nadmin@example:/&gt; \n</code></pre> <p>Notice how the hostname in the prompt does not change until the change is committed.</p> <p>Note: critical services like syslog, mDNS, LLDP, and similar that advertise the hostname, are restarted when the hostname is changed.</p>"},{"location":"cli/configure/#changing-password","title":"Changing Password","text":"<p>User management, including passwords, is also a part of <code>ietf-system</code>.</p> <pre><code>admin@host:/config/&gt; edit system authentication user admin\nadmin@host:/config/system/authentication/user/admin/&gt; change password\nNew password: \nRetype password: \nadmin@host:/config/system/authentication/user/admin/&gt; leave\n</code></pre> <p>The <code>change password</code> command starts an interactive dialogue that asks for the new password, with a confirmation, and then salts and encrypts the password with sha512crypt. </p> <p>It is also possible to use the <code>set password ...</code> command.  This allows setting an already hashed password.  To manually hash a password, use the <code>do password encrypt</code> command.  This launches the admin-exec command to hash, and optionally salt, your password.  This encrypted string can then be used with <code>set password ...</code>.</p> <p>Tip: if you are having trouble thinking of a password, there is also <code>do password generate</code>, which generates random but readable strings using the UNIX command <code>pwgen</code>.</p>"},{"location":"cli/configure/#ssh-authorized-key","title":"SSH Authorized Key","text":"<p>Logging in remotely with SSH is possible by adding a public key to a user.  Here we add the authorized key to the admin user, multiple keys are supported.</p> <p>With SSH keys in place it is possible to disable password login, just remember to verify SSH login and network connectivity before doing so.</p> <pre><code>admin@host:/config/&gt; edit system authentication user admin \nadmin@host:/config/system/authentication/user/admin/&gt; edit authorized-key example@host\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; set algorithm ssh-rsa\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; set key-data AAAAB3NzaC1yc2EAAAADAQABAAABgQC8iBL42yeMBioFay7lty1C4ZDTHcHyo739gc91rTTH8SKvAE4g8Rr97KOz/8PFtOObBrE9G21K7d6UBuPqmd0RUF2CkXXN/eN2PBSHJ50YprRFt/z/304bsBYkDdflKlPDjuSmZ/+OMp4pTsq0R0eNFlX9wcwxEzooIb7VPEdvWE7AYoBRUdf41u3KBHuvjGd1M6QYJtbFLQMMTiVe5IUfyVSZ1RCxEyAB9fR9CBhtVheTVsY3iG0fZc9eCEo89ErDgtGUTJK4Hxt5yCNwI88YaVmkE85cNtw8YwubWQL3/tGZHfbbQ0fynfB4kWNloyRHFr7E1kDxuX5+pbv26EqRdcOVGucNn7hnGU6C1+ejLWdBD7vgsoilFrEaBWF41elJEPKDzpszEijQ9gTrrWeYOQ+x++lvmOdssDu4KvGmj2K/MQTL2jJYrMJ7GDzsUu3XikChRL7zNfS2jYYQLzovboUCgqfPUsVba9hqeX3U67GsJo+hy5MG9RSry4+ucHs=\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; show\nalgorithm ssh-rsa;\nkey-data AAAAB3NzaC1yc2EAAAADAQABAAABgQC8iBL42yeMBioFay7lty1C4ZDTHcHyo739gc91rTTH8SKvAE4g8Rr97KOz/8PFtOObBrE9G21K7d6UBuPqmd0RUF2CkXXN/eN2PBSHJ50YprRFt/z/304bsBYkDdflKlPDjuSmZ/+OMp4pTsq0R0eNFlX9wcwxEzooIb7VPEdvWE7AYoBRUdf41u3KBHuvjGd1M6QYJtbFLQMMTiVe5IUfyVSZ1RCxEyAB9fR9CBhtVheTVsY3iG0fZc9eCEo89ErDgtGUTJK4Hxt5yCNwI88YaVmkE85cNtw8YwubWQL3/tGZHfbbQ0fynfB4kWNloyRHFr7E1kDxuX5+pbv26EqRdcOVGucNn7hnGU6C1+ejLWdBD7vgsoilFrEaBWF41elJEPKDzpszEijQ9gTrrWeYOQ+x++lvmOdssDu4KvGmj2K/MQTL2jJYrMJ7GDzsUu3XikChRL7zNfS2jYYQLzovboUCgqfPUsVba9hqeX3U67GsJo+hy5MG9RSry4+ucHs=;\nadmin@host:/config/system/authentication/user/admin/authorized-key/example@host/&gt; leave\n</code></pre> <p>Note: the <code>ssh-keygen</code> program already base64 encodes the public key data, so there is no need to use the <code>text-editor</code> command, <code>set</code> does the job.</p>"},{"location":"cli/configure/#creating-a-veth-pair","title":"Creating a VETH Pair","text":"<p>The following example creates a <code>veth0a &lt;--&gt; veth0b</code> virtual Ethernet pair which is useful for connecting, e.g., a container to the physical world.  Here we also add an IPv4 address to one end of the pair.</p> <pre><code>admin@host:/config/&gt; edit interface veth0a\nadmin@host:/config/interface/veth0a/&gt; set veth peer veth0b\nadmin@host:/config/interface/veth0a/&gt; set ipv4 address 192.168.0.1 prefix-length 24\nadmin@host:/config/interface/veth0a/&gt; up\nadmin@host:/config/&gt; diff\ninterfaces {\n+  interface veth0a {\n+    type veth;\n+    ipv4 {\n+      address 192.168.0.1 {\n+        prefix-length 24;\n+      }\n+    }\n+    veth {\n+      peer veth0b;\n+    }\n+  }\n+  interface veth0b {\n+    type veth;\n+    veth {\n+      peer veth0a;\n+    }\n+  }\n}\nadmin@host:/config/&gt; leave\n</code></pre> <p>See the bridging example below for more.</p> <p>Note: in the CLI you do not have to create the <code>veth0b</code> interface. The system infers this for you.  When setting up a VETH pair using NETCONF, however, you must include the <code>veth0b</code> interface.</p>"},{"location":"cli/configure/#creating-a-bridge","title":"Creating a Bridge","text":"<p>Building on the previous example, we now create a non-VLAN filtering bridge (<code>br0</code>) that forwards any, normally link-local, LLDP traffic between both its bridge ports: <code>eth0</code> and <code>vet0b</code>.</p> <pre><code>admin@host:/&gt; configure\nadmin@host:/config/&gt; edit interface br0\nadmin@host:/config/interface/br0/&gt; set bridge ieee-group-forward lldp\nadmin@host:/config/interface/br0/&gt; up\nadmin@host:/config/&gt; set interface eth0 bridge-port bridge br0\nadmin@host:/config/&gt; set interface veth0b bridge-port bridge br0\nadmin@host:/config/&gt; diff\ninterfaces {\n+  interface br0 {\n+    type bridge;\n+    bridge {\n+      ieee-group-forward lldp;\n+    }\n+  }\n  interface eth0 {\n+    bridge-port {\n+      bridge br0;\n+    }\n  }\n+  interface veth0a {\n+    type veth;\n+    ipv4 {\n+      address 192.168.0.1 {\n+        prefix-length 24;\n+      }\n+    }\n+    veth {\n+      peer veth0b;\n+    }\n+  }\n+  interface veth0b {\n+    type veth;\n+    veth {\n+      peer veth0a;\n+    }\n+    bridge-port {\n+      bridge br0;\n+    }\n+  }\n}\n</code></pre> <p>Both a physical port <code>eth0</code> and a virtual port <code>veth0b</code> (bridge side of the VETH pair from the previous example) are now bridged.  Any traffic ingressing one port will egress the other.  Only reserved IEEE multicast is filtered, except LLDP frames as shown above.</p> <p>Note: the bridge can be named anything, provided the interface name is not already taken.  However, for any name outside the pattern <code>br[0-9]+</code>, you have to set the interface type manually to <code>bridge</code>.</p>"},{"location":"cli/introduction/","title":"CLI Introduction","text":"<p>The command line interface (CLI, see-ell-aye) implements a CISCO-like, or Juniper Networks JunOS-like, CLI.  It is the traditional way of interacting with single network equipment like switches and routers. Today more advanced graphical NETCONF-based tools are available that allows for managing entire fleets of installed equipment.</p> <p>Nevertheless, when it comes to initial deployment and debugging, it is very useful to know how to navigate and use the CLI.  This very short guide intends to help you with that.</p> <p>New users usually get the CLI as the default \"shell\" when logging in, but the default <code>admin</code> user logs in to <code>bash</code>.  To access the CLI, type:</p> <pre><code>admin@host-12-34-56:~$ cli\n\nSee the 'help' command for an introduction to the system\n\nadmin@host-12-34-56:/&gt;\n</code></pre> <p>The prompt (beginning of the line) changes slightly.  Key commands available in any context are:</p> <pre><code>admin@host-12-34-56:/&gt; help                   # Try: Tab or ?\n...\nadmin@host-12-34-56:/&gt; show                   # Try: Tab or ?\nadmin@host-12-34-56:/&gt;                        # Try: Tab or ?\n</code></pre> <p>Note: even on an empty command line, you can tap the <code>Tab</code> or <code>?</code> keys. See <code>help keybindings</code> for more tips!</p>"},{"location":"cli/introduction/#key-concepts","title":"Key Concepts","text":"<p>The two modes in the CLI are the admin-exec and the configure context.</p> <p>The top-level context after logging in and starting the CLI is the admin-exec or \"main\" context.  It is used for querying system status, managing configuration files/profiles and doing advanced debugging.</p> <p>Available commands can be seen by pressing <code>?</code> at the prompt:</p> <pre><code>admin@host:/&gt;\n  configure      Create new candidate-config based on running-config\n  copy           Copy file or configuration, e.g., copy running-config startup-config\n  dir            List available configuration files\n  exit           Exit from CLI (log out)\n  factory-reset  Restore the system to factory default state\n  follow         Monitor a log file, use Ctrl-C to abort\n  help           Help system (try also the '?' key)\n  logout         Alias to exit\n  netcalc        IP subnet calculator, with subnetting\n  password       Password tools\n  ping           Ping a network host or multicast group\n  poweroff       Poweroff system (system policy may yield reboot)\n  reboot         Reboot system\n  remove         Remove a configuration file\n  set            Set operations, e.g., current date/time\n  show           Show system status and configuration files\n  tcpdump        Capture network traffic\n  upgrade        Install a software update bundle from remote or local file\n</code></pre> <p>The system has three main datastores (or files): factory, startup, and running that can be managed and inspected using the <code>copy</code>, <code>show</code>, and <code>configure</code> commands.  The traditional names used in the CLI for these are listed below:</p> <ul> <li><code>factory-config</code> the default configuration from factory for the    device, i.e., what the system returns to after a <code>factory-reset</code></li> <li><code>startup-config</code> created from <code>factory-config</code> at first boot after    factory reset.  Loaded as the system configuration on each boot</li> <li><code>running-config</code> what is actively running on the system.  If no    changes have been made since boot, it is the same as <code>startup-config</code></li> <li><code>candidate-config</code> is created from <code>running-config</code> when entering the    configure context.  Any changes made here can be discarded (<code>abort</code>,    <code>rollback</code>) or committed (<code>commit</code>, <code>leave</code>) to <code>running-config</code></li> </ul> <p>Edit the running configuration using the <code>configure</code> command.  This copies running to candidate, a temporary datastore, where changes are made:</p> <pre><code>admin@host-12-34-56:/&gt; configure\nadmin@host-12-34-56:/config/&gt; ...             # Try: Tab or ?\nadmin@host-12-34-56:/config/&gt; leave\n</code></pre> <p>The <code>leave</code> command activates the changes by issuing a transaction to, essentially, copy the candidate back to running.  Depending on the changes made, this can take a few seconds.  If the changes are invalid, i.e., not correct according to the underlying YANG models, a warning is shown and the session remains in configure context.  Use the <code>abort</code> command to cancel your changes, or investigate further with the <code>diff</code> command (see more below).</p> <p>To save configuration changes made to the <code>running-config</code> to persistent store, so the system will use them for consecutive reboots, use the <code>copy</code> command:</p> <pre><code>admin@host-12-34-56:/&gt; copy running-config startup-config\n</code></pre> <p>In configure context the following commands are available:</p> Command Description <code>set foo bar val</code> Set <code>bar</code> leaf node in <code>foo</code> subcontext to <code>val</code> <code>no foo bar</code> Clear/delete configuration made to <code>bar</code> in <code>foo</code> <code>edit foo baz</code> Enter <code>baz</code> sub-sub-context in <code>foo</code> subcontext <code>change password</code> Start password dialogue to change a user's password <code>text-editor foo</code> Open a text editor to edit binary setting <code>foo</code> <code>abort</code> Abort changes in configuration, return to admin-exec <code>exit</code> Exit one level sub-context, or abort from top-level <code>leave</code> Save changes to <code>running-config</code>, return to admin-exec <code>show [foo]</code> Show configured values (optionally in subcontext) <code>diff [foo]</code> Show uncommitted changes in candidate <code>do command</code> Call admin-exec command: <code>do show log</code> <code>commit</code>"},{"location":"cli/introduction/#example-session","title":"Example Session","text":"<p>Remember to use the <code>TAB</code> and <code>?</code> keys to speed up your navigation. See <code>help keybindings</code> for more tips!</p> <p>In this example we enter configure context to add an IPv4 address to interface <code>eth0</code>, then we apply the changes using the <code>leave</code> command.</p> <p>We inspect the system status to ensure the change took effect.  Then we save the changes for the next reboot.</p> <pre><code>admin@host-12-34-56:/&gt; configure\nadmin@host-12-34-56:/config/&gt; edit interface eth0\nadmin@host-12-34-56:/config/interface/eth0/&gt; set ipv4 &lt;TAB&gt;\n      address     autoconf bind-ni-name      enabled\n      forwarding  mtu      neighbor\nadmin@host-12-34-56:/config/interface/eth0/&gt; set ipv4 address 192.168.2.200 prefix-length 24\nadmin@host-12-34-56:/config/interface/eth0/&gt; show\ntype ethernetCsmacd;\nipv4 address 192.168.2.200 prefix-length 24;\nipv6 enabled true;\nadmin@host-12-34-56:/config/interface/eth0/&gt; diff\ninterfaces {\n  interface eth0 {\n+    ipv4 {\n+      address 192.168.2.200 {\n+        prefix-length 24;\n+      }\n+    }\n  }\n}\nadmin@host-12-34-56:/config/interface/eth0/&gt; leave\nadmin@host-12-34-56:/&gt; show interfaces brief\nlo               UNKNOWN        00:00:00:00:00:00 &lt;LOOPBACK,UP,LOWER_UP&gt;\neth0             UP             52:54:00:12:34:56 &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;\nadmin@host-12-34-56:/&gt; show ip brief\nlo               UNKNOWN        127.0.0.1/8 ::1/128\neth0             UP             192.168.2.200/24 fe80::5054:ff:fe12:3456/64\nadmin@host-12-34-56:/&gt; copy running-config startup-config\n</code></pre> <p>One of the ideas behind a separate running and startup configuration is to be able to verify a configuration change.  In case of an inadvertent change that, e.g., breaks networking, it is trivial to revert back by:</p> <pre><code>admin@host-12-34-56:/&gt; copy startup-config running-config\n</code></pre> <p>Or restarting the device.</p>"},{"location":"cli/keybindings/","title":"CLI Keybindings","text":"<p>Writing CLI commands by hand is very tedious.  To make things easier the CLI has several keybindings, most significant first:</p> Key Cmd/Key Description TAB Complete current command, see below for example ? Show available commands, or arguments, with help Ctrl-c Cancel everything on current line Ctrl-d <code>abort</code>/<code>exit</code> Delete character, or abort/exit on empty line Ctrl-z <code>leave</code> Leave and activate changes in configure context Ctrl-f Right arrow Move cursor forward one character Ctrl-b Left arrow Move cursor back one character Meta-f Ctrl-Right Move cursor forward one word Meta-b Ctrl-Left Move cursor back one word Ctrl-e End Move cursor to end of line Ctrl-a Home Move cursor to beginning of line Ctrl-k Kill (cut) text from cursor to end of line Ctrl-u Delete (cut) entire line Ctrl-y Yank (paste) from kill buffer to cursor Meta-. Yank (paste) last argument from previous line Ctrl-w Meta-Backspace Delete (cut) word to the left Meta-Delete Delete (cut) word to the right Ctrl-l Clear screen and refresh current line Ctrl-p Up arrow History, previous command Ctrl-n Down arrow History, next command Ctrl-r History, reversed interactive search (i-search)"},{"location":"cli/keybindings/#what-is-meta","title":"What is Meta?","text":"<p>The Meta key is called Alt on most modern keyboards.  If you have neither, first tap the Esc key instead of holding down Alt/Meta.</p>"},{"location":"cli/keybindings/#usage","title":"Usage","text":"<p>Complete a word.  Start by typing a few characters, then tap the TAB key on your keyboard:</p> <pre><code>conf&lt;TAB&gt; --&gt; configure\n</code></pre> <p>See possible arguments, with brief help text, to a command:</p> <pre><code>show ?\nbridge          Show bridge (ports/fdb/mdb/vlans)\ndatetime        Show current date and time, default RFC2822 format\n...\n</code></pre> <p>Type the command, then tap the <code>?</code> key.</p>"},{"location":"cli/netcalc/","title":"Network Calculator","text":"<pre><code>netcalc &lt;ADDRESS/LEN | NETWORK NETMASK&gt; [split &lt;1-32 | 64-128&gt;]\n</code></pre>"},{"location":"cli/netcalc/#description","title":"Description","text":"<p><code>netcalc</code> is a network calculator that takes an IP address and a subnet mask, or an IP address and prefix mask in CIDR notation, and then returns information about the subnet.  Both IPv4 and IPv6 is supported.</p> <p>A subnet can be entered in two ways:</p> <ul> <li><code>192.168.2.0 255.255.255.0</code>: traditional IPv4 'address netmask' style</li> <li><code>192.168.2.0/24</code>: modern prefix length, same also for IPv6</li> </ul> <p>An optional <code>split LEN</code> can be given as argument, the new length value must be bigger than the current prefix length.  See example below.</p>"},{"location":"cli/netcalc/#examples","title":"Examples","text":"<p>Its most commonly used features are to understand how many addresses an IP subnet has, what the broadcast address is, first and last usable address.</p> <pre><code>admin@example:/&gt; netcalc 192.168.2.0/24\nAddress  : 192.168.2.0          11000000.10101000.00000010. 00000000\nNetmask  : 255.255.255.0 = 24   11111111.11111111.11111111. 00000000\nWildcard : 0.0.0.255            00000000.00000000.00000000. 11111111\n=&gt;\nNetwork  : 192.168.2.0/24       11000000.10101000.00000010. 00000000\nHostMin  : 192.168.2.1          11000000.10101000.00000010. 00000001\nHostMax  : 192.168.2.254        11000000.10101000.00000010. 11111110\nBroadcast: 192.168.2.255        11000000.10101000.00000010. 11111111\nHosts/Net: 254                   Class C, Private network (RFC1918)\n</code></pre> <p>Another common use-case is for IP subnetting, i.e., using only as many addresses for an IP subnet as needed.  Example, to split the above /24 in four:</p> <pre><code>admin@example:/&gt; netcalc 192.168.2.0/24 split 26\nAddress  : 192.168.2.0          11000000.10101000.00000010. 00000000\nNetmask  : 255.255.255.0 = 24   11111111.11111111.11111111. 00000000\nWildcard : 0.0.0.255            00000000.00000000.00000000. 11111111\n=&gt;\nNetwork  : 192.168.2.0/24       11000000.10101000.00000010. 00000000\nHostMin  : 192.168.2.1          11000000.10101000.00000010. 00000001\nHostMax  : 192.168.2.254        11000000.10101000.00000010. 11111110\nBroadcast: 192.168.2.255        11000000.10101000.00000010. 11111111\nHosts/Net: 254                   Class C, Private network (RFC1918)\n\n[Split network/26]\nNetwork  : 192.168.2.0   - 192.168.2.63     Netmask  : 255.255.255.192\nNetwork  : 192.168.2.64  - 192.168.2.127    Netmask  : 255.255.255.192\nNetwork  : 192.168.2.128 - 192.168.2.191    Netmask  : 255.255.255.192\nNetwork  : 192.168.2.192 - 192.168.2.255    Netmask  : 255.255.255.192\n</code></pre>"},{"location":"cli/quick/","title":"CLI Quickstart Guide","text":"<p>The question mark <code>?</code> key along with the <code>Tab</code> key are your best friends in the command line interface.  They provide context help and completion of commands you input.  See the table below for a handful of examples.</p> Command Description <code>help</code> Overview of topics/settings in the current context <code>?</code> Lists commands + brief help in the current context <code>&lt;Tab&gt;</code> Lists commands available in the current context <code>partial&lt;Tab&gt;</code> Completes a partial command name <code>command &lt;Tab&gt;</code> Lists keywords/arguments associated with a command <code>command keyword ?</code> Lists arguments associated with a keyword + help <p>Explore the following topics for more information.  Note, the keybindings are really useful to learn!</p> Command Description <code>help introduction</code> An introduction to the CLI <code>help configure</code> How to use configure context <code>help text-editor</code> Help with the built-in text-editor command <code>help keybindings</code> Lists available keybindings &amp; other helpful tricks <p>In <code>configure</code> context the <code>help setting</code> command shows the YANG description text for each node and container.  To reach the admin exec help from configure context, e.g., <code>do help text-editor</code></p>"},{"location":"cli/tcpdump/","title":"Network Monitoring","text":"<p><code>tcpdump</code> is useful tool for analyzing and diagnosing network problems. This document presents the limited feature set that exposed is in the CLI.  Administrator level users with shell access can use the full feature set, and is not described here.</p> <p>The following section is useful for understanding how to use the tool. A section called Examples follows that, which may be what you want to scroll down to.</p>"},{"location":"cli/tcpdump/#hardware-overview","title":"Hardware Overview","text":"<p>Using <code>tcpdump</code> effectively requires an understanding of how the underlying hardware works.  For a standard PC, or common single-board computers (SBC), the network cards (NICs) are usually connected directly to the CPU.</p> <pre><code>                      .---------.\n                      |         +-- eth0\n                      |   CPU   |\n                      |         +-- eth1\n                      '---------'\n</code></pre> <p>In this setup it is evident that traffic coming in on either eth0 or eth1 reach the CPU, i.e., running <code>tcpdump eth0</code> captures all traffic.</p> <p>However, on other types of networking hardware, e.g., dedicated switch core setups depicted below, the flow of network traffic will likely not pass through the CPU.  This depends of course on how the switch is set up, for instance if routing between all ports is enabled, each flow will reach the CPU, but in a plain switching setup it will not.</p> <pre><code>                      .---------.\n                      |         |\n                      |   CPU   |\n                      |         |\n                      '----+----'\n                           |\n                           |\n                .----------+---------.\n                |                    |\n             ---+                    +---\n            E1  |         SC         |  E3\n             ---+                    +---\n            E2  |                    |  E4\n                '--+--+--+--+--+--+--'\n                   |  |  |  |  |  |\n                  E5 E6 E7 E8 E9 E10\n</code></pre> <p>So, running <code>tcpdump e1</code> in a switching setup, inside the CPU, the only traffic that will be captured is traffic ingressing port E1 destined for the CPU itself.  To analyze traffic going through the switch, you need something called port mirroring, or port monitoring, i.e., setting up the switch core to mirror traffic ingressing and/or egressing a set of ports to another port.  On this monitor port you can then run your tcpdump, which means you need an external device (laptop).</p> <p>A planned feature is to support mirroring traffic to the CPU port, which would be an effective way to log and monitor traffic over a longer period of time.  Highly effective for diagnosing intermittent and other rare network issues.</p> <p>If only \"proof of life\" is required, then sometimes port counters, also called RMON counters, can be very useful too.  Seeing counters of a particular type increment means traffic is ingressing or egressing.</p>"},{"location":"cli/tcpdump/#examples","title":"Examples","text":"<p>Listen to all traffic on an interface:</p> <pre><code>admin@example:/&gt; tcpdump e1\n</code></pre> <p>Listen to only ping traffic:</p> <pre><code>admin@example:/&gt; tcpdump e1 expression icmp\n</code></pre> <p>Listen to traffic on a given port:</p> <pre><code>admin@example:/&gt; tcpdump e1 expression \"port 80\"\n</code></pre> <p>Wait for one ping only:</p> <pre><code>admin@example:/&gt; tcpdump e1 count 1 expression icmp\n</code></pre> <p>Very verbose output:</p> <pre><code>admin@example:/&gt; tcpdump e1 verbose\n</code></pre>"},{"location":"cli/text-editor/","title":"Text Editor","text":"<p>The CLI built-in <code>text-editor</code> command can be used to edit type <code>binary</code> settings in configure context.</p> <p>The default editor is a Micro Emacs clone.  Users not familiar with terminal based editors may benefit from this introduction.</p>"},{"location":"cli/text-editor/#escape-metaalt-control-shift","title":"Escape Meta/Alt Control Shift","text":"<p>When starting up, the editor status field at the bottom shows the following shorthand:</p> <pre><code>C-h q  quick help | C-h t  tutorial | C-h b  key bindings | C = Ctrl | M = Alt\n</code></pre> <p>Key combinations with a <code>-</code> (dash) mean holding down the modifier key. Combinations without a <code>-</code> (dash) mean without any modifier key.</p>"},{"location":"cli/text-editor/#quick-help-c-h-q","title":"Quick help <code>C-h q</code>","text":"<ul> <li>hold down the <code>Ctrl</code> key on</li> <li>tap the <code>h</code> key</li> <li>release <code>Ctrl</code></li> <li>tap the <code>q</code> key</li> </ul> <p>The bottom part of the terminal now shows a \"buffer\" called <code>*quick*</code>:</p> <pre><code>FILE              BUFFER           WINDOW            MARK/KILL        MISC\nC-x C-c exit      C-x b   switch   C-x 0 only other  C-space mark     C-_ undo\nC-x C-f find      C-x k   close    C-x 1 only this   C-w     kill-rg  C-s search\nC-x C-s save      C-x C-b list     C-x 2 split two   C-k     kill-ln  C-r r-search\nC-x s   save-all  C-x h   mark     C-x ^ enlarge     C-y     yank     M-% replace\nC-x i   insert    C-x g   goto-ln  C-x o other win   C-x C-x swap     M-q reformat\n</code></pre>"},{"location":"cli/text-editor/#save-exit-c-x-c-c","title":"Save &amp; Exit <code>C-x C-c</code>","text":"<ul> <li>Hold down the Ctrl key</li> <li>tap <code>X</code></li> <li>tap <code>c</code></li> <li>release <code>Ctrl</code></li> </ul> <p>The status field at the bottom asks if you are really sure, and/or if you want to add a final Enter/newline to the file.  For binary content that final newline may be important.</p>"},{"location":"cli/text-editor/#changing-the-editor","title":"Changing the Editor","text":"<p>The system has three different built-in editors: </p> <ul> <li><code>emacs</code> (Micro Emacs)</li> <li><code>nano</code> (GNU Nano)</li> <li><code>vi</code> (Visual Editor)</li> </ul> <p>Changing editor is done in configure context, in the system container:</p> <pre><code>admin@host:/&gt; configure\nadmin@host:/config/&gt; edit system\nadmin@host:/config/system/&gt; set text-editor &lt;TAB&gt;\nemacs   nano    vi\nadmin@host:/config/system/&gt; set text-editor nano\nadmin@host:/config/system/&gt; leave\nadmin@host:/&gt;\n</code></pre>"},{"location":"cli/upgrade/","title":"Upgrading the System","text":"<p>The admin-exec command <code>upgrade</code> can be used to install software images, or bundles.  A bundle is a signed and self-contained package that carries all the information necessary to determine if it holds a bootloader, a Linux image, or even both.</p> <p>To install a new software image to the currently inactive partition<sup>1</sup>, we use the <code>upgrade</code> command and a URI to a ftp/tftp/sftp or http/https server that hosts the file:</p> <pre><code>admin@host:/&gt; upgrade tftp://192.168.122.1/firmware-x86_64-v23.11.pkg\ninstalling\n  0% Installing\n  0% Determining slot states\n 20% Determining slot states done.\n 20% Checking bundle\n 20% Verifying signature\n 40% Verifying signature done.\n 40% Checking bundle done.\n 40% Checking manifest contents\n 60% Checking manifest contents done.\n 60% Determining target install group\n 80% Determining target install group done.\n 80% Updating slots\n 80% Checking slot rootfs.1\n 90% Checking slot rootfs.1 done.\n 90% Copying image to rootfs.1\n 99% Copying image to rootfs.1 done.\n 99% Updating slots done.\n100% Installing done.\nInstalling `tftp://192.168.122.1/firmware-x86_64-v23.11.pkg` succeeded\nadmin@host:/&gt;\n</code></pre> <p>The secondary partition (<code>rootfs.1</code>) has now been upgraded and will be used as the active partition on the next boot.  Leaving the primary partition, with the version we are currently running, intact in case of trouble.</p> <p>See Upgrade &amp; Boot Order for more information on upgrading.</p> <ol> <li> <p>It is not possible to upgrade the partition we booted from.  Thankfully the underlying \"rauc\" subsystem keeps track of this.  Hence, to upgrade both partitions you must reboot to the new version (to verify it works) and then repeat the same command.\u00a0\u21a9</p> </li> </ol>"}]}