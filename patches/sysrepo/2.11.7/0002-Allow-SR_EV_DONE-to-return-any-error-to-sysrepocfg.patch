From 936d4f34a12ef1a2fe3372df051b77ea19ce5d59 Mon Sep 17 00:00:00 2001
From: Joachim Wiberg <troglobit@gmail.com>
Date: Tue, 7 May 2024 15:41:53 +0200
Subject: [PATCH 2/7] Allow SR_EV_DONE to return any error to sysrepocfg
Organization: Addiva Elektronik

Importing a system configuration with sysrepocfg the model callbacks do
their best to validate the configuration and prepare the transaction in
SR_EV_CHANGE.  In cases when dealing with a complex system, like adding
a route, address, or other change using iproute2, we may still get into
trouble when actually sending off the transaction in SR_EV_DONE.

If something does go wrong we'd like to know this by the exit code of
sysrepocfg, not by inspecting logs or expected system state.

This patch is a clumsy way of forcing the (first) error to bubble up to
the surface and cause a non-zero exit code from sysrepocfg.

Signed-off-by: Joachim Wiberg <troglobit@gmail.com>
---
 src/shm_sub.c | 36 ++++++++++++++++++++++++++++--------
 src/shm_sub.h |  2 +-
 src/sysrepo.c |  2 +-
 3 files changed, 30 insertions(+), 10 deletions(-)

diff --git a/src/shm_sub.c b/src/shm_sub.c
index 000f5906..4c59cbbf 100644
--- a/src/shm_sub.c
+++ b/src/shm_sub.c
@@ -1659,7 +1659,7 @@ cleanup:
 
 sr_error_info_t *
 sr_shmsub_change_notify_change_done(struct sr_mod_info_s *mod_info, const char *orig_name, const void *orig_data,
-        uint32_t timeout_ms)
+        uint32_t timeout_ms, sr_error_info_t **cb_err_info)
 {
     sr_error_info_t *err_info = NULL;
     struct sr_mod_info_mod_s *mod = NULL;
@@ -1791,12 +1791,19 @@ sr_shmsub_change_notify_change_done(struct sr_mod_info_s *mod_info, const char *
             sr_rwunlock(&nsub->sub_shm->lock, 0, SR_LOCK_WRITE, cid, __func__);
             nsub->lock = SR_LOCK_NONE;
 
-            /* we do not care about an error */
-            sr_errinfo_free(&nsub->cb_err_info);
-
             SR_LOG_DBG("EV ORIGIN: \"%s\" \"%s\" ID %" PRIu32 " priority %" PRIu32 " succeeded.",
                     nsub->mod->ly_mod->name, sr_ev2str(SR_SUB_EV_DONE), nsub->mod->request_id, nsub->cur_priority);
 
+            /*
+             * unexpected critical error, merge and cleanup, let
+             * sysrepocfg caller handle undefined system state.
+             */
+            if (nsub->cb_err_info) {
+                sr_errinfo_merge(cb_err_info, nsub->cb_err_info);
+                nsub->cb_err_info = NULL;
+                goto cleanup;
+            }
+
             nsub->pending_event = 0;
         }
     } while (1);
@@ -3278,7 +3285,7 @@ sr_shmsub_change_listen_relock(sr_sub_shm_t *sub_shm, sr_lock_mode_t mode, struc
 sr_error_info_t *
 sr_shmsub_change_listen_process_module_events(struct modsub_change_s *change_subs, sr_conn_ctx_t *conn)
 {
-    sr_error_info_t *err_info = NULL;
+    sr_error_info_t *err_info = NULL, *err_tmp;
     uint32_t i, data_len = 0, valid_subscr_count;
     char *data = NULL, *shm_data_ptr;
     int ret = SR_ERR_OK, filter_valid;
@@ -3406,6 +3413,11 @@ process_event:
                 }
                 break;
             }
+        } else if (sub_info.event == SR_SUB_EV_DONE) {
+            if (ret && err_code == SR_ERR_OK) {
+                /* unexpected, callback actually failed, save for later. */
+                err_code = ret;
+            }
         }
 
         /* subscription processed this event */
@@ -3438,6 +3450,11 @@ process_event:
         }
         break;
     case SR_SUB_EV_DONE:
+        if (err_code) {
+            /* prepare unexepected error from session to be written to SHM */
+            sr_errinfo_new(&err_info, err_code, "Oups, error detected in SR_EV_DONE");
+        }
+        break;
     case SR_SUB_EV_ABORT:
         /* nothing to do */
         break;
@@ -3457,14 +3474,17 @@ process_event:
 
     /* SUB WRITE URGE LOCK */
     if (sr_shmsub_change_listen_relock(sub_shm, SR_LOCK_WRITE_URGE, &sub_info, change_sub, change_subs->module_name,
-            ret, filter_valid, ev_sess, &err_info)) {
+            ret,  filter_valid, ev_sess, &err_tmp)) {
+        if (err_tmp)
+            err_info = err_tmp;
         goto cleanup;
     }
     sub_lock = SR_LOCK_WRITE_URGE;
 
     /* finish event */
-    if ((err_info = sr_shmsub_listen_write_event(sub_shm, valid_subscr_count, err_code, &shm_data_sub, data,
+    if ((err_tmp = sr_shmsub_listen_write_event(sub_shm, valid_subscr_count, err_code, &shm_data_sub, data,
             data_len, change_subs->module_name, err_code ? "fail" : "success"))) {
+        err_info = err_tmp;
         goto cleanup;
     }
 
@@ -3953,7 +3973,7 @@ finish_iter:
             sr_errinfo_free(&cb_err_info);
 
             /* publish "done" event */
-            if ((err_info = sr_shmsub_change_notify_change_done(&mod_info, NULL, NULL, SR_CHANGE_CB_TIMEOUT))) {
+            if ((err_info = sr_shmsub_change_notify_change_done(&mod_info, NULL, NULL, SR_CHANGE_CB_TIMEOUT, &cb_err_info))) {
                 goto cleanup_unlock;
             }
 
diff --git a/src/shm_sub.h b/src/shm_sub.h
index 62050e98..04637223 100644
--- a/src/shm_sub.h
+++ b/src/shm_sub.h
@@ -144,7 +144,7 @@ sr_error_info_t *sr_shmsub_change_notify_change(struct sr_mod_info_s *mod_info,
  * @return err_info, NULL on success.
  */
 sr_error_info_t *sr_shmsub_change_notify_change_done(struct sr_mod_info_s *mod_info, const char *orig_name,
-        const void *orig_data, uint32_t timeout_ms);
+        const void *orig_data, uint32_t timeout_ms, sr_error_info_t **cb_err_info);
 
 /**
  * @brief Notify about (generate) a change "abort" event.
diff --git a/src/sysrepo.c b/src/sysrepo.c
index 06428bd8..3f08a627 100644
--- a/src/sysrepo.c
+++ b/src/sysrepo.c
@@ -3913,7 +3913,7 @@ store:
     }
 
     /* publish "done" event, all changes were applied */
-    if ((err_info = sr_shmsub_change_notify_change_done(mod_info, orig_name, orig_data, timeout_ms))) {
+    if ((err_info = sr_shmsub_change_notify_change_done(mod_info, orig_name, orig_data, timeout_ms, cb_err_info))) {
         goto cleanup;
     }
 
-- 
2.43.0

