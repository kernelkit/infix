From 1399fa451016f4f8e1899605491074bf67410d30 Mon Sep 17 00:00:00 2001
From: Michal Vasko <mvasko@cesnet.cz>
Date: Thu, 30 Jan 2025 14:24:45 +0100
Subject: [PATCH 18/27] tree data new BUGFIX proper any value update
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Wires

Signed-off-by: Mattias Walstr√∂m <lazzer@gmail.com>
---
 src/tree_data_new.c          | 11 +++++++----
 tests/utests/data/test_new.c | 38 +++++++++++++++++++++++++++++++++---
 2 files changed, 42 insertions(+), 7 deletions(-)

diff --git a/src/tree_data_new.c b/src/tree_data_new.c
index 76f9a6200..0b6d81ee3 100644
--- a/src/tree_data_new.c
+++ b/src/tree_data_new.c
@@ -1479,13 +1479,14 @@ cleanup:
  * @param[in] value_len Length of @p value.
  * @param[in] value_type Type of @p value for anydata/anyxml node.
  * @param[in] format Format of @p value.
+ * @param[in] any_use_value Whether to spend @p value when updating an anydata/anyxml node or not.
  * @param[out] new_parent Set to @p node if the value was updated, otherwise set to NULL.
  * @param[out] new_node Set to @p node if the value was updated, otherwise set to NULL.
  * @return LY_ERR value.
  */
 static LY_ERR
 lyd_new_path_update(struct lyd_node *node, const void *value, size_t value_len, LYD_ANYDATA_VALUETYPE value_type,
-        LY_VALUE_FORMAT format, struct lyd_node **new_parent, struct lyd_node **new_node)
+        LY_VALUE_FORMAT format, ly_bool any_use_value, struct lyd_node **new_parent, struct lyd_node **new_node)
 {
     LY_ERR ret = LY_SUCCESS;
     struct lyd_node *new_any;
@@ -1525,12 +1526,14 @@ lyd_new_path_update(struct lyd_node *node, const void *value, size_t value_len,
     case LYS_ANYDATA:
     case LYS_ANYXML:
         /* create a new any node */
-        LY_CHECK_RET(lyd_create_any(node->schema, value, value_type, 0, &new_any));
+        LY_CHECK_RET(lyd_create_any(node->schema, value, value_type, any_use_value, &new_any));
 
         /* compare with the existing one */
         if (lyd_compare_single(node, new_any, 0)) {
             /* not equal, switch values (so that we can use generic node free) */
-            ((struct lyd_node_any *)new_any)->value = ((struct lyd_node_any *)node)->value;
+            value = ((struct lyd_node_any *)new_any)->value.str;
+            value_type = ((struct lyd_node_any *)new_any)->value_type;
+            ((struct lyd_node_any *)new_any)->value.str = ((struct lyd_node_any *)node)->value.str;
             ((struct lyd_node_any *)new_any)->value_type = ((struct lyd_node_any *)node)->value_type;
             ((struct lyd_node_any *)node)->value.str = value;
             ((struct lyd_node_any *)node)->value_type = value_type;
@@ -1708,7 +1711,7 @@ lyd_new_path_(struct lyd_node *parent, const struct ly_ctx *ctx, const struct ly
                 }
 
                 /* update the existing node */
-                ret = lyd_new_path_update(node, value, value_len, value_type, format, &nparent, &nnode);
+                ret = lyd_new_path_update(node, value, value_len, value_type, format, any_use_value, &nparent, &nnode);
                 goto cleanup;
             } /* else we were not searching for the whole path */
         } else if (r == LY_EINCOMPLETE) {
diff --git a/tests/utests/data/test_new.c b/tests/utests/data/test_new.c
index 47ecc1907..9f34b88da 100644
--- a/tests/utests/data/test_new.c
+++ b/tests/utests/data/test_new.c
@@ -424,7 +424,6 @@ test_path(void **state)
     ret = lyd_new_path2(NULL, UTEST_LYCTX, "/a:any", "<elem>val</elem>", 0, LYD_ANYDATA_XML, 0, &root, NULL);
     assert_int_equal(ret, LY_SUCCESS);
     assert_non_null(root);
-
     lyd_print_mem(&str, root, LYD_XML, LYD_PRINT_WITHSIBLINGS);
     assert_string_equal(str,
             "<any xmlns=\"urn:tests:a\">\n"
@@ -445,7 +444,6 @@ test_path(void **state)
     ret = lyd_new_path2(NULL, UTEST_LYCTX, "/a:anyx", "<a/><b/><c/>", 0, LYD_ANYDATA_XML, 0, &root, NULL);
     assert_int_equal(ret, LY_SUCCESS);
     assert_non_null(root);
-
     lyd_print_mem(&str, root, LYD_XML, LYD_PRINT_WITHSIBLINGS);
     assert_string_equal(str,
             "<anyx xmlns=\"urn:tests:a\">\n"
@@ -466,10 +464,44 @@ test_path(void **state)
     free(str);
     lyd_free_siblings(root);
 
-    ret = lyd_new_path2(NULL, UTEST_LYCTX, "/a:anyx", "{\"a\":[null],\"b\":[null],\"c\":[null]}", 0, LYD_ANYDATA_JSON, 0, &root, NULL);
+    ret = lyd_new_path2(NULL, UTEST_LYCTX, "/a:anyx", "<a/><b/><c/>", 0, LYD_ANYDATA_XML, 0, &root, NULL);
     assert_int_equal(ret, LY_SUCCESS);
     assert_non_null(root);
+    ret = lyd_new_path2(root, NULL, "/a:anyx", "[10,11,12]", 0, LYD_ANYDATA_JSON, LYD_NEW_PATH_UPDATE, NULL, NULL);
+    assert_int_equal(ret, LY_SUCCESS);
+    lyd_print_mem(&str, root, LYD_XML, LYD_PRINT_WITHSIBLINGS);
+    assert_string_equal(str,
+            "<anyx xmlns=\"urn:tests:a\">[10,11,12]</anyx>\n");
+    free(str);
+    lyd_print_mem(&str, root, LYD_JSON, LYD_PRINT_WITHSIBLINGS);
+    assert_string_equal(str,
+            "{\n"
+            "  \"a:anyx\": [10,11,12]\n"
+            "}\n");
+    free(str);
+    lyd_free_siblings(root);
 
+    ret = lyd_new_path2(NULL, UTEST_LYCTX, "/a:anyx", "<a/><b/><c/>", 0, LYD_ANYDATA_XML, 0, &root, NULL);
+    assert_int_equal(ret, LY_SUCCESS);
+    assert_non_null(root);
+    ret = lyd_new_path2(root, NULL, "/a:anyx", strdup("[10,11,12]"), 0, LYD_ANYDATA_JSON,
+            LYD_NEW_PATH_UPDATE | LYD_NEW_ANY_USE_VALUE, NULL, NULL);
+    assert_int_equal(ret, LY_SUCCESS);
+    lyd_print_mem(&str, root, LYD_XML, LYD_PRINT_WITHSIBLINGS);
+    assert_string_equal(str,
+            "<anyx xmlns=\"urn:tests:a\">[10,11,12]</anyx>\n");
+    free(str);
+    lyd_print_mem(&str, root, LYD_JSON, LYD_PRINT_WITHSIBLINGS);
+    assert_string_equal(str,
+            "{\n"
+            "  \"a:anyx\": [10,11,12]\n"
+            "}\n");
+    free(str);
+    lyd_free_siblings(root);
+
+    ret = lyd_new_path2(NULL, UTEST_LYCTX, "/a:anyx", "{\"a\":[null],\"b\":[null],\"c\":[null]}", 0, LYD_ANYDATA_JSON, 0, &root, NULL);
+    assert_int_equal(ret, LY_SUCCESS);
+    assert_non_null(root);
     lyd_print_mem(&str, root, LYD_XML, LYD_PRINT_WITHSIBLINGS);
     assert_string_equal(str,
             "<anyx xmlns=\"urn:tests:a\">\n"
-- 
2.43.0

