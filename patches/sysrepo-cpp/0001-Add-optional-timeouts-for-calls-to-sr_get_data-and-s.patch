From 36f2ad3c009f4234d906485439ead42a6fbb7adf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Mattias=20Walstr=C3=B6m?= <lazzer@gmail.com>
Date: Tue, 25 Jun 2024 16:18:07 +0200
Subject: [PATCH] Add optional timeouts for calls to sr_get_data and
 sr_get_node
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Addiva Elektronik

Signed-off-by: Mattias Walstr√∂m <lazzer@gmail.com>

Change-Id: Ia91eb6823e64322e37e661b60b369dfedc5677fb
---
 include/sysrepo-cpp/Session.hpp | 4 ++--
 src/Session.cpp                 | 8 ++++----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/include/sysrepo-cpp/Session.hpp b/include/sysrepo-cpp/Session.hpp
index 7c5c71c..350df7a 100644
--- a/include/sysrepo-cpp/Session.hpp
+++ b/include/sysrepo-cpp/Session.hpp
@@ -88,9 +88,9 @@ public:
     void discardItems(const std::optional<std::string>& xpath);
     void moveItem(const std::string& path, const MovePosition move, const std::optional<std::string>& keys_or_value, const std::optional<std::string>& origin = std::nullopt, const EditOptions opts = sysrepo::EditOptions::Default);
     // TODO: allow timeout argument
-    std::optional<libyang::DataNode> getData(const std::string& path, int maxDepth = 0, const GetOptions opts = sysrepo::GetOptions::Default) const;
+    std::optional<libyang::DataNode> getData(const std::string& path, int maxDepth = 0, const GetOptions opts = sysrepo::GetOptions::Default, std::chrono::milliseconds timeout = std::chrono::milliseconds{0}) const;
     // TODO: allow all arguments
-    libyang::DataNode getOneNode(const std::string& path) const;
+    libyang::DataNode getOneNode(const std::string& path, std::chrono::milliseconds timeout = std::chrono::milliseconds{0}) const;
     std::optional<const libyang::DataNode> getPendingChanges() const;
     void applyChanges(std::chrono::milliseconds timeout = std::chrono::milliseconds{0});
     void discardChanges();
diff --git a/src/Session.cpp b/src/Session.cpp
index e9d2976..04b0333 100644
--- a/src/Session.cpp
+++ b/src/Session.cpp
@@ -191,10 +191,10 @@ libyang::DataNode wrapSrData(std::shared_ptr<sr_session_ctx_s> sess, sr_data_t*
  * @param opts GetOptions overriding default behaviour
  * @returns std::nullopt if no matching data found, otherwise the requested data.
  */
-std::optional<libyang::DataNode> Session::getData(const std::string& path, int maxDepth, const GetOptions opts) const
+std::optional<libyang::DataNode> Session::getData(const std::string& path, int maxDepth, const GetOptions opts, std::chrono::milliseconds timeout) const
 {
     sr_data_t* data;
-    auto res = sr_get_data(m_sess.get(), path.c_str(), maxDepth, 0, toGetOptions(opts), &data);
+    auto res = sr_get_data(m_sess.get(), path.c_str(), maxDepth, timeout.count(), toGetOptions(opts), &data);
 
     throwIfError(res, "Session::getData: Couldn't get '"s + path + "'", m_sess.get());
 
@@ -219,10 +219,10 @@ std::optional<libyang::DataNode> Session::getData(const std::string& path, int m
  * @param path XPath which corresponds to the data that should be retrieved.
  * @returns the requested data node (as a disconnected node)
  */
-libyang::DataNode Session::getOneNode(const std::string& path) const
+libyang::DataNode Session::getOneNode(const std::string& path, std::chrono::milliseconds timeout) const
 {
     sr_data_t* data;
-    auto res = sr_get_node(m_sess.get(), path.c_str(), 0, &data);
+    auto res = sr_get_node(m_sess.get(), path.c_str(), timeout.count(), &data);
 
     throwIfError(res, "Session::getOneNode: Couldn't get '"s + path + "'", m_sess.get());
 
-- 
2.34.1

